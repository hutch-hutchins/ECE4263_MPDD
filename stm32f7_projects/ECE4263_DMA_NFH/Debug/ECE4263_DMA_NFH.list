
ECE4263_DMA_NFH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004310  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080044d8  080044d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f8  080044f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004500  08004500  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004504  08004504  00014504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002550  2000000c  08004514  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000255c  08004514  0002255c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea74  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000232a  00000000  00000000  0002eab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00030de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  000319f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002640f  00000000  00000000  00032528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000df7b  00000000  00000000  00058937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed66b  00000000  00000000  000668b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00153f1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b8  00000000  00000000  00153f70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080044c0 	.word	0x080044c0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080044c0 	.word	0x080044c0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fc29 	bl	8000d5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f816 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f972 	bl	80007f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000510:	f000 f8f4 	bl	80006fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000514:	f000 f922 	bl	800075c <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 8000518:	f000 f94e 	bl	80007b8 <MX_DMA_Init>
  MX_ADC1_Init();
 800051c:	f000 f89c 	bl	8000658 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcBuffer, ADC_BUF_LEN);
 8000520:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000524:	4902      	ldr	r1, [pc, #8]	; (8000530 <main+0x30>)
 8000526:	4803      	ldr	r0, [pc, #12]	; (8000534 <main+0x34>)
 8000528:	f000 fcdc 	bl	8000ee4 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052c:	e7fe      	b.n	800052c <main+0x2c>
 800052e:	bf00      	nop
 8000530:	20000028 	.word	0x20000028
 8000534:	200024b0 	.word	0x200024b0

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b0b4      	sub	sp, #208	; 0xd0
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 ffb2 	bl	80044b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800055c:	f107 0308 	add.w	r3, r7, #8
 8000560:	2284      	movs	r2, #132	; 0x84
 8000562:	2100      	movs	r1, #0
 8000564:	4618      	mov	r0, r3
 8000566:	f003 ffa3 	bl	80044b0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800056a:	f002 f81d 	bl	80025a8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b37      	ldr	r3, [pc, #220]	; (800064c <SystemClock_Config+0x114>)
 8000570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000572:	4a36      	ldr	r2, [pc, #216]	; (800064c <SystemClock_Config+0x114>)
 8000574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000578:	6413      	str	r3, [r2, #64]	; 0x40
 800057a:	4b34      	ldr	r3, [pc, #208]	; (800064c <SystemClock_Config+0x114>)
 800057c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000586:	4b32      	ldr	r3, [pc, #200]	; (8000650 <SystemClock_Config+0x118>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800058e:	4a30      	ldr	r2, [pc, #192]	; (8000650 <SystemClock_Config+0x118>)
 8000590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000594:	6013      	str	r3, [r2, #0]
 8000596:	4b2e      	ldr	r3, [pc, #184]	; (8000650 <SystemClock_Config+0x118>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800059e:	603b      	str	r3, [r7, #0]
 80005a0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a2:	2301      	movs	r3, #1
 80005a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b0:	2302      	movs	r3, #2
 80005b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005be:	2304      	movs	r3, #4
 80005c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005c4:	2348      	movs	r3, #72	; 0x48
 80005c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005d0:	2303      	movs	r3, #3
 80005d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fff4 	bl	80025c8 <HAL_RCC_OscConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005e6:	f000 fa0b 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ea:	230f      	movs	r3, #15
 80005ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000604:	2300      	movs	r3, #0
 8000606:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800060a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f002 fa7d 	bl	8002b10 <HAL_RCC_ClockConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800061c:	f000 f9f0 	bl	8000a00 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <SystemClock_Config+0x11c>)
 8000622:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000624:	2300      	movs	r3, #0
 8000626:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000628:	2300      	movs	r3, #0
 800062a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	4618      	mov	r0, r3
 8000634:	f002 fc6e 	bl	8002f14 <HAL_RCCEx_PeriphCLKConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800063e:	f000 f9df 	bl	8000a00 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	37d0      	adds	r7, #208	; 0xd0
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000
 8000654:	00200100 	.word	0x00200100

08000658 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800065e:	463b      	mov	r3, r7
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800066a:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <MX_ADC1_Init+0x98>)
 800066c:	4a21      	ldr	r2, [pc, #132]	; (80006f4 <MX_ADC1_Init+0x9c>)
 800066e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_ADC1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000676:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <MX_ADC1_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800067c:	4b1c      	ldr	r3, [pc, #112]	; (80006f0 <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_ADC1_Init+0x98>)
 8000684:	2201      	movs	r2, #1
 8000686:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000688:	4b19      	ldr	r3, [pc, #100]	; (80006f0 <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000690:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_ADC1_Init+0x98>)
 8000692:	2200      	movs	r2, #0
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000696:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <MX_ADC1_Init+0x98>)
 8000698:	4a17      	ldr	r2, [pc, #92]	; (80006f8 <MX_ADC1_Init+0xa0>)
 800069a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800069c:	4b14      	ldr	r3, [pc, #80]	; (80006f0 <MX_ADC1_Init+0x98>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_ADC1_Init+0x98>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <MX_ADC1_Init+0x98>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_ADC1_Init+0x98>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006b6:	480e      	ldr	r0, [pc, #56]	; (80006f0 <MX_ADC1_Init+0x98>)
 80006b8:	f000 fbd0 	bl	8000e5c <HAL_ADC_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006c2:	f000 f99d 	bl	8000a00 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006c6:	2303      	movs	r3, #3
 80006c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d2:	463b      	mov	r3, r7
 80006d4:	4619      	mov	r1, r3
 80006d6:	4806      	ldr	r0, [pc, #24]	; (80006f0 <MX_ADC1_Init+0x98>)
 80006d8:	f000 fd08 	bl	80010ec <HAL_ADC_ConfigChannel>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006e2:	f000 f98d 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200024b0 	.word	0x200024b0
 80006f4:	40012000 	.word	0x40012000
 80006f8:	0f000001 	.word	0x0f000001

080006fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_USART3_UART_Init+0x58>)
 8000702:	4a15      	ldr	r2, [pc, #84]	; (8000758 <MX_USART3_UART_Init+0x5c>)
 8000704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000706:	4b13      	ldr	r3, [pc, #76]	; (8000754 <MX_USART3_UART_Init+0x58>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_USART3_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_USART3_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_USART3_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_USART3_UART_Init+0x58>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_USART3_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_USART3_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_USART3_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_USART3_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_USART3_UART_Init+0x58>)
 8000740:	f002 ffd8 	bl	80036f4 <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f959 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20002028 	.word	0x20002028
 8000758:	40004800 	.word	0x40004800

0800075c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000762:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000766:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	2206      	movs	r2, #6
 800076c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000770:	2202      	movs	r2, #2
 8000772:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2202      	movs	r2, #2
 800077e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2201      	movs	r2, #1
 8000784:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	2201      	movs	r2, #1
 8000796:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a0:	f001 fdb9 	bl	8002316 <HAL_PCD_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007aa:	f000 f929 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200020ac 	.word	0x200020ac

080007b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <MX_DMA_Init+0x38>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a0b      	ldr	r2, [pc, #44]	; (80007f0 <MX_DMA_Init+0x38>)
 80007c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <MX_DMA_Init+0x38>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2100      	movs	r1, #0
 80007da:	2038      	movs	r0, #56	; 0x38
 80007dc:	f001 f827 	bl	800182e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007e0:	2038      	movs	r0, #56	; 0x38
 80007e2:	f001 f840 	bl	8001866 <HAL_NVIC_EnableIRQ>

}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	4b67      	ldr	r3, [pc, #412]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a66      	ldr	r2, [pc, #408]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b64      	ldr	r3, [pc, #400]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	61bb      	str	r3, [r7, #24]
 8000820:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	4b61      	ldr	r3, [pc, #388]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a60      	ldr	r2, [pc, #384]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b5e      	ldr	r3, [pc, #376]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b5b      	ldr	r3, [pc, #364]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a5a      	ldr	r2, [pc, #360]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b58      	ldr	r3, [pc, #352]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b55      	ldr	r3, [pc, #340]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a54      	ldr	r2, [pc, #336]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b52      	ldr	r3, [pc, #328]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800086a:	4b4f      	ldr	r3, [pc, #316]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a4e      	ldr	r2, [pc, #312]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000870:	f043 0308 	orr.w	r3, r3, #8
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b4c      	ldr	r3, [pc, #304]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0308 	and.w	r3, r3, #8
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000882:	4b49      	ldr	r3, [pc, #292]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a48      	ldr	r2, [pc, #288]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000888:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b46      	ldr	r3, [pc, #280]	; (80009a8 <MX_GPIO_Init+0x1b4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f244 0181 	movw	r1, #16513	; 0x4081
 80008a0:	4842      	ldr	r0, [pc, #264]	; (80009ac <MX_GPIO_Init+0x1b8>)
 80008a2:	f001 fd1f 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2140      	movs	r1, #64	; 0x40
 80008aa:	4841      	ldr	r0, [pc, #260]	; (80009b0 <MX_GPIO_Init+0x1bc>)
 80008ac:	f001 fd1a 	bl	80022e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	4b3f      	ldr	r3, [pc, #252]	; (80009b4 <MX_GPIO_Init+0x1c0>)
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	483c      	ldr	r0, [pc, #240]	; (80009b8 <MX_GPIO_Init+0x1c4>)
 80008c6:	f001 fb61 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008ca:	2332      	movs	r3, #50	; 0x32
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008da:	230b      	movs	r3, #11
 80008dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4834      	ldr	r0, [pc, #208]	; (80009b8 <MX_GPIO_Init+0x1c4>)
 80008e6:	f001 fb51 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008ea:	2386      	movs	r3, #134	; 0x86
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f6:	2303      	movs	r3, #3
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008fa:	230b      	movs	r3, #11
 80008fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	482d      	ldr	r0, [pc, #180]	; (80009bc <MX_GPIO_Init+0x1c8>)
 8000906:	f001 fb41 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800090a:	f244 0381 	movw	r3, #16513	; 0x4081
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4822      	ldr	r0, [pc, #136]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000924:	f001 fb32 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092e:	2302      	movs	r3, #2
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800093a:	230b      	movs	r3, #11
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4819      	ldr	r0, [pc, #100]	; (80009ac <MX_GPIO_Init+0x1b8>)
 8000946:	f001 fb21 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800094a:	2340      	movs	r3, #64	; 0x40
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800094e:	2301      	movs	r3, #1
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	2300      	movs	r3, #0
 8000958:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	4813      	ldr	r0, [pc, #76]	; (80009b0 <MX_GPIO_Init+0x1bc>)
 8000962:	f001 fb13 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000966:	2380      	movs	r3, #128	; 0x80
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	480d      	ldr	r0, [pc, #52]	; (80009b0 <MX_GPIO_Init+0x1bc>)
 800097a:	f001 fb07 	bl	8001f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800097e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000984:	2302      	movs	r3, #2
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098c:	2303      	movs	r3, #3
 800098e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000990:	230b      	movs	r3, #11
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_GPIO_Init+0x1bc>)
 800099c:	f001 faf6 	bl	8001f8c <HAL_GPIO_Init>

}
 80009a0:	bf00      	nop
 80009a2:	3730      	adds	r7, #48	; 0x30
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40020400 	.word	0x40020400
 80009b0:	40021800 	.word	0x40021800
 80009b4:	10110000 	.word	0x10110000
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020000 	.word	0x40020000

080009c0 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

//Callback for Buffer Half Full
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	4803      	ldr	r0, [pc, #12]	; (80009dc <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80009ce:	f001 fc89 	bl	80022e4 <HAL_GPIO_WritePin>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40020400 	.word	0x40020400

080009e0 <HAL_ADC_ConvCpltCallback>:

//Callback for Buffer Full
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <HAL_ADC_ConvCpltCallback+0x1c>)
 80009ee:	f001 fc79 	bl	80022e4 <HAL_GPIO_WritePin>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40020400 	.word	0x40020400

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <HAL_MspInit+0x44>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_MspInit+0x44>)
 8000a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_MspInit+0x44>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b09      	ldr	r3, [pc, #36]	; (8000a50 <HAL_MspInit+0x44>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a08      	ldr	r2, [pc, #32]	; (8000a50 <HAL_MspInit+0x44>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_MspInit+0x44>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800

08000a54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
 8000a6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a2d      	ldr	r2, [pc, #180]	; (8000b28 <HAL_ADC_MspInit+0xd4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d153      	bne.n	8000b1e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a76:	4b2d      	ldr	r3, [pc, #180]	; (8000b2c <HAL_ADC_MspInit+0xd8>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a2c      	ldr	r2, [pc, #176]	; (8000b2c <HAL_ADC_MspInit+0xd8>)
 8000a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b2a      	ldr	r3, [pc, #168]	; (8000b2c <HAL_ADC_MspInit+0xd8>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <HAL_ADC_MspInit+0xd8>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a26      	ldr	r2, [pc, #152]	; (8000b2c <HAL_ADC_MspInit+0xd8>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <HAL_ADC_MspInit+0xd8>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000aa6:	2309      	movs	r3, #9
 8000aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab2:	f107 0314 	add.w	r3, r7, #20
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	481d      	ldr	r0, [pc, #116]	; (8000b30 <HAL_ADC_MspInit+0xdc>)
 8000aba:	f001 fa67 	bl	8001f8c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <HAL_ADC_MspInit+0xe0>)
 8000ac0:	4a1d      	ldr	r2, [pc, #116]	; (8000b38 <HAL_ADC_MspInit+0xe4>)
 8000ac2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000ac4:	4b1b      	ldr	r3, [pc, #108]	; (8000b34 <HAL_ADC_MspInit+0xe0>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_ADC_MspInit+0xe0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ad0:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_ADC_MspInit+0xe0>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <HAL_ADC_MspInit+0xe0>)
 8000ad8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000adc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ade:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <HAL_ADC_MspInit+0xe0>)
 8000ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ae4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ae6:	4b13      	ldr	r3, [pc, #76]	; (8000b34 <HAL_ADC_MspInit+0xe0>)
 8000ae8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <HAL_ADC_MspInit+0xe0>)
 8000af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000af6:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <HAL_ADC_MspInit+0xe0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <HAL_ADC_MspInit+0xe0>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b02:	480c      	ldr	r0, [pc, #48]	; (8000b34 <HAL_ADC_MspInit+0xe0>)
 8000b04:	f000 feca 	bl	800189c <HAL_DMA_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000b0e:	f7ff ff77 	bl	8000a00 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <HAL_ADC_MspInit+0xe0>)
 8000b16:	639a      	str	r2, [r3, #56]	; 0x38
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_ADC_MspInit+0xe0>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b1e:	bf00      	nop
 8000b20:	3728      	adds	r7, #40	; 0x28
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40012000 	.word	0x40012000
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020000 	.word	0x40020000
 8000b34:	200024f8 	.word	0x200024f8
 8000b38:	40026410 	.word	0x40026410

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_UART_MspInit+0x7c>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d128      	bne.n	8000bb0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_UART_MspInit+0x80>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a16      	ldr	r2, [pc, #88]	; (8000bbc <HAL_UART_MspInit+0x80>)
 8000b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_UART_MspInit+0x80>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_UART_MspInit+0x80>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <HAL_UART_MspInit+0x80>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <HAL_UART_MspInit+0x80>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9c:	2303      	movs	r3, #3
 8000b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba4:	f107 0314 	add.w	r3, r7, #20
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_UART_MspInit+0x84>)
 8000bac:	f001 f9ee 	bl	8001f8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	; 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40004800 	.word	0x40004800
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020c00 	.word	0x40020c00

08000bc4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	; 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000be4:	d141      	bne.n	8000c6a <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <HAL_PCD_MspInit+0xb0>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a22      	ldr	r2, [pc, #136]	; (8000c74 <HAL_PCD_MspInit+0xb0>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <HAL_PCD_MspInit+0xb0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bfe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c10:	230a      	movs	r3, #10
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4817      	ldr	r0, [pc, #92]	; (8000c78 <HAL_PCD_MspInit+0xb4>)
 8000c1c:	f001 f9b6 	bl	8001f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	4810      	ldr	r0, [pc, #64]	; (8000c78 <HAL_PCD_MspInit+0xb4>)
 8000c36:	f001 f9a9 	bl	8001f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_PCD_MspInit+0xb0>)
 8000c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c3e:	4a0d      	ldr	r2, [pc, #52]	; (8000c74 <HAL_PCD_MspInit+0xb0>)
 8000c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c44:	6353      	str	r3, [r2, #52]	; 0x34
 8000c46:	4b0b      	ldr	r3, [pc, #44]	; (8000c74 <HAL_PCD_MspInit+0xb0>)
 8000c48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4b08      	ldr	r3, [pc, #32]	; (8000c74 <HAL_PCD_MspInit+0xb0>)
 8000c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c56:	4a07      	ldr	r2, [pc, #28]	; (8000c74 <HAL_PCD_MspInit+0xb0>)
 8000c58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_PCD_MspInit+0xb0>)
 8000c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020000 	.word	0x40020000

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc8:	f000 f884 	bl	8000dd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <DMA2_Stream0_IRQHandler+0x10>)
 8000cd6:	f000 feef 	bl	8001ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200024f8 	.word	0x200024f8

08000ce4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d0c:	480d      	ldr	r0, [pc, #52]	; (8000d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d0e:	490e      	ldr	r1, [pc, #56]	; (8000d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d10:	4a0e      	ldr	r2, [pc, #56]	; (8000d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d14:	e002      	b.n	8000d1c <LoopCopyDataInit>

08000d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1a:	3304      	adds	r3, #4

08000d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d20:	d3f9      	bcc.n	8000d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d24:	4c0b      	ldr	r4, [pc, #44]	; (8000d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d28:	e001      	b.n	8000d2e <LoopFillZerobss>

08000d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d2c:	3204      	adds	r2, #4

08000d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d30:	d3fb      	bcc.n	8000d2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d32:	f7ff ffd7 	bl	8000ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d36:	f003 fb97 	bl	8004468 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fbe1 	bl	8000500 <main>
  bx  lr    
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d40:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d4c:	08004508 	.word	0x08004508
  ldr r2, =_sbss
 8000d50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d54:	2000255c 	.word	0x2000255c

08000d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC_IRQHandler>

08000d5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5e:	2003      	movs	r0, #3
 8000d60:	f000 fd5a 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f000 f805 	bl	8000d74 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d6a:	f7ff fe4f 	bl	8000a0c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_InitTick+0x54>)
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x58>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4619      	mov	r1, r3
 8000d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d92:	4618      	mov	r0, r3
 8000d94:	f000 fd75 	bl	8001882 <HAL_SYSTICK_Config>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00e      	b.n	8000dc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b0f      	cmp	r3, #15
 8000da6:	d80a      	bhi.n	8000dbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da8:	2200      	movs	r2, #0
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f000 fd3d 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db4:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <HAL_InitTick+0x5c>)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e000      	b.n	8000dc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000004 	.word	0x20000004

08000dd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_IncTick+0x20>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x24>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4413      	add	r3, r2
 8000de4:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_IncTick+0x24>)
 8000de6:	6013      	str	r3, [r2, #0]
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	20000008 	.word	0x20000008
 8000df8:	20002558 	.word	0x20002558

08000dfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <HAL_GetTick+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	20002558 	.word	0x20002558

08000e14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e1c:	f7ff ffee 	bl	8000dfc <HAL_GetTick>
 8000e20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2c:	d005      	beq.n	8000e3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <HAL_Delay+0x44>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	4413      	add	r3, r2
 8000e38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3a:	bf00      	nop
 8000e3c:	f7ff ffde 	bl	8000dfc <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d8f7      	bhi.n	8000e3c <HAL_Delay+0x28>
  {
  }
}
 8000e4c:	bf00      	nop
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000008 	.word	0x20000008

08000e5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e64:	2300      	movs	r3, #0
 8000e66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e031      	b.n	8000ed6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d109      	bne.n	8000e8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff fdea 	bl	8000a54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2200      	movs	r2, #0
 8000e84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 0310 	and.w	r3, r3, #16
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d116      	bne.n	8000ec8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <HAL_ADC_Init+0x84>)
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	f043 0202 	orr.w	r2, r3, #2
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 fa68 	bl	8001380 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f023 0303 	bic.w	r3, r3, #3
 8000ebe:	f043 0201 	orr.w	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	641a      	str	r2, [r3, #64]	; 0x40
 8000ec6:	e001      	b.n	8000ecc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	ffffeefd 	.word	0xffffeefd

08000ee4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000efa:	2b01      	cmp	r3, #1
 8000efc:	d101      	bne.n	8000f02 <HAL_ADC_Start_DMA+0x1e>
 8000efe:	2302      	movs	r3, #2
 8000f00:	e0d4      	b.n	80010ac <HAL_ADC_Start_DMA+0x1c8>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d018      	beq.n	8000f4a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0201 	orr.w	r2, r2, #1
 8000f26:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000f28:	4b62      	ldr	r3, [pc, #392]	; (80010b4 <HAL_ADC_Start_DMA+0x1d0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a62      	ldr	r2, [pc, #392]	; (80010b8 <HAL_ADC_Start_DMA+0x1d4>)
 8000f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f32:	0c9a      	lsrs	r2, r3, #18
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000f3c:	e002      	b.n	8000f44 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d1f9      	bne.n	8000f3e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f003 0301 	and.w	r3, r3, #1
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	f040 809c 	bne.w	8001092 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f5e:	4b57      	ldr	r3, [pc, #348]	; (80010bc <HAL_ADC_Start_DMA+0x1d8>)
 8000f60:	4013      	ands	r3, r2
 8000f62:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d007      	beq.n	8000f88 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f80:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f94:	d106      	bne.n	8000fa4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	f023 0206 	bic.w	r2, r3, #6
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	645a      	str	r2, [r3, #68]	; 0x44
 8000fa2:	e002      	b.n	8000faa <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2200      	movs	r2, #0
 8000fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fb6:	4a42      	ldr	r2, [pc, #264]	; (80010c0 <HAL_ADC_Start_DMA+0x1dc>)
 8000fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fbe:	4a41      	ldr	r2, [pc, #260]	; (80010c4 <HAL_ADC_Start_DMA+0x1e0>)
 8000fc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc6:	4a40      	ldr	r2, [pc, #256]	; (80010c8 <HAL_ADC_Start_DMA+0x1e4>)
 8000fc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	685a      	ldr	r2, [r3, #4]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000fe2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	689a      	ldr	r2, [r3, #8]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ff2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	334c      	adds	r3, #76	; 0x4c
 8000ffe:	4619      	mov	r1, r3
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f000 fcf8 	bl	80019f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <HAL_ADC_Start_DMA+0x1e8>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 031f 	and.w	r3, r3, #31
 8001010:	2b00      	cmp	r3, #0
 8001012:	d10f      	bne.n	8001034 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d143      	bne.n	80010aa <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	689a      	ldr	r2, [r3, #8]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001030:	609a      	str	r2, [r3, #8]
 8001032:	e03a      	b.n	80010aa <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <HAL_ADC_Start_DMA+0x1ec>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d10e      	bne.n	800105c <HAL_ADC_Start_DMA+0x178>
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	689b      	ldr	r3, [r3, #8]
 8001044:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d107      	bne.n	800105c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	689a      	ldr	r2, [r3, #8]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800105a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <HAL_ADC_Start_DMA+0x1e8>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0310 	and.w	r3, r3, #16
 8001064:	2b00      	cmp	r3, #0
 8001066:	d120      	bne.n	80010aa <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a19      	ldr	r2, [pc, #100]	; (80010d4 <HAL_ADC_Start_DMA+0x1f0>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d11b      	bne.n	80010aa <HAL_ADC_Start_DMA+0x1c6>
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d114      	bne.n	80010aa <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	e00b      	b.n	80010aa <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f043 0210 	orr.w	r2, r3, #16
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3718      	adds	r7, #24
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	20000000 	.word	0x20000000
 80010b8:	431bde83 	.word	0x431bde83
 80010bc:	fffff8fe 	.word	0xfffff8fe
 80010c0:	08001575 	.word	0x08001575
 80010c4:	0800162f 	.word	0x0800162f
 80010c8:	0800164b 	.word	0x0800164b
 80010cc:	40012300 	.word	0x40012300
 80010d0:	40012000 	.word	0x40012000
 80010d4:	40012200 	.word	0x40012200

080010d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001100:	2b01      	cmp	r3, #1
 8001102:	d101      	bne.n	8001108 <HAL_ADC_ConfigChannel+0x1c>
 8001104:	2302      	movs	r3, #2
 8001106:	e12a      	b.n	800135e <HAL_ADC_ConfigChannel+0x272>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2201      	movs	r2, #1
 800110c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b09      	cmp	r3, #9
 8001116:	d93a      	bls.n	800118e <HAL_ADC_ConfigChannel+0xa2>
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001120:	d035      	beq.n	800118e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68d9      	ldr	r1, [r3, #12]
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	b29b      	uxth	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	3b1e      	subs	r3, #30
 8001138:	2207      	movs	r2, #7
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	43da      	mvns	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	400a      	ands	r2, r1
 8001146:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a87      	ldr	r2, [pc, #540]	; (800136c <HAL_ADC_ConfigChannel+0x280>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d10a      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	68d9      	ldr	r1, [r3, #12]
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	061a      	lsls	r2, r3, #24
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	430a      	orrs	r2, r1
 8001164:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001166:	e035      	b.n	80011d4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	68d9      	ldr	r1, [r3, #12]
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	4603      	mov	r3, r0
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4403      	add	r3, r0
 8001180:	3b1e      	subs	r3, #30
 8001182:	409a      	lsls	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800118c:	e022      	b.n	80011d4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	6919      	ldr	r1, [r3, #16]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	b29b      	uxth	r3, r3
 800119a:	461a      	mov	r2, r3
 800119c:	4613      	mov	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	4413      	add	r3, r2
 80011a2:	2207      	movs	r2, #7
 80011a4:	fa02 f303 	lsl.w	r3, r2, r3
 80011a8:	43da      	mvns	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	400a      	ands	r2, r1
 80011b0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6919      	ldr	r1, [r3, #16]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	689a      	ldr	r2, [r3, #8]
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	4603      	mov	r3, r0
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	4403      	add	r3, r0
 80011ca:	409a      	lsls	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	430a      	orrs	r2, r1
 80011d2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b06      	cmp	r3, #6
 80011da:	d824      	bhi.n	8001226 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	3b05      	subs	r3, #5
 80011ee:	221f      	movs	r2, #31
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43da      	mvns	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	400a      	ands	r2, r1
 80011fc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3b05      	subs	r3, #5
 8001218:	fa00 f203 	lsl.w	r2, r0, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	635a      	str	r2, [r3, #52]	; 0x34
 8001224:	e04c      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b0c      	cmp	r3, #12
 800122c:	d824      	bhi.n	8001278 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	3b23      	subs	r3, #35	; 0x23
 8001240:	221f      	movs	r2, #31
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	400a      	ands	r2, r1
 800124e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	b29b      	uxth	r3, r3
 800125c:	4618      	mov	r0, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	3b23      	subs	r3, #35	; 0x23
 800126a:	fa00 f203 	lsl.w	r2, r0, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	631a      	str	r2, [r3, #48]	; 0x30
 8001276:	e023      	b.n	80012c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	3b41      	subs	r3, #65	; 0x41
 800128a:	221f      	movs	r2, #31
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43da      	mvns	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	400a      	ands	r2, r1
 8001298:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	3b41      	subs	r3, #65	; 0x41
 80012b4:	fa00 f203 	lsl.w	r2, r0, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	430a      	orrs	r2, r1
 80012be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a2a      	ldr	r2, [pc, #168]	; (8001370 <HAL_ADC_ConfigChannel+0x284>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d10a      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x1f4>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012d2:	d105      	bne.n	80012e0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80012d4:	4b27      	ldr	r3, [pc, #156]	; (8001374 <HAL_ADC_ConfigChannel+0x288>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	4a26      	ldr	r2, [pc, #152]	; (8001374 <HAL_ADC_ConfigChannel+0x288>)
 80012da:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80012de:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <HAL_ADC_ConfigChannel+0x284>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d109      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x212>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b12      	cmp	r3, #18
 80012f0:	d105      	bne.n	80012fe <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <HAL_ADC_ConfigChannel+0x288>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <HAL_ADC_ConfigChannel+0x288>)
 80012f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012fc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <HAL_ADC_ConfigChannel+0x284>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d125      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x268>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a17      	ldr	r2, [pc, #92]	; (800136c <HAL_ADC_ConfigChannel+0x280>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d003      	beq.n	800131a <HAL_ADC_ConfigChannel+0x22e>
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2b11      	cmp	r3, #17
 8001318:	d11c      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800131a:	4b16      	ldr	r3, [pc, #88]	; (8001374 <HAL_ADC_ConfigChannel+0x288>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4a15      	ldr	r2, [pc, #84]	; (8001374 <HAL_ADC_ConfigChannel+0x288>)
 8001320:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001324:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a10      	ldr	r2, [pc, #64]	; (800136c <HAL_ADC_ConfigChannel+0x280>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d111      	bne.n	8001354 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_ADC_ConfigChannel+0x28c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a11      	ldr	r2, [pc, #68]	; (800137c <HAL_ADC_ConfigChannel+0x290>)
 8001336:	fba2 2303 	umull	r2, r3, r2, r3
 800133a:	0c9a      	lsrs	r2, r3, #18
 800133c:	4613      	mov	r3, r2
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	4413      	add	r3, r2
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001346:	e002      	b.n	800134e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3b01      	subs	r3, #1
 800134c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f9      	bne.n	8001348 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3714      	adds	r7, #20
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	10000012 	.word	0x10000012
 8001370:	40012000 	.word	0x40012000
 8001374:	40012300 	.word	0x40012300
 8001378:	20000000 	.word	0x20000000
 800137c:	431bde83 	.word	0x431bde83

08001380 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001388:	4b78      	ldr	r3, [pc, #480]	; (800156c <ADC_Init+0x1ec>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4a77      	ldr	r2, [pc, #476]	; (800156c <ADC_Init+0x1ec>)
 800138e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001392:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001394:	4b75      	ldr	r3, [pc, #468]	; (800156c <ADC_Init+0x1ec>)
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	4973      	ldr	r1, [pc, #460]	; (800156c <ADC_Init+0x1ec>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6859      	ldr	r1, [r3, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	021a      	lsls	r2, r3, #8
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6859      	ldr	r1, [r3, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689a      	ldr	r2, [r3, #8]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	430a      	orrs	r2, r1
 80013e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6899      	ldr	r1, [r3, #8]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140e:	4a58      	ldr	r2, [pc, #352]	; (8001570 <ADC_Init+0x1f0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d022      	beq.n	800145a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	689a      	ldr	r2, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001422:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	6899      	ldr	r1, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	430a      	orrs	r2, r1
 8001434:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001444:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	6899      	ldr	r1, [r3, #8]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	430a      	orrs	r2, r1
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	e00f      	b.n	800147a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001468:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001478:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0202 	bic.w	r2, r2, #2
 8001488:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6899      	ldr	r1, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	699b      	ldr	r3, [r3, #24]
 8001494:	005a      	lsls	r2, r3, #1
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d01b      	beq.n	80014e0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6859      	ldr	r1, [r3, #4]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	3b01      	subs	r3, #1
 80014d4:	035a      	lsls	r2, r3, #13
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	e007      	b.n	80014f0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685a      	ldr	r2, [r3, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	3b01      	subs	r3, #1
 800150c:	051a      	lsls	r2, r3, #20
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001524:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6899      	ldr	r1, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001532:	025a      	lsls	r2, r3, #9
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800154a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6899      	ldr	r1, [r3, #8]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	029a      	lsls	r2, r3, #10
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	430a      	orrs	r2, r1
 800155e:	609a      	str	r2, [r3, #8]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40012300 	.word	0x40012300
 8001570:	0f000001 	.word	0x0f000001

08001574 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001580:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800158a:	2b00      	cmp	r3, #0
 800158c:	d13c      	bne.n	8001608 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d12b      	bne.n	8001600 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d127      	bne.n	8001600 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d006      	beq.n	80015cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d119      	bne.n	8001600 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0220 	bic.w	r2, r2, #32
 80015da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d105      	bne.n	8001600 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f8:	f043 0201 	orr.w	r2, r3, #1
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f7ff f9ed 	bl	80009e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001606:	e00e      	b.n	8001626 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f7ff fd5f 	bl	80010d8 <HAL_ADC_ErrorCallback>
}
 800161a:	e004      	b.n	8001626 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	4798      	blx	r3
}
 8001626:	bf00      	nop
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b084      	sub	sp, #16
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800163a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7ff f9bf 	bl	80009c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b084      	sub	sp, #16
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001656:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2240      	movs	r2, #64	; 0x40
 800165c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f043 0204 	orr.w	r2, r3, #4
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff fd34 	bl	80010d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <__NVIC_SetPriorityGrouping+0x40>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800168e:	68ba      	ldr	r2, [r7, #8]
 8001690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001694:	4013      	ands	r3, r2
 8001696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016a0:	4b06      	ldr	r3, [pc, #24]	; (80016bc <__NVIC_SetPriorityGrouping+0x44>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016a6:	4a04      	ldr	r2, [pc, #16]	; (80016b8 <__NVIC_SetPriorityGrouping+0x40>)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	60d3      	str	r3, [r2, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00
 80016bc:	05fa0000 	.word	0x05fa0000

080016c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c4:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <__NVIC_GetPriorityGrouping+0x18>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	0a1b      	lsrs	r3, r3, #8
 80016ca:	f003 0307 	and.w	r3, r3, #7
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00

080016dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	4603      	mov	r3, r0
 80016e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	db0b      	blt.n	8001706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	f003 021f 	and.w	r2, r3, #31
 80016f4:	4907      	ldr	r1, [pc, #28]	; (8001714 <__NVIC_EnableIRQ+0x38>)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	2001      	movs	r0, #1
 80016fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000e100 	.word	0xe000e100

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff8e 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	; (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff29 	bl	8001678 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff3e 	bl	80016c0 <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff8e 	bl	800176c <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5d 	bl	8001718 <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff31 	bl	80016dc <__NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffa2 	bl	80017d4 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
	...

0800189c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018a8:	f7ff faa8 	bl	8000dfc <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d101      	bne.n	80018b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e099      	b.n	80019ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 0201 	bic.w	r2, r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018d8:	e00f      	b.n	80018fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018da:	f7ff fa8f 	bl	8000dfc <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d908      	bls.n	80018fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2220      	movs	r2, #32
 80018ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2203      	movs	r2, #3
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e078      	b.n	80019ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1e8      	bne.n	80018da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	4b38      	ldr	r3, [pc, #224]	; (80019f4 <HAL_DMA_Init+0x158>)
 8001914:	4013      	ands	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001926:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001932:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4313      	orrs	r3, r2
 800194a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	2b04      	cmp	r3, #4
 8001952:	d107      	bne.n	8001964 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	4313      	orrs	r3, r2
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4313      	orrs	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	697a      	ldr	r2, [r7, #20]
 800196a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f023 0307 	bic.w	r3, r3, #7
 800197a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	697a      	ldr	r2, [r7, #20]
 8001982:	4313      	orrs	r3, r2
 8001984:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	2b04      	cmp	r3, #4
 800198c:	d117      	bne.n	80019be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001992:	697a      	ldr	r2, [r7, #20]
 8001994:	4313      	orrs	r3, r2
 8001996:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d00e      	beq.n	80019be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 fa77 	bl	8001e94 <DMA_CheckFifoParam>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d008      	beq.n	80019be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2240      	movs	r2, #64	; 0x40
 80019b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019ba:	2301      	movs	r3, #1
 80019bc:	e016      	b.n	80019ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 fa2e 	bl	8001e28 <DMA_CalcBaseAndBitshift>
 80019cc:	4603      	mov	r3, r0
 80019ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	223f      	movs	r2, #63	; 0x3f
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3718      	adds	r7, #24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	f010803f 	.word	0xf010803f

080019f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
 8001a04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_DMA_Start_IT+0x26>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e048      	b.n	8001ab0 <HAL_DMA_Start_IT+0xb8>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d137      	bne.n	8001aa2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2202      	movs	r2, #2
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f9c0 	bl	8001dcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a50:	223f      	movs	r2, #63	; 0x3f
 8001a52:	409a      	lsls	r2, r3
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0216 	orr.w	r2, r2, #22
 8001a66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695a      	ldr	r2, [r3, #20]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a76:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0208 	orr.w	r2, r2, #8
 8001a8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e005      	b.n	8001aae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001ac4:	4b92      	ldr	r3, [pc, #584]	; (8001d10 <HAL_DMA_IRQHandler+0x258>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a92      	ldr	r2, [pc, #584]	; (8001d14 <HAL_DMA_IRQHandler+0x25c>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0a9b      	lsrs	r3, r3, #10
 8001ad0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d01a      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0204 	bic.w	r2, r2, #4
 8001b0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	2208      	movs	r2, #8
 8001b12:	409a      	lsls	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	2201      	movs	r2, #1
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d012      	beq.n	8001b5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b46:	2201      	movs	r2, #1
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f043 0202 	orr.w	r2, r3, #2
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5e:	2204      	movs	r2, #4
 8001b60:	409a      	lsls	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d012      	beq.n	8001b90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00b      	beq.n	8001b90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b88:	f043 0204 	orr.w	r2, r3, #4
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	2210      	movs	r2, #16
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d043      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d03c      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d018      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d108      	bne.n	8001be8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d024      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
 8001be6:	e01f      	b.n	8001c28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01b      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
 8001bf8:	e016      	b.n	8001c28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d107      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0208 	bic.w	r2, r2, #8
 8001c16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 808e 	beq.w	8001d56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 8086 	beq.w	8001d56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4e:	2220      	movs	r2, #32
 8001c50:	409a      	lsls	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d136      	bne.n	8001cd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0216 	bic.w	r2, r2, #22
 8001c70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d103      	bne.n	8001c92 <HAL_DMA_IRQHandler+0x1da>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0208 	bic.w	r2, r2, #8
 8001ca0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	223f      	movs	r2, #63	; 0x3f
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d07d      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	4798      	blx	r3
        }
        return;
 8001cce:	e078      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d01c      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d108      	bne.n	8001cfe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d030      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4798      	blx	r3
 8001cfc:	e02b      	b.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d027      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	4798      	blx	r3
 8001d0e:	e022      	b.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
 8001d10:	20000000 	.word	0x20000000
 8001d14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10f      	bne.n	8001d46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0210 	bic.w	r2, r2, #16
 8001d34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d032      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d022      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3301      	adds	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d307      	bcc.n	8001d9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f2      	bne.n	8001d82 <HAL_DMA_IRQHandler+0x2ca>
 8001d9c:	e000      	b.n	8001da0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
 8001dc0:	e000      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dc2:	bf00      	nop
    }
  }
}
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop

08001dcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001de8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b40      	cmp	r3, #64	; 0x40
 8001df8:	d108      	bne.n	8001e0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e0a:	e007      	b.n	8001e1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	3b10      	subs	r3, #16
 8001e38:	4a13      	ldr	r2, [pc, #76]	; (8001e88 <DMA_CalcBaseAndBitshift+0x60>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <DMA_CalcBaseAndBitshift+0x64>)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d908      	bls.n	8001e68 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <DMA_CalcBaseAndBitshift+0x68>)
 8001e5e:	4013      	ands	r3, r2
 8001e60:	1d1a      	adds	r2, r3, #4
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	659a      	str	r2, [r3, #88]	; 0x58
 8001e66:	e006      	b.n	8001e76 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <DMA_CalcBaseAndBitshift+0x68>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	aaaaaaab 	.word	0xaaaaaaab
 8001e8c:	080044f0 	.word	0x080044f0
 8001e90:	fffffc00 	.word	0xfffffc00

08001e94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d11f      	bne.n	8001eee <DMA_CheckFifoParam+0x5a>
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d856      	bhi.n	8001f62 <DMA_CheckFifoParam+0xce>
 8001eb4:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <DMA_CheckFifoParam+0x28>)
 8001eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eba:	bf00      	nop
 8001ebc:	08001ecd 	.word	0x08001ecd
 8001ec0:	08001edf 	.word	0x08001edf
 8001ec4:	08001ecd 	.word	0x08001ecd
 8001ec8:	08001f63 	.word	0x08001f63
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d046      	beq.n	8001f66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001edc:	e043      	b.n	8001f66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ee6:	d140      	bne.n	8001f6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eec:	e03d      	b.n	8001f6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef6:	d121      	bne.n	8001f3c <DMA_CheckFifoParam+0xa8>
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d837      	bhi.n	8001f6e <DMA_CheckFifoParam+0xda>
 8001efe:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <DMA_CheckFifoParam+0x70>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f15 	.word	0x08001f15
 8001f08:	08001f1b 	.word	0x08001f1b
 8001f0c:	08001f15 	.word	0x08001f15
 8001f10:	08001f2d 	.word	0x08001f2d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
      break;
 8001f18:	e030      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d025      	beq.n	8001f72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f2a:	e022      	b.n	8001f72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f34:	d11f      	bne.n	8001f76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f3a:	e01c      	b.n	8001f76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d903      	bls.n	8001f4a <DMA_CheckFifoParam+0xb6>
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b03      	cmp	r3, #3
 8001f46:	d003      	beq.n	8001f50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f48:	e018      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f4e:	e015      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d00e      	beq.n	8001f7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f60:	e00b      	b.n	8001f7a <DMA_CheckFifoParam+0xe6>
      break;
 8001f62:	bf00      	nop
 8001f64:	e00a      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f66:	bf00      	nop
 8001f68:	e008      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f6a:	bf00      	nop
 8001f6c:	e006      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f6e:	bf00      	nop
 8001f70:	e004      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f72:	bf00      	nop
 8001f74:	e002      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;   
 8001f76:	bf00      	nop
 8001f78:	e000      	b.n	8001f7c <DMA_CheckFifoParam+0xe8>
      break;
 8001f7a:	bf00      	nop
    }
  } 
  
  return status; 
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop

08001f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b089      	sub	sp, #36	; 0x24
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	e175      	b.n	8002298 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001fac:	2201      	movs	r2, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 8164 	bne.w	8002292 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d00b      	beq.n	8001fea <HAL_GPIO_Init+0x5e>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d007      	beq.n	8001fea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fde:	2b11      	cmp	r3, #17
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b12      	cmp	r3, #18
 8001fe8:	d130      	bne.n	800204c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4013      	ands	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68da      	ldr	r2, [r3, #12]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	fa02 f303 	lsl.w	r3, r2, r3
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002020:	2201      	movs	r2, #1
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	fa02 f303 	lsl.w	r3, r2, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	4013      	ands	r3, r2
 800202e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 0201 	and.w	r2, r3, #1
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	2203      	movs	r2, #3
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4313      	orrs	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b02      	cmp	r3, #2
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x100>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b12      	cmp	r3, #18
 800208a:	d123      	bne.n	80020d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	08da      	lsrs	r2, r3, #3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	3208      	adds	r2, #8
 8002094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	220f      	movs	r2, #15
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	08da      	lsrs	r2, r3, #3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	3208      	adds	r2, #8
 80020ce:	69b9      	ldr	r1, [r7, #24]
 80020d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	2203      	movs	r2, #3
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0203 	and.w	r2, r3, #3
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80be 	beq.w	8002292 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	4b66      	ldr	r3, [pc, #408]	; (80022b0 <HAL_GPIO_Init+0x324>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	4a65      	ldr	r2, [pc, #404]	; (80022b0 <HAL_GPIO_Init+0x324>)
 800211c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002120:	6453      	str	r3, [r2, #68]	; 0x44
 8002122:	4b63      	ldr	r3, [pc, #396]	; (80022b0 <HAL_GPIO_Init+0x324>)
 8002124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800212e:	4a61      	ldr	r2, [pc, #388]	; (80022b4 <HAL_GPIO_Init+0x328>)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	089b      	lsrs	r3, r3, #2
 8002134:	3302      	adds	r3, #2
 8002136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	220f      	movs	r2, #15
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a58      	ldr	r2, [pc, #352]	; (80022b8 <HAL_GPIO_Init+0x32c>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d037      	beq.n	80021ca <HAL_GPIO_Init+0x23e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a57      	ldr	r2, [pc, #348]	; (80022bc <HAL_GPIO_Init+0x330>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d031      	beq.n	80021c6 <HAL_GPIO_Init+0x23a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a56      	ldr	r2, [pc, #344]	; (80022c0 <HAL_GPIO_Init+0x334>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d02b      	beq.n	80021c2 <HAL_GPIO_Init+0x236>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a55      	ldr	r2, [pc, #340]	; (80022c4 <HAL_GPIO_Init+0x338>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d025      	beq.n	80021be <HAL_GPIO_Init+0x232>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a54      	ldr	r2, [pc, #336]	; (80022c8 <HAL_GPIO_Init+0x33c>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d01f      	beq.n	80021ba <HAL_GPIO_Init+0x22e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a53      	ldr	r2, [pc, #332]	; (80022cc <HAL_GPIO_Init+0x340>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d019      	beq.n	80021b6 <HAL_GPIO_Init+0x22a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a52      	ldr	r2, [pc, #328]	; (80022d0 <HAL_GPIO_Init+0x344>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d013      	beq.n	80021b2 <HAL_GPIO_Init+0x226>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a51      	ldr	r2, [pc, #324]	; (80022d4 <HAL_GPIO_Init+0x348>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00d      	beq.n	80021ae <HAL_GPIO_Init+0x222>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a50      	ldr	r2, [pc, #320]	; (80022d8 <HAL_GPIO_Init+0x34c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d007      	beq.n	80021aa <HAL_GPIO_Init+0x21e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a4f      	ldr	r2, [pc, #316]	; (80022dc <HAL_GPIO_Init+0x350>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_GPIO_Init+0x21a>
 80021a2:	2309      	movs	r3, #9
 80021a4:	e012      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021a6:	230a      	movs	r3, #10
 80021a8:	e010      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021aa:	2308      	movs	r3, #8
 80021ac:	e00e      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ae:	2307      	movs	r3, #7
 80021b0:	e00c      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021b2:	2306      	movs	r3, #6
 80021b4:	e00a      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021b6:	2305      	movs	r3, #5
 80021b8:	e008      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ba:	2304      	movs	r3, #4
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021be:	2303      	movs	r3, #3
 80021c0:	e004      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021c2:	2302      	movs	r3, #2
 80021c4:	e002      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_GPIO_Init+0x240>
 80021ca:	2300      	movs	r3, #0
 80021cc:	69fa      	ldr	r2, [r7, #28]
 80021ce:	f002 0203 	and.w	r2, r2, #3
 80021d2:	0092      	lsls	r2, r2, #2
 80021d4:	4093      	lsls	r3, r2
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021dc:	4935      	ldr	r1, [pc, #212]	; (80022b4 <HAL_GPIO_Init+0x328>)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	089b      	lsrs	r3, r3, #2
 80021e2:	3302      	adds	r3, #2
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021ea:	4b3d      	ldr	r3, [pc, #244]	; (80022e0 <HAL_GPIO_Init+0x354>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220e:	4a34      	ldr	r2, [pc, #208]	; (80022e0 <HAL_GPIO_Init+0x354>)
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002214:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <HAL_GPIO_Init+0x354>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	43db      	mvns	r3, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4013      	ands	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002238:	4a29      	ldr	r2, [pc, #164]	; (80022e0 <HAL_GPIO_Init+0x354>)
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223e:	4b28      	ldr	r3, [pc, #160]	; (80022e0 <HAL_GPIO_Init+0x354>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	43db      	mvns	r3, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4013      	ands	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d003      	beq.n	8002262 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4313      	orrs	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002262:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <HAL_GPIO_Init+0x354>)
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_GPIO_Init+0x354>)
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800228c:	4a14      	ldr	r2, [pc, #80]	; (80022e0 <HAL_GPIO_Init+0x354>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b0f      	cmp	r3, #15
 800229c:	f67f ae86 	bls.w	8001fac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3724      	adds	r7, #36	; 0x24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40013800 	.word	0x40013800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400
 80022c0:	40020800 	.word	0x40020800
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40021400 	.word	0x40021400
 80022d0:	40021800 	.word	0x40021800
 80022d4:	40021c00 	.word	0x40021c00
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40022400 	.word	0x40022400
 80022e0:	40013c00 	.word	0x40013c00

080022e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	460b      	mov	r3, r1
 80022ee:	807b      	strh	r3, [r7, #2]
 80022f0:	4613      	mov	r3, r2
 80022f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022f4:	787b      	ldrb	r3, [r7, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022fa:	887a      	ldrh	r2, [r7, #2]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002300:	e003      	b.n	800230a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002302:	887b      	ldrh	r3, [r7, #2]
 8002304:	041a      	lsls	r2, r3, #16
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	619a      	str	r2, [r3, #24]
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002318:	b08f      	sub	sp, #60	; 0x3c
 800231a:	af0a      	add	r7, sp, #40	; 0x28
 800231c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d101      	bne.n	8002328 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e116      	b.n	8002556 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fc3e 	bl	8000bc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2203      	movs	r2, #3
 800234c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f001 fe1e 	bl	8003fa8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	687e      	ldr	r6, [r7, #4]
 8002374:	466d      	mov	r5, sp
 8002376:	f106 0410 	add.w	r4, r6, #16
 800237a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800237c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002382:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002386:	e885 0003 	stmia.w	r5, {r0, r1}
 800238a:	1d33      	adds	r3, r6, #4
 800238c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800238e:	6838      	ldr	r0, [r7, #0]
 8002390:	f001 fdb2 	bl	8003ef8 <USB_CoreInit>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d005      	beq.n	80023a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2202      	movs	r2, #2
 800239e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e0d7      	b.n	8002556 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f001 fe0c 	bl	8003fca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023b2:	2300      	movs	r3, #0
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e04a      	b.n	800244e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023b8:	7bfa      	ldrb	r2, [r7, #15]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	00db      	lsls	r3, r3, #3
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	333d      	adds	r3, #61	; 0x3d
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	4613      	mov	r3, r2
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	1a9b      	subs	r3, r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	333c      	adds	r3, #60	; 0x3c
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023e0:	7bfa      	ldrb	r2, [r7, #15]
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	b298      	uxth	r0, r3
 80023e6:	6879      	ldr	r1, [r7, #4]
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	1a9b      	subs	r3, r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	440b      	add	r3, r1
 80023f2:	3342      	adds	r3, #66	; 0x42
 80023f4:	4602      	mov	r2, r0
 80023f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023f8:	7bfa      	ldrb	r2, [r7, #15]
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	440b      	add	r3, r1
 8002406:	333f      	adds	r3, #63	; 0x3f
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800240c:	7bfa      	ldrb	r2, [r7, #15]
 800240e:	6879      	ldr	r1, [r7, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	00db      	lsls	r3, r3, #3
 8002414:	1a9b      	subs	r3, r3, r2
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	3344      	adds	r3, #68	; 0x44
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002420:	7bfa      	ldrb	r2, [r7, #15]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	3348      	adds	r3, #72	; 0x48
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	6879      	ldr	r1, [r7, #4]
 8002438:	4613      	mov	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	1a9b      	subs	r3, r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	3350      	adds	r3, #80	; 0x50
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	3301      	adds	r3, #1
 800244c:	73fb      	strb	r3, [r7, #15]
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d3af      	bcc.n	80023b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002458:	2300      	movs	r3, #0
 800245a:	73fb      	strb	r3, [r7, #15]
 800245c:	e044      	b.n	80024e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800245e:	7bfa      	ldrb	r2, [r7, #15]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002470:	2200      	movs	r2, #0
 8002472:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002474:	7bfa      	ldrb	r2, [r7, #15]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800248a:	7bfa      	ldrb	r2, [r7, #15]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	1a9b      	subs	r3, r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800249c:	2200      	movs	r2, #0
 800249e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80024a0:	7bfa      	ldrb	r2, [r7, #15]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	00db      	lsls	r3, r3, #3
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024b6:	7bfa      	ldrb	r2, [r7, #15]
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	1a9b      	subs	r3, r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	440b      	add	r3, r1
 80024c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024cc:	7bfa      	ldrb	r2, [r7, #15]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	3301      	adds	r3, #1
 80024e6:	73fb      	strb	r3, [r7, #15]
 80024e8:	7bfa      	ldrb	r2, [r7, #15]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d3b5      	bcc.n	800245e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	603b      	str	r3, [r7, #0]
 80024f8:	687e      	ldr	r6, [r7, #4]
 80024fa:	466d      	mov	r5, sp
 80024fc:	f106 0410 	add.w	r4, r6, #16
 8002500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002508:	e894 0003 	ldmia.w	r4, {r0, r1}
 800250c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002510:	1d33      	adds	r3, r6, #4
 8002512:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002514:	6838      	ldr	r0, [r7, #0]
 8002516:	f001 fd83 	bl	8004020 <USB_DevInit>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e014      	b.n	8002556 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002540:	2b01      	cmp	r3, #1
 8002542:	d102      	bne.n	800254a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f80b 	bl	8002560 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f001 ff35 	bl	80043be <USB_DevDisconnect>

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002560 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2201      	movs	r2, #1
 8002572:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8002590:	4313      	orrs	r3, r2
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	10000003 	.word	0x10000003

080025a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b6:	6013      	str	r3, [r2, #0]
}
 80025b8:	bf00      	nop
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40007000 	.word	0x40007000

080025c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80025d0:	2300      	movs	r3, #0
 80025d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e291      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 8087 	beq.w	80026fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025ec:	4b96      	ldr	r3, [pc, #600]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d00c      	beq.n	8002612 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f8:	4b93      	ldr	r3, [pc, #588]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f003 030c 	and.w	r3, r3, #12
 8002600:	2b08      	cmp	r3, #8
 8002602:	d112      	bne.n	800262a <HAL_RCC_OscConfig+0x62>
 8002604:	4b90      	ldr	r3, [pc, #576]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002610:	d10b      	bne.n	800262a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002612:	4b8d      	ldr	r3, [pc, #564]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d06c      	beq.n	80026f8 <HAL_RCC_OscConfig+0x130>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d168      	bne.n	80026f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e26b      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x7a>
 8002634:	4b84      	ldr	r3, [pc, #528]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a83      	ldr	r2, [pc, #524]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800263a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	e02e      	b.n	80026a0 <HAL_RCC_OscConfig+0xd8>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x9c>
 800264a:	4b7f      	ldr	r3, [pc, #508]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a7e      	ldr	r2, [pc, #504]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002650:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b7c      	ldr	r3, [pc, #496]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a7b      	ldr	r2, [pc, #492]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800265c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e01d      	b.n	80026a0 <HAL_RCC_OscConfig+0xd8>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0xc0>
 800266e:	4b76      	ldr	r3, [pc, #472]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a75      	ldr	r2, [pc, #468]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b73      	ldr	r3, [pc, #460]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a72      	ldr	r2, [pc, #456]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0xd8>
 8002688:	4b6f      	ldr	r3, [pc, #444]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a6e      	ldr	r2, [pc, #440]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800268e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b6c      	ldr	r3, [pc, #432]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a6b      	ldr	r2, [pc, #428]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800269a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fba8 	bl	8000dfc <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b0:	f7fe fba4 	bl	8000dfc <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e21f      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b61      	ldr	r3, [pc, #388]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0xe8>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d0:	f7fe fb94 	bl	8000dfc <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe fb90 	bl	8000dfc <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e20b      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	4b57      	ldr	r3, [pc, #348]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x110>
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d069      	beq.n	80027da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002706:	4b50      	ldr	r3, [pc, #320]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002712:	4b4d      	ldr	r3, [pc, #308]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b08      	cmp	r3, #8
 800271c:	d11c      	bne.n	8002758 <HAL_RCC_OscConfig+0x190>
 800271e:	4b4a      	ldr	r3, [pc, #296]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_RCC_OscConfig+0x17a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e1df      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	493d      	ldr	r1, [pc, #244]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	e040      	b.n	80027da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d023      	beq.n	80027a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002760:	4b39      	ldr	r3, [pc, #228]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a38      	ldr	r2, [pc, #224]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002766:	f043 0301 	orr.w	r3, r3, #1
 800276a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7fe fb46 	bl	8000dfc <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002774:	f7fe fb42 	bl	8000dfc <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1bd      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002786:	4b30      	ldr	r3, [pc, #192]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4929      	ldr	r1, [pc, #164]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]
 80027a6:	e018      	b.n	80027da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a8:	4b27      	ldr	r3, [pc, #156]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a26      	ldr	r2, [pc, #152]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fb22 	bl	8000dfc <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027bc:	f7fe fb1e 	bl	8000dfc <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e199      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ce:	4b1e      	ldr	r3, [pc, #120]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d038      	beq.n	8002858 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d019      	beq.n	8002822 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80027f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f2:	4a15      	ldr	r2, [pc, #84]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fa:	f7fe faff 	bl	8000dfc <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002802:	f7fe fafb 	bl	8000dfc <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e176      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x23a>
 8002820:	e01a      	b.n	8002858 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002826:	4a08      	ldr	r2, [pc, #32]	; (8002848 <HAL_RCC_OscConfig+0x280>)
 8002828:	f023 0301 	bic.w	r3, r3, #1
 800282c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282e:	f7fe fae5 	bl	8000dfc <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002836:	f7fe fae1 	bl	8000dfc <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d903      	bls.n	800284c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e15c      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
 8002848:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	4b91      	ldr	r3, [pc, #580]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1ee      	bne.n	8002836 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 80a4 	beq.w	80029ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002866:	4b8b      	ldr	r3, [pc, #556]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10d      	bne.n	800288e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	4b88      	ldr	r3, [pc, #544]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a87      	ldr	r2, [pc, #540]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
 800287e:	4b85      	ldr	r3, [pc, #532]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800288e:	4b82      	ldr	r3, [pc, #520]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800289a:	4b7f      	ldr	r3, [pc, #508]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a7e      	ldr	r2, [pc, #504]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7fe faa9 	bl	8000dfc <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7fe faa5 	bl	8000dfc <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b64      	cmp	r3, #100	; 0x64
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e120      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c0:	4b75      	ldr	r3, [pc, #468]	; (8002a98 <HAL_RCC_OscConfig+0x4d0>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x31a>
 80028d4:	4b6f      	ldr	r3, [pc, #444]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 80028d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d8:	4a6e      	ldr	r2, [pc, #440]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6713      	str	r3, [r2, #112]	; 0x70
 80028e0:	e02d      	b.n	800293e <HAL_RCC_OscConfig+0x376>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x33c>
 80028ea:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a69      	ldr	r2, [pc, #420]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
 80028f6:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a66      	ldr	r2, [pc, #408]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
 8002902:	e01c      	b.n	800293e <HAL_RCC_OscConfig+0x376>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_OscConfig+0x35e>
 800290c:	4b61      	ldr	r3, [pc, #388]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 800290e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002910:	4a60      	ldr	r2, [pc, #384]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	6713      	str	r3, [r2, #112]	; 0x70
 8002918:	4b5e      	ldr	r3, [pc, #376]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 800291a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291c:	4a5d      	ldr	r2, [pc, #372]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6713      	str	r3, [r2, #112]	; 0x70
 8002924:	e00b      	b.n	800293e <HAL_RCC_OscConfig+0x376>
 8002926:	4b5b      	ldr	r3, [pc, #364]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	4a5a      	ldr	r2, [pc, #360]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6713      	str	r3, [r2, #112]	; 0x70
 8002932:	4b58      	ldr	r3, [pc, #352]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002936:	4a57      	ldr	r2, [pc, #348]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d015      	beq.n	8002972 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7fe fa59 	bl	8000dfc <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe fa55 	bl	8000dfc <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	; 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0ce      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ee      	beq.n	800294e <HAL_RCC_OscConfig+0x386>
 8002970:	e014      	b.n	800299c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002972:	f7fe fa43 	bl	8000dfc <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002978:	e00a      	b.n	8002990 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe fa3f 	bl	8000dfc <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	f241 3288 	movw	r2, #5000	; 0x1388
 8002988:	4293      	cmp	r3, r2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e0b8      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002990:	4b40      	ldr	r3, [pc, #256]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ee      	bne.n	800297a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a2:	4b3c      	ldr	r3, [pc, #240]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	4a3b      	ldr	r2, [pc, #236]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 80029a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 80a4 	beq.w	8002b00 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b8:	4b36      	ldr	r3, [pc, #216]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d06b      	beq.n	8002a9c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d149      	bne.n	8002a60 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029cc:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a30      	ldr	r2, [pc, #192]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 80029d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7fe fa10 	bl	8000dfc <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fa0c 	bl	8000dfc <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e087      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	4b28      	ldr	r3, [pc, #160]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	3b01      	subs	r3, #1
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	061b      	lsls	r3, r3, #24
 8002a22:	4313      	orrs	r3, r2
 8002a24:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002a26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002a2a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe f9e0 	bl	8000dfc <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe f9dc 	bl	8000dfc <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e057      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x478>
 8002a5e:	e04f      	b.n	8002b00 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a60:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6c:	f7fe f9c6 	bl	8000dfc <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe f9c2 	bl	8000dfc <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e03d      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a86:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_RCC_OscConfig+0x4cc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4ac>
 8002a92:	e035      	b.n	8002b00 <HAL_RCC_OscConfig+0x538>
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <HAL_RCC_OscConfig+0x544>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d028      	beq.n	8002afc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d121      	bne.n	8002afc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d11a      	bne.n	8002afc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002acc:	4013      	ands	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ad2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d111      	bne.n	8002afc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800

08002b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	e0d0      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b28:	4b6a      	ldr	r3, [pc, #424]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d910      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b67      	ldr	r3, [pc, #412]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 020f 	bic.w	r2, r3, #15
 8002b3e:	4965      	ldr	r1, [pc, #404]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b63      	ldr	r3, [pc, #396]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b8      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	494d      	ldr	r1, [pc, #308]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d040      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d115      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e07f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd2:	4b41      	ldr	r3, [pc, #260]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e073      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002be2:	4b3d      	ldr	r3, [pc, #244]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e06b      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bf2:	4b39      	ldr	r3, [pc, #228]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4936      	ldr	r1, [pc, #216]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c04:	f7fe f8fa 	bl	8000dfc <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0c:	f7fe f8f6 	bl	8000dfc <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e053      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	4b2d      	ldr	r3, [pc, #180]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 020c 	and.w	r2, r3, #12
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1eb      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c34:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	683a      	ldr	r2, [r7, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d210      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c42:	4b24      	ldr	r3, [pc, #144]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f023 020f 	bic.w	r2, r3, #15
 8002c4a:	4922      	ldr	r1, [pc, #136]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e032      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4916      	ldr	r1, [pc, #88]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ca2:	f000 f821 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	490a      	ldr	r1, [pc, #40]	; (8002cdc <HAL_RCC_ClockConfig+0x1cc>)
 8002cb4:	5ccb      	ldrb	r3, [r1, r3]
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1d0>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_ClockConfig+0x1d4>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe f856 	bl	8000d74 <HAL_InitTick>

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023c00 	.word	0x40023c00
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	080044d8 	.word	0x080044d8
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	20000004 	.word	0x20000004

08002ce8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ce8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cec:	b084      	sub	sp, #16
 8002cee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	607b      	str	r3, [r7, #4]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60fb      	str	r3, [r7, #12]
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d00:	4b67      	ldr	r3, [pc, #412]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d00d      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x40>
 8002d0c:	2b08      	cmp	r3, #8
 8002d0e:	f200 80bd 	bhi.w	8002e8c <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x34>
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d003      	beq.n	8002d22 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d1a:	e0b7      	b.n	8002e8c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b61      	ldr	r3, [pc, #388]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d1e:	60bb      	str	r3, [r7, #8]
      break;
 8002d20:	e0b7      	b.n	8002e92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d22:	4b61      	ldr	r3, [pc, #388]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d24:	60bb      	str	r3, [r7, #8]
      break;
 8002d26:	e0b4      	b.n	8002e92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d28:	4b5d      	ldr	r3, [pc, #372]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d30:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d32:	4b5b      	ldr	r3, [pc, #364]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d04d      	beq.n	8002dda <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d3e:	4b58      	ldr	r3, [pc, #352]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	099b      	lsrs	r3, r3, #6
 8002d44:	461a      	mov	r2, r3
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d4e:	f04f 0100 	mov.w	r1, #0
 8002d52:	ea02 0800 	and.w	r8, r2, r0
 8002d56:	ea03 0901 	and.w	r9, r3, r1
 8002d5a:	4640      	mov	r0, r8
 8002d5c:	4649      	mov	r1, r9
 8002d5e:	f04f 0200 	mov.w	r2, #0
 8002d62:	f04f 0300 	mov.w	r3, #0
 8002d66:	014b      	lsls	r3, r1, #5
 8002d68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d6c:	0142      	lsls	r2, r0, #5
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	ebb0 0008 	subs.w	r0, r0, r8
 8002d76:	eb61 0109 	sbc.w	r1, r1, r9
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	018b      	lsls	r3, r1, #6
 8002d84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d88:	0182      	lsls	r2, r0, #6
 8002d8a:	1a12      	subs	r2, r2, r0
 8002d8c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d90:	f04f 0000 	mov.w	r0, #0
 8002d94:	f04f 0100 	mov.w	r1, #0
 8002d98:	00d9      	lsls	r1, r3, #3
 8002d9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d9e:	00d0      	lsls	r0, r2, #3
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	eb12 0208 	adds.w	r2, r2, r8
 8002da8:	eb43 0309 	adc.w	r3, r3, r9
 8002dac:	f04f 0000 	mov.w	r0, #0
 8002db0:	f04f 0100 	mov.w	r1, #0
 8002db4:	0259      	lsls	r1, r3, #9
 8002db6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002dba:	0250      	lsls	r0, r2, #9
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4610      	mov	r0, r2
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f04f 0300 	mov.w	r3, #0
 8002dcc:	f7fd fa1c 	bl	8000208 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e04a      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dda:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	099b      	lsrs	r3, r3, #6
 8002de0:	461a      	mov	r2, r3
 8002de2:	f04f 0300 	mov.w	r3, #0
 8002de6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002dea:	f04f 0100 	mov.w	r1, #0
 8002dee:	ea02 0400 	and.w	r4, r2, r0
 8002df2:	ea03 0501 	and.w	r5, r3, r1
 8002df6:	4620      	mov	r0, r4
 8002df8:	4629      	mov	r1, r5
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	014b      	lsls	r3, r1, #5
 8002e04:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e08:	0142      	lsls	r2, r0, #5
 8002e0a:	4610      	mov	r0, r2
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	1b00      	subs	r0, r0, r4
 8002e10:	eb61 0105 	sbc.w	r1, r1, r5
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	018b      	lsls	r3, r1, #6
 8002e1e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e22:	0182      	lsls	r2, r0, #6
 8002e24:	1a12      	subs	r2, r2, r0
 8002e26:	eb63 0301 	sbc.w	r3, r3, r1
 8002e2a:	f04f 0000 	mov.w	r0, #0
 8002e2e:	f04f 0100 	mov.w	r1, #0
 8002e32:	00d9      	lsls	r1, r3, #3
 8002e34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e38:	00d0      	lsls	r0, r2, #3
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	1912      	adds	r2, r2, r4
 8002e40:	eb45 0303 	adc.w	r3, r5, r3
 8002e44:	f04f 0000 	mov.w	r0, #0
 8002e48:	f04f 0100 	mov.w	r1, #0
 8002e4c:	0299      	lsls	r1, r3, #10
 8002e4e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e52:	0290      	lsls	r0, r2, #10
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4610      	mov	r0, r2
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	f04f 0300 	mov.w	r3, #0
 8002e64:	f7fd f9d0 	bl	8000208 <__aeabi_uldivmod>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e70:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	0c1b      	lsrs	r3, r3, #16
 8002e76:	f003 0303 	and.w	r3, r3, #3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002e80:	68fa      	ldr	r2, [r7, #12]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e88:	60bb      	str	r3, [r7, #8]
      break;
 8002e8a:	e002      	b.n	8002e92 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e8c:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e8e:	60bb      	str	r3, [r7, #8]
      break;
 8002e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e92:	68bb      	ldr	r3, [r7, #8]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	00f42400 	.word	0x00f42400
 8002ea8:	007a1200 	.word	0x007a1200

08002eac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000000 	.word	0x20000000

08002ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ec8:	f7ff fff0 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	4b05      	ldr	r3, [pc, #20]	; (8002ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	0a9b      	lsrs	r3, r3, #10
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	4903      	ldr	r1, [pc, #12]	; (8002ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002eda:	5ccb      	ldrb	r3, [r1, r3]
 8002edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	080044e8 	.word	0x080044e8

08002eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ef0:	f7ff ffdc 	bl	8002eac <HAL_RCC_GetHCLKFreq>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	4b05      	ldr	r3, [pc, #20]	; (8002f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	0b5b      	lsrs	r3, r3, #13
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	4903      	ldr	r1, [pc, #12]	; (8002f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f02:	5ccb      	ldrb	r3, [r1, r3]
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	080044e8 	.word	0x080044e8

08002f14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f20:	2300      	movs	r3, #0
 8002f22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f24:	2300      	movs	r3, #0
 8002f26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d012      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f3c:	4b69      	ldr	r3, [pc, #420]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	4a68      	ldr	r2, [pc, #416]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f46:	6093      	str	r3, [r2, #8]
 8002f48:	4b66      	ldr	r3, [pc, #408]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f50:	4964      	ldr	r1, [pc, #400]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d017      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f6e:	4b5d      	ldr	r3, [pc, #372]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7c:	4959      	ldr	r1, [pc, #356]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d017      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002faa:	4b4e      	ldr	r3, [pc, #312]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	494a      	ldr	r1, [pc, #296]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fc8:	d101      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 808b 	beq.w	800310e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ff8:	4b3a      	ldr	r3, [pc, #232]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	4a39      	ldr	r2, [pc, #228]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003002:	6413      	str	r3, [r2, #64]	; 0x40
 8003004:	4b37      	ldr	r3, [pc, #220]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003010:	4b35      	ldr	r3, [pc, #212]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a34      	ldr	r2, [pc, #208]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800301a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301c:	f7fd feee 	bl	8000dfc <HAL_GetTick>
 8003020:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003024:	f7fd feea 	bl	8000dfc <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	; 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e357      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003036:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003042:	4b28      	ldr	r3, [pc, #160]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d035      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	429a      	cmp	r2, r3
 800305e:	d02e      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003060:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003064:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003068:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800306a:	4b1e      	ldr	r3, [pc, #120]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306e:	4a1d      	ldr	r2, [pc, #116]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003074:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003076:	4b1b      	ldr	r3, [pc, #108]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307a:	4a1a      	ldr	r2, [pc, #104]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800307c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003080:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003082:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003088:	4b16      	ldr	r3, [pc, #88]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800308a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800308c:	f003 0301 	and.w	r3, r3, #1
 8003090:	2b01      	cmp	r3, #1
 8003092:	d114      	bne.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fd feb2 	bl	8000dfc <HAL_GetTick>
 8003098:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800309a:	e00a      	b.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800309c:	f7fd feae 	bl	8000dfc <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e319      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b2:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d0ee      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ca:	d111      	bne.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030da:	400b      	ands	r3, r1
 80030dc:	4901      	ldr	r1, [pc, #4]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
 80030e2:	e00b      	b.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40007000 	.word	0x40007000
 80030ec:	0ffffcff 	.word	0x0ffffcff
 80030f0:	4bb1      	ldr	r3, [pc, #708]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	4ab0      	ldr	r2, [pc, #704]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030fa:	6093      	str	r3, [r2, #8]
 80030fc:	4bae      	ldr	r3, [pc, #696]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80030fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003108:	49ab      	ldr	r1, [pc, #684]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800310a:	4313      	orrs	r3, r2
 800310c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d010      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800311a:	4ba7      	ldr	r3, [pc, #668]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800311c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003120:	4aa5      	ldr	r2, [pc, #660]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003122:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003126:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800312a:	4ba3      	ldr	r3, [pc, #652]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800312c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	49a0      	ldr	r1, [pc, #640]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003136:	4313      	orrs	r3, r2
 8003138:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00a      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003148:	4b9b      	ldr	r3, [pc, #620]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003156:	4998      	ldr	r1, [pc, #608]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800316a:	4b93      	ldr	r3, [pc, #588]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003170:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003178:	498f      	ldr	r1, [pc, #572]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800317a:	4313      	orrs	r3, r2
 800317c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00a      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800318c:	4b8a      	ldr	r3, [pc, #552]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800318e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003192:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800319a:	4987      	ldr	r1, [pc, #540]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00a      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031ae:	4b82      	ldr	r3, [pc, #520]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031bc:	497e      	ldr	r1, [pc, #504]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031d0:	4b79      	ldr	r3, [pc, #484]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d6:	f023 0203 	bic.w	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	4976      	ldr	r1, [pc, #472]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031f2:	4b71      	ldr	r3, [pc, #452]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f023 020c 	bic.w	r2, r3, #12
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003200:	496d      	ldr	r1, [pc, #436]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00a      	beq.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003214:	4b68      	ldr	r3, [pc, #416]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003222:	4965      	ldr	r1, [pc, #404]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003224:	4313      	orrs	r3, r2
 8003226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003236:	4b60      	ldr	r3, [pc, #384]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003244:	495c      	ldr	r1, [pc, #368]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00a      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003258:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003266:	4954      	ldr	r1, [pc, #336]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003268:	4313      	orrs	r3, r2
 800326a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800327a:	4b4f      	ldr	r3, [pc, #316]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800327c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003280:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003288:	494b      	ldr	r1, [pc, #300]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800328a:	4313      	orrs	r3, r2
 800328c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800329c:	4b46      	ldr	r3, [pc, #280]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800329e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	4943      	ldr	r1, [pc, #268]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032be:	4b3e      	ldr	r3, [pc, #248]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032cc:	493a      	ldr	r1, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032e0:	4b35      	ldr	r3, [pc, #212]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032ee:	4932      	ldr	r1, [pc, #200]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d011      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003302:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003308:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003310:	4929      	ldr	r1, [pc, #164]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800331c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003320:	d101      	bne.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003322:	2301      	movs	r3, #1
 8003324:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003332:	2301      	movs	r3, #1
 8003334:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d00a      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003342:	4b1d      	ldr	r3, [pc, #116]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003348:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003350:	4919      	ldr	r1, [pc, #100]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00b      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003364:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800336a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003374:	4910      	ldr	r1, [pc, #64]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003376:	4313      	orrs	r3, r2
 8003378:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d006      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 80d9 	beq.w	8003542 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003390:	4b09      	ldr	r3, [pc, #36]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a08      	ldr	r2, [pc, #32]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003396:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800339a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800339c:	f7fd fd2e 	bl	8000dfc <HAL_GetTick>
 80033a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033a2:	e00b      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033a4:	f7fd fd2a 	bl	8000dfc <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d904      	bls.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e197      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80033b6:	bf00      	nop
 80033b8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033bc:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1ed      	bne.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d021      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d11d      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033dc:	4b64      	ldr	r3, [pc, #400]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e2:	0c1b      	lsrs	r3, r3, #16
 80033e4:	f003 0303 	and.w	r3, r3, #3
 80033e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033ea:	4b61      	ldr	r3, [pc, #388]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80033ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f0:	0e1b      	lsrs	r3, r3, #24
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	019a      	lsls	r2, r3, #6
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	431a      	orrs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	061b      	lsls	r3, r3, #24
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	071b      	lsls	r3, r3, #28
 8003410:	4957      	ldr	r1, [pc, #348]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003412:	4313      	orrs	r3, r2
 8003414:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d004      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800342c:	d00a      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003436:	2b00      	cmp	r3, #0
 8003438:	d02e      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003442:	d129      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003444:	4b4a      	ldr	r3, [pc, #296]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800344a:	0c1b      	lsrs	r3, r3, #16
 800344c:	f003 0303 	and.w	r3, r3, #3
 8003450:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003452:	4b47      	ldr	r3, [pc, #284]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003458:	0f1b      	lsrs	r3, r3, #28
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	019a      	lsls	r2, r3, #6
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	041b      	lsls	r3, r3, #16
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	061b      	lsls	r3, r3, #24
 8003472:	431a      	orrs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	071b      	lsls	r3, r3, #28
 8003478:	493d      	ldr	r1, [pc, #244]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003480:	4b3b      	ldr	r3, [pc, #236]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003486:	f023 021f 	bic.w	r2, r3, #31
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	3b01      	subs	r3, #1
 8003490:	4937      	ldr	r1, [pc, #220]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003492:	4313      	orrs	r3, r2
 8003494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d01d      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034a4:	4b32      	ldr	r3, [pc, #200]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034aa:	0e1b      	lsrs	r3, r3, #24
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034b2:	4b2f      	ldr	r3, [pc, #188]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034b8:	0f1b      	lsrs	r3, r3, #28
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	019a      	lsls	r2, r3, #6
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	041b      	lsls	r3, r3, #16
 80034cc:	431a      	orrs	r2, r3
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	061b      	lsls	r3, r3, #24
 80034d2:	431a      	orrs	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	071b      	lsls	r3, r3, #28
 80034d8:	4925      	ldr	r1, [pc, #148]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d011      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	019a      	lsls	r2, r3, #6
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	041b      	lsls	r3, r3, #16
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	061b      	lsls	r3, r3, #24
 8003500:	431a      	orrs	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	071b      	lsls	r3, r3, #28
 8003508:	4919      	ldr	r1, [pc, #100]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003510:	4b17      	ldr	r3, [pc, #92]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a16      	ldr	r2, [pc, #88]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003516:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800351a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800351c:	f7fd fc6e 	bl	8000dfc <HAL_GetTick>
 8003520:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003524:	f7fd fc6a 	bl	8000dfc <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b64      	cmp	r3, #100	; 0x64
 8003530:	d901      	bls.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e0d7      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003536:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	f040 80cd 	bne.w	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003556:	f7fd fc51 	bl	8000dfc <HAL_GetTick>
 800355a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800355e:	f7fd fc4d 	bl	8000dfc <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	2b64      	cmp	r3, #100	; 0x64
 800356a:	d903      	bls.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e0ba      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003570:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003574:	4b5e      	ldr	r3, [pc, #376]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800357c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003580:	d0ed      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003592:	2b00      	cmp	r3, #0
 8003594:	d009      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d02e      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d12a      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035aa:	4b51      	ldr	r3, [pc, #324]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035b8:	4b4d      	ldr	r3, [pc, #308]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035be:	0f1b      	lsrs	r3, r3, #28
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	019a      	lsls	r2, r3, #6
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	041b      	lsls	r3, r3, #16
 80035d0:	431a      	orrs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	061b      	lsls	r3, r3, #24
 80035d8:	431a      	orrs	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	071b      	lsls	r3, r3, #28
 80035de:	4944      	ldr	r1, [pc, #272]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035e6:	4b42      	ldr	r3, [pc, #264]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	3b01      	subs	r3, #1
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	493d      	ldr	r1, [pc, #244]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d022      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003614:	d11d      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003616:	4b36      	ldr	r3, [pc, #216]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003618:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361c:	0e1b      	lsrs	r3, r3, #24
 800361e:	f003 030f 	and.w	r3, r3, #15
 8003622:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003624:	4b32      	ldr	r3, [pc, #200]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	0f1b      	lsrs	r3, r3, #28
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	019a      	lsls	r2, r3, #6
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	041b      	lsls	r3, r3, #16
 800363e:	431a      	orrs	r2, r3
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	061b      	lsls	r3, r3, #24
 8003644:	431a      	orrs	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	071b      	lsls	r3, r3, #28
 800364a:	4929      	ldr	r1, [pc, #164]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d028      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800365e:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003664:	0e1b      	lsrs	r3, r3, #24
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800366c:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800366e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003672:	0c1b      	lsrs	r3, r3, #16
 8003674:	f003 0303 	and.w	r3, r3, #3
 8003678:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	019a      	lsls	r2, r3, #6
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	041b      	lsls	r3, r3, #16
 8003684:	431a      	orrs	r2, r3
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	061b      	lsls	r3, r3, #24
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	071b      	lsls	r3, r3, #28
 8003692:	4917      	ldr	r1, [pc, #92]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800369c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4911      	ldr	r1, [pc, #68]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80036b0:	4b0f      	ldr	r3, [pc, #60]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a0e      	ldr	r2, [pc, #56]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036bc:	f7fd fb9e 	bl	8000dfc <HAL_GetTick>
 80036c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80036c4:	f7fd fb9a 	bl	8000dfc <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e007      	b.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80036d6:	4b06      	ldr	r3, [pc, #24]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e2:	d1ef      	bne.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3720      	adds	r7, #32
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023800 	.word	0x40023800

080036f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e040      	b.n	8003788 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800370a:	2b00      	cmp	r3, #0
 800370c:	d106      	bne.n	800371c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f7fd fa10 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2224      	movs	r2, #36	; 0x24
 8003720:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 f82c 	bl	8003790 <UART_SetConfig>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e022      	b.n	8003788 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fa82 	bl	8003c54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685a      	ldr	r2, [r3, #4]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800375e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800376e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 fb09 	bl	8003d98 <UART_CheckIdleState>
 8003786:	4603      	mov	r3, r0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3708      	adds	r7, #8
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003798:	2300      	movs	r3, #0
 800379a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	431a      	orrs	r2, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	4ba7      	ldr	r3, [pc, #668]	; (8003a58 <UART_SetConfig+0x2c8>)
 80037bc:	4013      	ands	r3, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	6979      	ldr	r1, [r7, #20]
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	430a      	orrs	r2, r1
 8003800:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a95      	ldr	r2, [pc, #596]	; (8003a5c <UART_SetConfig+0x2cc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d120      	bne.n	800384e <UART_SetConfig+0xbe>
 800380c:	4b94      	ldr	r3, [pc, #592]	; (8003a60 <UART_SetConfig+0x2d0>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b03      	cmp	r3, #3
 8003818:	d816      	bhi.n	8003848 <UART_SetConfig+0xb8>
 800381a:	a201      	add	r2, pc, #4	; (adr r2, 8003820 <UART_SetConfig+0x90>)
 800381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003820:	08003831 	.word	0x08003831
 8003824:	0800383d 	.word	0x0800383d
 8003828:	08003837 	.word	0x08003837
 800382c:	08003843 	.word	0x08003843
 8003830:	2301      	movs	r3, #1
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e14f      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003836:	2302      	movs	r3, #2
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e14c      	b.n	8003ad6 <UART_SetConfig+0x346>
 800383c:	2304      	movs	r3, #4
 800383e:	77fb      	strb	r3, [r7, #31]
 8003840:	e149      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003842:	2308      	movs	r3, #8
 8003844:	77fb      	strb	r3, [r7, #31]
 8003846:	e146      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003848:	2310      	movs	r3, #16
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e143      	b.n	8003ad6 <UART_SetConfig+0x346>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a84      	ldr	r2, [pc, #528]	; (8003a64 <UART_SetConfig+0x2d4>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d132      	bne.n	80038be <UART_SetConfig+0x12e>
 8003858:	4b81      	ldr	r3, [pc, #516]	; (8003a60 <UART_SetConfig+0x2d0>)
 800385a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800385e:	f003 030c 	and.w	r3, r3, #12
 8003862:	2b0c      	cmp	r3, #12
 8003864:	d828      	bhi.n	80038b8 <UART_SetConfig+0x128>
 8003866:	a201      	add	r2, pc, #4	; (adr r2, 800386c <UART_SetConfig+0xdc>)
 8003868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386c:	080038a1 	.word	0x080038a1
 8003870:	080038b9 	.word	0x080038b9
 8003874:	080038b9 	.word	0x080038b9
 8003878:	080038b9 	.word	0x080038b9
 800387c:	080038ad 	.word	0x080038ad
 8003880:	080038b9 	.word	0x080038b9
 8003884:	080038b9 	.word	0x080038b9
 8003888:	080038b9 	.word	0x080038b9
 800388c:	080038a7 	.word	0x080038a7
 8003890:	080038b9 	.word	0x080038b9
 8003894:	080038b9 	.word	0x080038b9
 8003898:	080038b9 	.word	0x080038b9
 800389c:	080038b3 	.word	0x080038b3
 80038a0:	2300      	movs	r3, #0
 80038a2:	77fb      	strb	r3, [r7, #31]
 80038a4:	e117      	b.n	8003ad6 <UART_SetConfig+0x346>
 80038a6:	2302      	movs	r3, #2
 80038a8:	77fb      	strb	r3, [r7, #31]
 80038aa:	e114      	b.n	8003ad6 <UART_SetConfig+0x346>
 80038ac:	2304      	movs	r3, #4
 80038ae:	77fb      	strb	r3, [r7, #31]
 80038b0:	e111      	b.n	8003ad6 <UART_SetConfig+0x346>
 80038b2:	2308      	movs	r3, #8
 80038b4:	77fb      	strb	r3, [r7, #31]
 80038b6:	e10e      	b.n	8003ad6 <UART_SetConfig+0x346>
 80038b8:	2310      	movs	r3, #16
 80038ba:	77fb      	strb	r3, [r7, #31]
 80038bc:	e10b      	b.n	8003ad6 <UART_SetConfig+0x346>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a69      	ldr	r2, [pc, #420]	; (8003a68 <UART_SetConfig+0x2d8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d120      	bne.n	800390a <UART_SetConfig+0x17a>
 80038c8:	4b65      	ldr	r3, [pc, #404]	; (8003a60 <UART_SetConfig+0x2d0>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038d2:	2b30      	cmp	r3, #48	; 0x30
 80038d4:	d013      	beq.n	80038fe <UART_SetConfig+0x16e>
 80038d6:	2b30      	cmp	r3, #48	; 0x30
 80038d8:	d814      	bhi.n	8003904 <UART_SetConfig+0x174>
 80038da:	2b20      	cmp	r3, #32
 80038dc:	d009      	beq.n	80038f2 <UART_SetConfig+0x162>
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d810      	bhi.n	8003904 <UART_SetConfig+0x174>
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <UART_SetConfig+0x15c>
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d006      	beq.n	80038f8 <UART_SetConfig+0x168>
 80038ea:	e00b      	b.n	8003904 <UART_SetConfig+0x174>
 80038ec:	2300      	movs	r3, #0
 80038ee:	77fb      	strb	r3, [r7, #31]
 80038f0:	e0f1      	b.n	8003ad6 <UART_SetConfig+0x346>
 80038f2:	2302      	movs	r3, #2
 80038f4:	77fb      	strb	r3, [r7, #31]
 80038f6:	e0ee      	b.n	8003ad6 <UART_SetConfig+0x346>
 80038f8:	2304      	movs	r3, #4
 80038fa:	77fb      	strb	r3, [r7, #31]
 80038fc:	e0eb      	b.n	8003ad6 <UART_SetConfig+0x346>
 80038fe:	2308      	movs	r3, #8
 8003900:	77fb      	strb	r3, [r7, #31]
 8003902:	e0e8      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003904:	2310      	movs	r3, #16
 8003906:	77fb      	strb	r3, [r7, #31]
 8003908:	e0e5      	b.n	8003ad6 <UART_SetConfig+0x346>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a57      	ldr	r2, [pc, #348]	; (8003a6c <UART_SetConfig+0x2dc>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d120      	bne.n	8003956 <UART_SetConfig+0x1c6>
 8003914:	4b52      	ldr	r3, [pc, #328]	; (8003a60 <UART_SetConfig+0x2d0>)
 8003916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800391e:	2bc0      	cmp	r3, #192	; 0xc0
 8003920:	d013      	beq.n	800394a <UART_SetConfig+0x1ba>
 8003922:	2bc0      	cmp	r3, #192	; 0xc0
 8003924:	d814      	bhi.n	8003950 <UART_SetConfig+0x1c0>
 8003926:	2b80      	cmp	r3, #128	; 0x80
 8003928:	d009      	beq.n	800393e <UART_SetConfig+0x1ae>
 800392a:	2b80      	cmp	r3, #128	; 0x80
 800392c:	d810      	bhi.n	8003950 <UART_SetConfig+0x1c0>
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <UART_SetConfig+0x1a8>
 8003932:	2b40      	cmp	r3, #64	; 0x40
 8003934:	d006      	beq.n	8003944 <UART_SetConfig+0x1b4>
 8003936:	e00b      	b.n	8003950 <UART_SetConfig+0x1c0>
 8003938:	2300      	movs	r3, #0
 800393a:	77fb      	strb	r3, [r7, #31]
 800393c:	e0cb      	b.n	8003ad6 <UART_SetConfig+0x346>
 800393e:	2302      	movs	r3, #2
 8003940:	77fb      	strb	r3, [r7, #31]
 8003942:	e0c8      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003944:	2304      	movs	r3, #4
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e0c5      	b.n	8003ad6 <UART_SetConfig+0x346>
 800394a:	2308      	movs	r3, #8
 800394c:	77fb      	strb	r3, [r7, #31]
 800394e:	e0c2      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003950:	2310      	movs	r3, #16
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e0bf      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a45      	ldr	r2, [pc, #276]	; (8003a70 <UART_SetConfig+0x2e0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d125      	bne.n	80039ac <UART_SetConfig+0x21c>
 8003960:	4b3f      	ldr	r3, [pc, #252]	; (8003a60 <UART_SetConfig+0x2d0>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800396a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800396e:	d017      	beq.n	80039a0 <UART_SetConfig+0x210>
 8003970:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003974:	d817      	bhi.n	80039a6 <UART_SetConfig+0x216>
 8003976:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800397a:	d00b      	beq.n	8003994 <UART_SetConfig+0x204>
 800397c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003980:	d811      	bhi.n	80039a6 <UART_SetConfig+0x216>
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <UART_SetConfig+0x1fe>
 8003986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800398a:	d006      	beq.n	800399a <UART_SetConfig+0x20a>
 800398c:	e00b      	b.n	80039a6 <UART_SetConfig+0x216>
 800398e:	2300      	movs	r3, #0
 8003990:	77fb      	strb	r3, [r7, #31]
 8003992:	e0a0      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003994:	2302      	movs	r3, #2
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e09d      	b.n	8003ad6 <UART_SetConfig+0x346>
 800399a:	2304      	movs	r3, #4
 800399c:	77fb      	strb	r3, [r7, #31]
 800399e:	e09a      	b.n	8003ad6 <UART_SetConfig+0x346>
 80039a0:	2308      	movs	r3, #8
 80039a2:	77fb      	strb	r3, [r7, #31]
 80039a4:	e097      	b.n	8003ad6 <UART_SetConfig+0x346>
 80039a6:	2310      	movs	r3, #16
 80039a8:	77fb      	strb	r3, [r7, #31]
 80039aa:	e094      	b.n	8003ad6 <UART_SetConfig+0x346>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a30      	ldr	r2, [pc, #192]	; (8003a74 <UART_SetConfig+0x2e4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d125      	bne.n	8003a02 <UART_SetConfig+0x272>
 80039b6:	4b2a      	ldr	r3, [pc, #168]	; (8003a60 <UART_SetConfig+0x2d0>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039c4:	d017      	beq.n	80039f6 <UART_SetConfig+0x266>
 80039c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039ca:	d817      	bhi.n	80039fc <UART_SetConfig+0x26c>
 80039cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d0:	d00b      	beq.n	80039ea <UART_SetConfig+0x25a>
 80039d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d6:	d811      	bhi.n	80039fc <UART_SetConfig+0x26c>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <UART_SetConfig+0x254>
 80039dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e0:	d006      	beq.n	80039f0 <UART_SetConfig+0x260>
 80039e2:	e00b      	b.n	80039fc <UART_SetConfig+0x26c>
 80039e4:	2301      	movs	r3, #1
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e075      	b.n	8003ad6 <UART_SetConfig+0x346>
 80039ea:	2302      	movs	r3, #2
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e072      	b.n	8003ad6 <UART_SetConfig+0x346>
 80039f0:	2304      	movs	r3, #4
 80039f2:	77fb      	strb	r3, [r7, #31]
 80039f4:	e06f      	b.n	8003ad6 <UART_SetConfig+0x346>
 80039f6:	2308      	movs	r3, #8
 80039f8:	77fb      	strb	r3, [r7, #31]
 80039fa:	e06c      	b.n	8003ad6 <UART_SetConfig+0x346>
 80039fc:	2310      	movs	r3, #16
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e069      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1c      	ldr	r2, [pc, #112]	; (8003a78 <UART_SetConfig+0x2e8>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d137      	bne.n	8003a7c <UART_SetConfig+0x2ec>
 8003a0c:	4b14      	ldr	r3, [pc, #80]	; (8003a60 <UART_SetConfig+0x2d0>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a16:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a1a:	d017      	beq.n	8003a4c <UART_SetConfig+0x2bc>
 8003a1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a20:	d817      	bhi.n	8003a52 <UART_SetConfig+0x2c2>
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a26:	d00b      	beq.n	8003a40 <UART_SetConfig+0x2b0>
 8003a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a2c:	d811      	bhi.n	8003a52 <UART_SetConfig+0x2c2>
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <UART_SetConfig+0x2aa>
 8003a32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a36:	d006      	beq.n	8003a46 <UART_SetConfig+0x2b6>
 8003a38:	e00b      	b.n	8003a52 <UART_SetConfig+0x2c2>
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	77fb      	strb	r3, [r7, #31]
 8003a3e:	e04a      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003a40:	2302      	movs	r3, #2
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e047      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003a46:	2304      	movs	r3, #4
 8003a48:	77fb      	strb	r3, [r7, #31]
 8003a4a:	e044      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003a4c:	2308      	movs	r3, #8
 8003a4e:	77fb      	strb	r3, [r7, #31]
 8003a50:	e041      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003a52:	2310      	movs	r3, #16
 8003a54:	77fb      	strb	r3, [r7, #31]
 8003a56:	e03e      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003a58:	efff69f3 	.word	0xefff69f3
 8003a5c:	40011000 	.word	0x40011000
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40004400 	.word	0x40004400
 8003a68:	40004800 	.word	0x40004800
 8003a6c:	40004c00 	.word	0x40004c00
 8003a70:	40005000 	.word	0x40005000
 8003a74:	40011400 	.word	0x40011400
 8003a78:	40007800 	.word	0x40007800
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a71      	ldr	r2, [pc, #452]	; (8003c48 <UART_SetConfig+0x4b8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d125      	bne.n	8003ad2 <UART_SetConfig+0x342>
 8003a86:	4b71      	ldr	r3, [pc, #452]	; (8003c4c <UART_SetConfig+0x4bc>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a94:	d017      	beq.n	8003ac6 <UART_SetConfig+0x336>
 8003a96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003a9a:	d817      	bhi.n	8003acc <UART_SetConfig+0x33c>
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa0:	d00b      	beq.n	8003aba <UART_SetConfig+0x32a>
 8003aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa6:	d811      	bhi.n	8003acc <UART_SetConfig+0x33c>
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d003      	beq.n	8003ab4 <UART_SetConfig+0x324>
 8003aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ab0:	d006      	beq.n	8003ac0 <UART_SetConfig+0x330>
 8003ab2:	e00b      	b.n	8003acc <UART_SetConfig+0x33c>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	77fb      	strb	r3, [r7, #31]
 8003ab8:	e00d      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003aba:	2302      	movs	r3, #2
 8003abc:	77fb      	strb	r3, [r7, #31]
 8003abe:	e00a      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	77fb      	strb	r3, [r7, #31]
 8003ac4:	e007      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	77fb      	strb	r3, [r7, #31]
 8003aca:	e004      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003acc:	2310      	movs	r3, #16
 8003ace:	77fb      	strb	r3, [r7, #31]
 8003ad0:	e001      	b.n	8003ad6 <UART_SetConfig+0x346>
 8003ad2:	2310      	movs	r3, #16
 8003ad4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ade:	d15b      	bne.n	8003b98 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003ae0:	7ffb      	ldrb	r3, [r7, #31]
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d827      	bhi.n	8003b36 <UART_SetConfig+0x3a6>
 8003ae6:	a201      	add	r2, pc, #4	; (adr r2, 8003aec <UART_SetConfig+0x35c>)
 8003ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aec:	08003b11 	.word	0x08003b11
 8003af0:	08003b19 	.word	0x08003b19
 8003af4:	08003b21 	.word	0x08003b21
 8003af8:	08003b37 	.word	0x08003b37
 8003afc:	08003b27 	.word	0x08003b27
 8003b00:	08003b37 	.word	0x08003b37
 8003b04:	08003b37 	.word	0x08003b37
 8003b08:	08003b37 	.word	0x08003b37
 8003b0c:	08003b2f 	.word	0x08003b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b10:	f7ff f9d8 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8003b14:	61b8      	str	r0, [r7, #24]
        break;
 8003b16:	e013      	b.n	8003b40 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b18:	f7ff f9e8 	bl	8002eec <HAL_RCC_GetPCLK2Freq>
 8003b1c:	61b8      	str	r0, [r7, #24]
        break;
 8003b1e:	e00f      	b.n	8003b40 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b20:	4b4b      	ldr	r3, [pc, #300]	; (8003c50 <UART_SetConfig+0x4c0>)
 8003b22:	61bb      	str	r3, [r7, #24]
        break;
 8003b24:	e00c      	b.n	8003b40 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b26:	f7ff f8df 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8003b2a:	61b8      	str	r0, [r7, #24]
        break;
 8003b2c:	e008      	b.n	8003b40 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b32:	61bb      	str	r3, [r7, #24]
        break;
 8003b34:	e004      	b.n	8003b40 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	77bb      	strb	r3, [r7, #30]
        break;
 8003b3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d074      	beq.n	8003c30 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	005a      	lsls	r2, r3, #1
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	441a      	add	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b0f      	cmp	r3, #15
 8003b62:	d916      	bls.n	8003b92 <UART_SetConfig+0x402>
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b6a:	d212      	bcs.n	8003b92 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f023 030f 	bic.w	r3, r3, #15
 8003b74:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	085b      	lsrs	r3, r3, #1
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	89fb      	ldrh	r3, [r7, #14]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	89fa      	ldrh	r2, [r7, #14]
 8003b8e:	60da      	str	r2, [r3, #12]
 8003b90:	e04e      	b.n	8003c30 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	77bb      	strb	r3, [r7, #30]
 8003b96:	e04b      	b.n	8003c30 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003b98:	7ffb      	ldrb	r3, [r7, #31]
 8003b9a:	2b08      	cmp	r3, #8
 8003b9c:	d827      	bhi.n	8003bee <UART_SetConfig+0x45e>
 8003b9e:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <UART_SetConfig+0x414>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bc9 	.word	0x08003bc9
 8003ba8:	08003bd1 	.word	0x08003bd1
 8003bac:	08003bd9 	.word	0x08003bd9
 8003bb0:	08003bef 	.word	0x08003bef
 8003bb4:	08003bdf 	.word	0x08003bdf
 8003bb8:	08003bef 	.word	0x08003bef
 8003bbc:	08003bef 	.word	0x08003bef
 8003bc0:	08003bef 	.word	0x08003bef
 8003bc4:	08003be7 	.word	0x08003be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bc8:	f7ff f97c 	bl	8002ec4 <HAL_RCC_GetPCLK1Freq>
 8003bcc:	61b8      	str	r0, [r7, #24]
        break;
 8003bce:	e013      	b.n	8003bf8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd0:	f7ff f98c 	bl	8002eec <HAL_RCC_GetPCLK2Freq>
 8003bd4:	61b8      	str	r0, [r7, #24]
        break;
 8003bd6:	e00f      	b.n	8003bf8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <UART_SetConfig+0x4c0>)
 8003bda:	61bb      	str	r3, [r7, #24]
        break;
 8003bdc:	e00c      	b.n	8003bf8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bde:	f7ff f883 	bl	8002ce8 <HAL_RCC_GetSysClockFreq>
 8003be2:	61b8      	str	r0, [r7, #24]
        break;
 8003be4:	e008      	b.n	8003bf8 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bea:	61bb      	str	r3, [r7, #24]
        break;
 8003bec:	e004      	b.n	8003bf8 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	77bb      	strb	r3, [r7, #30]
        break;
 8003bf6:	bf00      	nop
    }

    if (pclk != 0U)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d018      	beq.n	8003c30 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	085a      	lsrs	r2, r3, #1
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	441a      	add	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	2b0f      	cmp	r3, #15
 8003c18:	d908      	bls.n	8003c2c <UART_SetConfig+0x49c>
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c20:	d204      	bcs.n	8003c2c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	60da      	str	r2, [r3, #12]
 8003c2a:	e001      	b.n	8003c30 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003c3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40007c00 	.word	0x40007c00
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	00f42400 	.word	0x00f42400

08003c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	430a      	orrs	r2, r1
 8003d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01a      	beq.n	8003d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d52:	d10a      	bne.n	8003d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	605a      	str	r2, [r3, #4]
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003da8:	f7fd f828 	bl	8000dfc <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d10e      	bne.n	8003dda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f817 	bl	8003dfe <UART_WaitOnFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e00d      	b.n	8003df6 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2220      	movs	r2, #32
 8003de4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e0e:	e05e      	b.n	8003ece <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e16:	d05a      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e18:	f7fc fff0 	bl	8000dfc <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d302      	bcc.n	8003e2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d11b      	bne.n	8003e66 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e3c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689a      	ldr	r2, [r3, #8]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f022 0201 	bic.w	r2, r2, #1
 8003e4c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e043      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d02c      	beq.n	8003ece <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e82:	d124      	bne.n	8003ece <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e8c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e9c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689a      	ldr	r2, [r3, #8]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2220      	movs	r2, #32
 8003eb8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e00f      	b.n	8003eee <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	bf0c      	ite	eq
 8003ede:	2301      	moveq	r3, #1
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d091      	beq.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eec:	2300      	movs	r3, #0
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ef8:	b084      	sub	sp, #16
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
 8003f02:	f107 001c 	add.w	r0, r7, #28
 8003f06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d120      	bne.n	8003f52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	4b20      	ldr	r3, [pc, #128]	; (8003fa4 <USB_CoreInit+0xac>)
 8003f22:	4013      	ands	r3, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d105      	bne.n	8003f46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fa5a 	bl	8004400 <USB_CoreReset>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	73fb      	strb	r3, [r7, #15]
 8003f50:	e010      	b.n	8003f74 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa4e 	bl	8004400 <USB_CoreReset>
 8003f64:	4603      	mov	r3, r0
 8003f66:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d10b      	bne.n	8003f92 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f043 0206 	orr.w	r2, r3, #6
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f043 0220 	orr.w	r2, r3, #32
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f9e:	b004      	add	sp, #16
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	ffbdffbf 	.word	0xffbdffbf

08003fa8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f023 0201 	bic.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fe2:	78fb      	ldrb	r3, [r7, #3]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d106      	bne.n	8003ff6 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	60da      	str	r2, [r3, #12]
 8003ff4:	e00b      	b.n	800400e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d106      	bne.n	800400a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]
 8004008:	e001      	b.n	800400e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e003      	b.n	8004016 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800400e:	2032      	movs	r0, #50	; 0x32
 8004010:	f7fc ff00 	bl	8000e14 <HAL_Delay>

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
	...

08004020 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004020:	b084      	sub	sp, #16
 8004022:	b580      	push	{r7, lr}
 8004024:	b086      	sub	sp, #24
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
 800402a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800402e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800403a:	2300      	movs	r3, #0
 800403c:	613b      	str	r3, [r7, #16]
 800403e:	e009      	b.n	8004054 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	3340      	adds	r3, #64	; 0x40
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	2200      	movs	r2, #0
 800404c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	3301      	adds	r3, #1
 8004052:	613b      	str	r3, [r7, #16]
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2b0e      	cmp	r3, #14
 8004058:	d9f2      	bls.n	8004040 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800405a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d11c      	bne.n	800409a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800406e:	f043 0302 	orr.w	r3, r3, #2
 8004072:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	e005      	b.n	80040a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040ac:	461a      	mov	r2, r3
 80040ae:	2300      	movs	r3, #0
 80040b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040b8:	4619      	mov	r1, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c0:	461a      	mov	r2, r3
 80040c2:	680b      	ldr	r3, [r1, #0]
 80040c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d10c      	bne.n	80040e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d104      	bne.n	80040dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040d2:	2100      	movs	r1, #0
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 f959 	bl	800438c <USB_SetDevSpeed>
 80040da:	e018      	b.n	800410e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040dc:	2101      	movs	r1, #1
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 f954 	bl	800438c <USB_SetDevSpeed>
 80040e4:	e013      	b.n	800410e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d10c      	bne.n	8004106 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040f2:	2100      	movs	r1, #0
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f949 	bl	800438c <USB_SetDevSpeed>
 80040fa:	e008      	b.n	800410e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040fc:	2101      	movs	r1, #1
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f944 	bl	800438c <USB_SetDevSpeed>
 8004104:	e003      	b.n	800410e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004106:	2103      	movs	r1, #3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f93f 	bl	800438c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800410e:	2110      	movs	r1, #16
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f8f3 	bl	80042fc <USB_FlushTxFifo>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f911 	bl	8004348 <USB_FlushRxFifo>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	461a      	mov	r2, r3
 8004138:	2300      	movs	r3, #0
 800413a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	461a      	mov	r2, r3
 8004144:	2300      	movs	r3, #0
 8004146:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414e:	461a      	mov	r2, r3
 8004150:	2300      	movs	r3, #0
 8004152:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004154:	2300      	movs	r3, #0
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	e043      	b.n	80041e2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800416c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004170:	d118      	bne.n	80041a4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004184:	461a      	mov	r2, r3
 8004186:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	e013      	b.n	80041b6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	461a      	mov	r2, r3
 800419c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e008      	b.n	80041b6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b0:	461a      	mov	r2, r3
 80041b2:	2300      	movs	r3, #0
 80041b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c2:	461a      	mov	r2, r3
 80041c4:	2300      	movs	r3, #0
 80041c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	461a      	mov	r2, r3
 80041d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	3301      	adds	r3, #1
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d3b7      	bcc.n	800415a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e043      	b.n	8004278 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004206:	d118      	bne.n	800423a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e013      	b.n	800424c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004230:	461a      	mov	r2, r3
 8004232:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	e008      	b.n	800424c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	461a      	mov	r2, r3
 8004248:	2300      	movs	r3, #0
 800424a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	461a      	mov	r2, r3
 800425a:	2300      	movs	r3, #0
 800425c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426a:	461a      	mov	r2, r3
 800426c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004270:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3301      	adds	r3, #1
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d3b7      	bcc.n	80041f0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004292:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80042a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f043 0210 	orr.w	r2, r3, #16
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <USB_DevInit+0x2d4>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f043 0208 	orr.w	r2, r3, #8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699a      	ldr	r2, [r3, #24]
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <USB_DevInit+0x2d8>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042f0:	b004      	add	sp, #16
 80042f2:	4770      	bx	lr
 80042f4:	803c3800 	.word	0x803c3800
 80042f8:	40000004 	.word	0x40000004

080042fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	019b      	lsls	r3, r3, #6
 800430e:	f043 0220 	orr.w	r2, r3, #32
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	3301      	adds	r3, #1
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4a09      	ldr	r2, [pc, #36]	; (8004344 <USB_FlushTxFifo+0x48>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d901      	bls.n	8004328 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e006      	b.n	8004336 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f003 0320 	and.w	r3, r3, #32
 8004330:	2b20      	cmp	r3, #32
 8004332:	d0f0      	beq.n	8004316 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	00030d40 	.word	0x00030d40

08004348 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2210      	movs	r2, #16
 8004358:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	3301      	adds	r3, #1
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	4a09      	ldr	r2, [pc, #36]	; (8004388 <USB_FlushRxFifo+0x40>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e006      	b.n	800437a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b10      	cmp	r3, #16
 8004376:	d0f0      	beq.n	800435a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3714      	adds	r7, #20
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	00030d40 	.word	0x00030d40

0800438c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	460b      	mov	r3, r1
 8004396:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	68f9      	ldr	r1, [r7, #12]
 80043a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043ac:	4313      	orrs	r3, r2
 80043ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043be:	b480      	push	{r7}
 80043c0:	b085      	sub	sp, #20
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043d8:	f023 0303 	bic.w	r3, r3, #3
 80043dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043ec:	f043 0302 	orr.w	r3, r3, #2
 80043f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004408:	2300      	movs	r3, #0
 800440a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3301      	adds	r3, #1
 8004410:	60fb      	str	r3, [r7, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a13      	ldr	r2, [pc, #76]	; (8004464 <USB_CoreReset+0x64>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d901      	bls.n	800441e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e01b      	b.n	8004456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	daf2      	bge.n	800440c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f043 0201 	orr.w	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	3301      	adds	r3, #1
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4a09      	ldr	r2, [pc, #36]	; (8004464 <USB_CoreReset+0x64>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d901      	bls.n	8004448 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e006      	b.n	8004456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b01      	cmp	r3, #1
 8004452:	d0f0      	beq.n	8004436 <USB_CoreReset+0x36>

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	00030d40 	.word	0x00030d40

08004468 <__libc_init_array>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	4d0d      	ldr	r5, [pc, #52]	; (80044a0 <__libc_init_array+0x38>)
 800446c:	4c0d      	ldr	r4, [pc, #52]	; (80044a4 <__libc_init_array+0x3c>)
 800446e:	1b64      	subs	r4, r4, r5
 8004470:	10a4      	asrs	r4, r4, #2
 8004472:	2600      	movs	r6, #0
 8004474:	42a6      	cmp	r6, r4
 8004476:	d109      	bne.n	800448c <__libc_init_array+0x24>
 8004478:	4d0b      	ldr	r5, [pc, #44]	; (80044a8 <__libc_init_array+0x40>)
 800447a:	4c0c      	ldr	r4, [pc, #48]	; (80044ac <__libc_init_array+0x44>)
 800447c:	f000 f820 	bl	80044c0 <_init>
 8004480:	1b64      	subs	r4, r4, r5
 8004482:	10a4      	asrs	r4, r4, #2
 8004484:	2600      	movs	r6, #0
 8004486:	42a6      	cmp	r6, r4
 8004488:	d105      	bne.n	8004496 <__libc_init_array+0x2e>
 800448a:	bd70      	pop	{r4, r5, r6, pc}
 800448c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004490:	4798      	blx	r3
 8004492:	3601      	adds	r6, #1
 8004494:	e7ee      	b.n	8004474 <__libc_init_array+0xc>
 8004496:	f855 3b04 	ldr.w	r3, [r5], #4
 800449a:	4798      	blx	r3
 800449c:	3601      	adds	r6, #1
 800449e:	e7f2      	b.n	8004486 <__libc_init_array+0x1e>
 80044a0:	08004500 	.word	0x08004500
 80044a4:	08004500 	.word	0x08004500
 80044a8:	08004500 	.word	0x08004500
 80044ac:	08004504 	.word	0x08004504

080044b0 <memset>:
 80044b0:	4402      	add	r2, r0
 80044b2:	4603      	mov	r3, r0
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d100      	bne.n	80044ba <memset+0xa>
 80044b8:	4770      	bx	lr
 80044ba:	f803 1b01 	strb.w	r1, [r3], #1
 80044be:	e7f9      	b.n	80044b4 <memset+0x4>

080044c0 <_init>:
 80044c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044c2:	bf00      	nop
 80044c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044c6:	bc08      	pop	{r3}
 80044c8:	469e      	mov	lr, r3
 80044ca:	4770      	bx	lr

080044cc <_fini>:
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ce:	bf00      	nop
 80044d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044d2:	bc08      	pop	{r3}
 80044d4:	469e      	mov	lr, r3
 80044d6:	4770      	bx	lr
