
ECE4263_acc_NFH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000792c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08007b00  08007b00  00017b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f04  08007f04  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f04  08007f04  00017f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f0c  08007f0c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f0c  08007f0c  00017f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f10  08007f10  00017f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007f14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  200001dc  080080f0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  080080f0  000206f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001157c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000261b  00000000  00000000  00031788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  00033da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00034bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026dbd  00000000  00000000  000358c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102fd  00000000  00000000  0005c67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea738  00000000  00000000  0006c97a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001570b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c08  00000000  00000000  00157108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ae4 	.word	0x08007ae4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007ae4 	.word	0x08007ae4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	b0ac      	sub	sp, #176	; 0xb0
 8000ee4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee6:	f000 fd5a 	bl	800199e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eea:	f000 f909 	bl	8001100 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eee:	f000 fa37 	bl	8001360 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ef2:	f000 f9d7 	bl	80012a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ef6:	f000 fa05 	bl	8001304 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000efa:	f000 f993 	bl	8001224 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  uint8_t check;

  HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1, HAL_MAX_DELAY);
 8000efe:	f04f 33ff 	mov.w	r3, #4294967295
 8000f02:	9302      	str	r3, [sp, #8]
 8000f04:	2301      	movs	r3, #1
 8000f06:	9301      	str	r3, [sp, #4]
 8000f08:	f107 0387 	add.w	r3, r7, #135	; 0x87
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	2301      	movs	r3, #1
 8000f10:	2275      	movs	r2, #117	; 0x75
 8000f12:	21d0      	movs	r1, #208	; 0xd0
 8000f14:	4874      	ldr	r0, [pc, #464]	; (80010e8 <main+0x208>)
 8000f16:	f001 fa13 	bl	8002340 <HAL_I2C_Mem_Read>

  uint8_t data;

  if(check == 104){
 8000f1a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000f1e:	2b68      	cmp	r3, #104	; 0x68
 8000f20:	d143      	bne.n	8000faa <main+0xca>
	data = 0x00;
 8000f22:	2300      	movs	r3, #0
 8000f24:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000f28:	f04f 33ff 	mov.w	r3, #4294967295
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	2301      	movs	r3, #1
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	f107 0386 	add.w	r3, r7, #134	; 0x86
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	226b      	movs	r2, #107	; 0x6b
 8000f3c:	21d0      	movs	r1, #208	; 0xd0
 8000f3e:	486a      	ldr	r0, [pc, #424]	; (80010e8 <main+0x208>)
 8000f40:	f001 f8ea 	bl	8002118 <HAL_I2C_Mem_Write>
	data = 0x07;
 8000f44:	2307      	movs	r3, #7
 8000f46:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4e:	9302      	str	r3, [sp, #8]
 8000f50:	2301      	movs	r3, #1
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	f107 0386 	add.w	r3, r7, #134	; 0x86
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2219      	movs	r2, #25
 8000f5e:	21d0      	movs	r1, #208	; 0xd0
 8000f60:	4861      	ldr	r0, [pc, #388]	; (80010e8 <main+0x208>)
 8000f62:	f001 f8d9 	bl	8002118 <HAL_I2C_Mem_Write>
	data = 0x00;
 8000f66:	2300      	movs	r3, #0
 8000f68:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f70:	9302      	str	r3, [sp, #8]
 8000f72:	2301      	movs	r3, #1
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	f107 0386 	add.w	r3, r7, #134	; 0x86
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	221c      	movs	r2, #28
 8000f80:	21d0      	movs	r1, #208	; 0xd0
 8000f82:	4859      	ldr	r0, [pc, #356]	; (80010e8 <main+0x208>)
 8000f84:	f001 f8c8 	bl	8002118 <HAL_I2C_Mem_Write>
	data = 0x00;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	9302      	str	r3, [sp, #8]
 8000f94:	2301      	movs	r3, #1
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	f107 0386 	add.w	r3, r7, #134	; 0x86
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	221b      	movs	r2, #27
 8000fa2:	21d0      	movs	r1, #208	; 0xd0
 8000fa4:	4850      	ldr	r0, [pc, #320]	; (80010e8 <main+0x208>)
 8000fa6:	f001 f8b7 	bl	8002118 <HAL_I2C_Mem_Write>
//	//HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, dataRX, 6, HAL_MAX_DELAY);
//	Accel_Z_RAW = (int16_t)(dataRX[4] << 8 | dataRX [5]);
//	double Az = Accel_Z_RAW/16384.0;


	  HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, dataRX, 6, 1000);
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2301      	movs	r3, #1
 8000fbc:	2243      	movs	r2, #67	; 0x43
 8000fbe:	21d0      	movs	r1, #208	; 0xd0
 8000fc0:	4849      	ldr	r0, [pc, #292]	; (80010e8 <main+0x208>)
 8000fc2:	f001 f9bd 	bl	8002340 <HAL_I2C_Mem_Read>
	  Gyro_X_RAW = (int16_t)(dataRX[0] << 8 | dataRX [1]);
 8000fc6:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	f897 3081 	ldrb.w	r3, [r7, #129]	; 0x81
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b21a      	sxth	r2, r3
 8000fd8:	4b44      	ldr	r3, [pc, #272]	; (80010ec <main+0x20c>)
 8000fda:	801a      	strh	r2, [r3, #0]
	  double Gx = (Gx + (Gyro_X_RAW/131.0))/2;
 8000fdc:	4b43      	ldr	r3, [pc, #268]	; (80010ec <main+0x20c>)
 8000fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff fabe 	bl	8000564 <__aeabi_i2d>
 8000fe8:	a33d      	add	r3, pc, #244	; (adr r3, 80010e0 <main+0x200>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff fc4d 	bl	800088c <__aeabi_ddiv>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 8000ffe:	f7ff f965 	bl	80002cc <__adddf3>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001012:	f7ff fc3b 	bl	800088c <__aeabi_ddiv>
 8001016:	4602      	mov	r2, r0
 8001018:	460b      	mov	r3, r1
 800101a:	e9c7 2326 	strd	r2, r3, [r7, #152]	; 0x98

	  Gyro_Z_RAW = (int16_t)(dataRX[2] << 8 | dataRX [3]);
 800101e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800102a:	b21b      	sxth	r3, r3
 800102c:	4313      	orrs	r3, r2
 800102e:	b21a      	sxth	r2, r3
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <main+0x210>)
 8001032:	801a      	strh	r2, [r3, #0]
	  double Gz = Gyro_Z_RAW/131.0;
 8001034:	4b2e      	ldr	r3, [pc, #184]	; (80010f0 <main+0x210>)
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa92 	bl	8000564 <__aeabi_i2d>
 8001040:	a327      	add	r3, pc, #156	; (adr r3, 80010e0 <main+0x200>)
 8001042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001046:	f7ff fc21 	bl	800088c <__aeabi_ddiv>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90

	  Gyro_Y_RAW = (int16_t)(dataRX[4] << 8 | dataRX [5]);
 8001052:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21a      	sxth	r2, r3
 800105a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800105e:	b21b      	sxth	r3, r3
 8001060:	4313      	orrs	r3, r2
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b23      	ldr	r3, [pc, #140]	; (80010f4 <main+0x214>)
 8001066:	801a      	strh	r2, [r3, #0]
	  double Gy = Gyro_Y_RAW/131.0;
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <main+0x214>)
 800106a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fa78 	bl	8000564 <__aeabi_i2d>
 8001074:	a31a      	add	r3, pc, #104	; (adr r3, 80010e0 <main+0x200>)
 8001076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107a:	f7ff fc07 	bl	800088c <__aeabi_ddiv>
 800107e:	4602      	mov	r2, r0
 8001080:	460b      	mov	r3, r1
 8001082:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

	  sprintf(buffer, "%lf, %lf \r\n", Gyro_X_RAW/131.0, Gx);
 8001086:	4b19      	ldr	r3, [pc, #100]	; (80010ec <main+0x20c>)
 8001088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa69 	bl	8000564 <__aeabi_i2d>
 8001092:	a313      	add	r3, pc, #76	; (adr r3, 80010e0 <main+0x200>)
 8001094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001098:	f7ff fbf8 	bl	800088c <__aeabi_ddiv>
 800109c:	4602      	mov	r2, r0
 800109e:	460b      	mov	r3, r1
 80010a0:	4614      	mov	r4, r2
 80010a2:	461d      	mov	r5, r3
 80010a4:	4638      	mov	r0, r7
 80010a6:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 80010aa:	e9cd 2300 	strd	r2, r3, [sp]
 80010ae:	4622      	mov	r2, r4
 80010b0:	462b      	mov	r3, r5
 80010b2:	4911      	ldr	r1, [pc, #68]	; (80010f8 <main+0x218>)
 80010b4:	f004 faea 	bl	800568c <siprintf>

	  HAL_UART_Transmit(&huart3, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 80010b8:	463b      	mov	r3, r7
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff f8a8 	bl	8000210 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4639      	mov	r1, r7
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ca:	480c      	ldr	r0, [pc, #48]	; (80010fc <main+0x21c>)
 80010cc:	f002 ff42 	bl	8003f54 <HAL_UART_Transmit>


	  HAL_Delay(500);
 80010d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010d4:	f000 fcc0 	bl	8001a58 <HAL_Delay>
  {
 80010d8:	e767      	b.n	8000faa <main+0xca>
 80010da:	bf00      	nop
 80010dc:	f3af 8000 	nop.w
 80010e0:	00000000 	.word	0x00000000
 80010e4:	40606000 	.word	0x40606000
 80010e8:	20000290 	.word	0x20000290
 80010ec:	200001f8 	.word	0x200001f8
 80010f0:	200001fc 	.word	0x200001fc
 80010f4:	200001fa 	.word	0x200001fa
 80010f8:	08007b00 	.word	0x08007b00
 80010fc:	2000020c 	.word	0x2000020c

08001100 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0b4      	sub	sp, #208	; 0xd0
 8001104:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001106:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800110a:	2230      	movs	r2, #48	; 0x30
 800110c:	2100      	movs	r1, #0
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fe4a 	bl	8004da8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001114:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	2284      	movs	r2, #132	; 0x84
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f003 fe3b 	bl	8004da8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001132:	f001 fe1b 	bl	8002d6c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <SystemClock_Config+0x118>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	4a37      	ldr	r2, [pc, #220]	; (8001218 <SystemClock_Config+0x118>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
 8001142:	4b35      	ldr	r3, [pc, #212]	; (8001218 <SystemClock_Config+0x118>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <SystemClock_Config+0x11c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001156:	4a31      	ldr	r2, [pc, #196]	; (800121c <SystemClock_Config+0x11c>)
 8001158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b2f      	ldr	r3, [pc, #188]	; (800121c <SystemClock_Config+0x11c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800116a:	2301      	movs	r3, #1
 800116c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001170:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001174:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001178:	2302      	movs	r3, #2
 800117a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001186:	2304      	movs	r3, #4
 8001188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 800118c:	2348      	movs	r3, #72	; 0x48
 800118e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001198:	2303      	movs	r3, #3
 800119a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800119e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fdf2 	bl	8002d8c <HAL_RCC_OscConfig>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80011ae:	f000 f9bd 	bl	800152c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b2:	230f      	movs	r3, #15
 80011b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b8:	2302      	movs	r3, #2
 80011ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011be:	2300      	movs	r3, #0
 80011c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011d6:	2102      	movs	r1, #2
 80011d8:	4618      	mov	r0, r3
 80011da:	f002 f87b 	bl	80032d4 <HAL_RCC_ClockConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80011e4:	f000 f9a2 	bl	800152c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <SystemClock_Config+0x120>)
 80011ea:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	4618      	mov	r0, r3
 8001200:	f002 fa6a 	bl	80036d8 <HAL_RCCEx_PeriphCLKConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x10e>
  {
    Error_Handler();
 800120a:	f000 f98f 	bl	800152c <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	37d0      	adds	r7, #208	; 0xd0
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40007000 	.word	0x40007000
 8001220:	00204100 	.word	0x00204100

08001224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MX_I2C1_Init+0x74>)
 800122a:	4a1c      	ldr	r2, [pc, #112]	; (800129c <MX_I2C1_Init+0x78>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <MX_I2C1_Init+0x74>)
 8001230:	4a1b      	ldr	r2, [pc, #108]	; (80012a0 <MX_I2C1_Init+0x7c>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <MX_I2C1_Init+0x74>)
 800123c:	2201      	movs	r2, #1
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b15      	ldr	r3, [pc, #84]	; (8001298 <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_I2C1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_I2C1_Init+0x74>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800125e:	480e      	ldr	r0, [pc, #56]	; (8001298 <MX_I2C1_Init+0x74>)
 8001260:	f000 feca 	bl	8001ff8 <HAL_I2C_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800126a:	f000 f95f 	bl	800152c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800126e:	2100      	movs	r1, #0
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <MX_I2C1_Init+0x74>)
 8001272:	f001 fb9b 	bl	80029ac <HAL_I2CEx_ConfigAnalogFilter>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800127c:	f000 f956 	bl	800152c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001280:	2100      	movs	r1, #0
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_I2C1_Init+0x74>)
 8001284:	f001 fbdd 	bl	8002a42 <HAL_I2CEx_ConfigDigitalFilter>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800128e:	f000 f94d 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000290 	.word	0x20000290
 800129c:	40005400 	.word	0x40005400
 80012a0:	00808cd2 	.word	0x00808cd2

080012a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012a8:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_USART3_UART_Init+0x58>)
 80012aa:	4a15      	ldr	r2, [pc, #84]	; (8001300 <MX_USART3_UART_Init+0x5c>)
 80012ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <MX_USART3_UART_Init+0x58>)
 80012b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_USART3_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_USART3_UART_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_USART3_UART_Init+0x58>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_USART3_UART_Init+0x58>)
 80012ca:	220c      	movs	r2, #12
 80012cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_USART3_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_USART3_UART_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_USART3_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_USART3_UART_Init+0x58>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_USART3_UART_Init+0x58>)
 80012e8:	f002 fde6 	bl	8003eb8 <HAL_UART_Init>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012f2:	f000 f91b 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000020c 	.word	0x2000020c
 8001300:	40004800 	.word	0x40004800

08001304 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800130a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800130e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001312:	2206      	movs	r2, #6
 8001314:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001318:	2202      	movs	r2, #2
 800131a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001324:	2202      	movs	r2, #2
 8001326:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800132a:	2201      	movs	r2, #1
 800132c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800133c:	2201      	movs	r2, #1
 800133e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001348:	f001 fbc7 	bl	8002ada <HAL_PCD_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001352:	f000 f8eb 	bl	800152c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200002dc 	.word	0x200002dc

08001360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	; 0x30
 8001364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001376:	4b67      	ldr	r3, [pc, #412]	; (8001514 <MX_GPIO_Init+0x1b4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a66      	ldr	r2, [pc, #408]	; (8001514 <MX_GPIO_Init+0x1b4>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b64      	ldr	r3, [pc, #400]	; (8001514 <MX_GPIO_Init+0x1b4>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0304 	and.w	r3, r3, #4
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138e:	4b61      	ldr	r3, [pc, #388]	; (8001514 <MX_GPIO_Init+0x1b4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a60      	ldr	r2, [pc, #384]	; (8001514 <MX_GPIO_Init+0x1b4>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b5e      	ldr	r3, [pc, #376]	; (8001514 <MX_GPIO_Init+0x1b4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	4b5b      	ldr	r3, [pc, #364]	; (8001514 <MX_GPIO_Init+0x1b4>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a5a      	ldr	r2, [pc, #360]	; (8001514 <MX_GPIO_Init+0x1b4>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b58      	ldr	r3, [pc, #352]	; (8001514 <MX_GPIO_Init+0x1b4>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	4b55      	ldr	r3, [pc, #340]	; (8001514 <MX_GPIO_Init+0x1b4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a54      	ldr	r2, [pc, #336]	; (8001514 <MX_GPIO_Init+0x1b4>)
 80013c4:	f043 0302 	orr.w	r3, r3, #2
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b52      	ldr	r3, [pc, #328]	; (8001514 <MX_GPIO_Init+0x1b4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d6:	4b4f      	ldr	r3, [pc, #316]	; (8001514 <MX_GPIO_Init+0x1b4>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a4e      	ldr	r2, [pc, #312]	; (8001514 <MX_GPIO_Init+0x1b4>)
 80013dc:	f043 0308 	orr.w	r3, r3, #8
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b4c      	ldr	r3, [pc, #304]	; (8001514 <MX_GPIO_Init+0x1b4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ee:	4b49      	ldr	r3, [pc, #292]	; (8001514 <MX_GPIO_Init+0x1b4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a48      	ldr	r2, [pc, #288]	; (8001514 <MX_GPIO_Init+0x1b4>)
 80013f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b46      	ldr	r3, [pc, #280]	; (8001514 <MX_GPIO_Init+0x1b4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f244 0181 	movw	r1, #16513	; 0x4081
 800140c:	4842      	ldr	r0, [pc, #264]	; (8001518 <MX_GPIO_Init+0x1b8>)
 800140e:	f000 fdd9 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2140      	movs	r1, #64	; 0x40
 8001416:	4841      	ldr	r0, [pc, #260]	; (800151c <MX_GPIO_Init+0x1bc>)
 8001418:	f000 fdd4 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800141c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001422:	4b3f      	ldr	r3, [pc, #252]	; (8001520 <MX_GPIO_Init+0x1c0>)
 8001424:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 031c 	add.w	r3, r7, #28
 800142e:	4619      	mov	r1, r3
 8001430:	483c      	ldr	r0, [pc, #240]	; (8001524 <MX_GPIO_Init+0x1c4>)
 8001432:	f000 fc1b 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001436:	2332      	movs	r3, #50	; 0x32
 8001438:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143a:	2302      	movs	r3, #2
 800143c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001442:	2303      	movs	r3, #3
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001446:	230b      	movs	r3, #11
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	4834      	ldr	r0, [pc, #208]	; (8001524 <MX_GPIO_Init+0x1c4>)
 8001452:	f000 fc0b 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001456:	2386      	movs	r3, #134	; 0x86
 8001458:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001466:	230b      	movs	r3, #11
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	482d      	ldr	r0, [pc, #180]	; (8001528 <MX_GPIO_Init+0x1c8>)
 8001472:	f000 fbfb 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001476:	f244 0381 	movw	r3, #16513	; 0x4081
 800147a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 031c 	add.w	r3, r7, #28
 800148c:	4619      	mov	r1, r3
 800148e:	4822      	ldr	r0, [pc, #136]	; (8001518 <MX_GPIO_Init+0x1b8>)
 8001490:	f000 fbec 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	2302      	movs	r3, #2
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a2:	2303      	movs	r3, #3
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014a6:	230b      	movs	r3, #11
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 031c 	add.w	r3, r7, #28
 80014ae:	4619      	mov	r1, r3
 80014b0:	4819      	ldr	r0, [pc, #100]	; (8001518 <MX_GPIO_Init+0x1b8>)
 80014b2:	f000 fbdb 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014b6:	2340      	movs	r3, #64	; 0x40
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 031c 	add.w	r3, r7, #28
 80014ca:	4619      	mov	r1, r3
 80014cc:	4813      	ldr	r0, [pc, #76]	; (800151c <MX_GPIO_Init+0x1bc>)
 80014ce:	f000 fbcd 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014d2:	2380      	movs	r3, #128	; 0x80
 80014d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_GPIO_Init+0x1bc>)
 80014e6:	f000 fbc1 	bl	8001c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80014ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014fc:	230b      	movs	r3, #11
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_GPIO_Init+0x1bc>)
 8001508:	f000 fbb0 	bl	8001c6c <HAL_GPIO_Init>

}
 800150c:	bf00      	nop
 800150e:	3730      	adds	r7, #48	; 0x30
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40023800 	.word	0x40023800
 8001518:	40020400 	.word	0x40020400
 800151c:	40021800 	.word	0x40021800
 8001520:	10110000 	.word	0x10110000
 8001524:	40020800 	.word	0x40020800
 8001528:	40020000 	.word	0x40020000

0800152c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001530:	b672      	cpsid	i
}
 8001532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001534:	e7fe      	b.n	8001534 <Error_Handler+0x8>
	...

08001538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	4b0f      	ldr	r3, [pc, #60]	; (800157c <HAL_MspInit+0x44>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a0e      	ldr	r2, [pc, #56]	; (800157c <HAL_MspInit+0x44>)
 8001544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b0c      	ldr	r3, [pc, #48]	; (800157c <HAL_MspInit+0x44>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <HAL_MspInit+0x44>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155a:	4a08      	ldr	r2, [pc, #32]	; (800157c <HAL_MspInit+0x44>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001560:	6453      	str	r3, [r2, #68]	; 0x44
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_MspInit+0x44>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156a:	603b      	str	r3, [r7, #0]
 800156c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40023800 	.word	0x40023800

08001580 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08a      	sub	sp, #40	; 0x28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_I2C_MspInit+0x7c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d128      	bne.n	80015f4 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <HAL_I2C_MspInit+0x80>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	4a16      	ldr	r2, [pc, #88]	; (8001600 <HAL_I2C_MspInit+0x80>)
 80015a8:	f043 0302 	orr.w	r3, r3, #2
 80015ac:	6313      	str	r3, [r2, #48]	; 0x30
 80015ae:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_I2C_MspInit+0x80>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	613b      	str	r3, [r7, #16]
 80015b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c0:	2312      	movs	r3, #18
 80015c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c8:	2303      	movs	r3, #3
 80015ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015cc:	2304      	movs	r3, #4
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	4619      	mov	r1, r3
 80015d6:	480b      	ldr	r0, [pc, #44]	; (8001604 <HAL_I2C_MspInit+0x84>)
 80015d8:	f000 fb48 	bl	8001c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <HAL_I2C_MspInit+0x80>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	4a07      	ldr	r2, [pc, #28]	; (8001600 <HAL_I2C_MspInit+0x80>)
 80015e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e6:	6413      	str	r3, [r2, #64]	; 0x40
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_I2C_MspInit+0x80>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015f4:	bf00      	nop
 80015f6:	3728      	adds	r7, #40	; 0x28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	40005400 	.word	0x40005400
 8001600:	40023800 	.word	0x40023800
 8001604:	40020400 	.word	0x40020400

08001608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 0314 	add.w	r3, r7, #20
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a17      	ldr	r2, [pc, #92]	; (8001684 <HAL_UART_MspInit+0x7c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d128      	bne.n	800167c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <HAL_UART_MspInit+0x80>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a16      	ldr	r2, [pc, #88]	; (8001688 <HAL_UART_MspInit+0x80>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_UART_MspInit+0x80>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163e:	613b      	str	r3, [r7, #16]
 8001640:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <HAL_UART_MspInit+0x80>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <HAL_UART_MspInit+0x80>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <HAL_UART_MspInit+0x80>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800165a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800166c:	2307      	movs	r3, #7
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4805      	ldr	r0, [pc, #20]	; (800168c <HAL_UART_MspInit+0x84>)
 8001678:	f000 faf8 	bl	8001c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40004800 	.word	0x40004800
 8001688:	40023800 	.word	0x40023800
 800168c:	40020c00 	.word	0x40020c00

08001690 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b08a      	sub	sp, #40	; 0x28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016b0:	d141      	bne.n	8001736 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016b2:	4b23      	ldr	r3, [pc, #140]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a22      	ldr	r2, [pc, #136]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b20      	ldr	r3, [pc, #128]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80016ca:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016dc:	230a      	movs	r3, #10
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	4817      	ldr	r0, [pc, #92]	; (8001744 <HAL_PCD_MspInit+0xb4>)
 80016e8:	f000 fac0 	bl	8001c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80016ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80016fa:	f107 0314 	add.w	r3, r7, #20
 80016fe:	4619      	mov	r1, r3
 8001700:	4810      	ldr	r0, [pc, #64]	; (8001744 <HAL_PCD_MspInit+0xb4>)
 8001702:	f000 fab3 	bl	8001c6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 8001708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800170a:	4a0d      	ldr	r2, [pc, #52]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 800170c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001710:	6353      	str	r3, [r2, #52]	; 0x34
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 8001714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171a:	60fb      	str	r3, [r7, #12]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 8001720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001722:	4a07      	ldr	r2, [pc, #28]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 8001724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001728:	6453      	str	r3, [r2, #68]	; 0x44
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <HAL_PCD_MspInit+0xb0>)
 800172c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	40020000 	.word	0x40020000

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001794:	f000 f940 	bl	8001a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
	return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <_kill>:

int _kill(int pid, int sig)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017b6:	f003 facd 	bl	8004d54 <__errno>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2216      	movs	r2, #22
 80017be:	601a      	str	r2, [r3, #0]
	return -1;
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <_exit>:

void _exit (int status)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017d4:	f04f 31ff 	mov.w	r1, #4294967295
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffe7 	bl	80017ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80017de:	e7fe      	b.n	80017de <_exit+0x12>

080017e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	e00a      	b.n	8001808 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017f2:	f3af 8000 	nop.w
 80017f6:	4601      	mov	r1, r0
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	1c5a      	adds	r2, r3, #1
 80017fc:	60ba      	str	r2, [r7, #8]
 80017fe:	b2ca      	uxtb	r2, r1
 8001800:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	3301      	adds	r3, #1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbf0      	blt.n	80017f2 <_read+0x12>
	}

return len;
 8001810:	687b      	ldr	r3, [r7, #4]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b086      	sub	sp, #24
 800181e:	af00      	add	r7, sp, #0
 8001820:	60f8      	str	r0, [r7, #12]
 8001822:	60b9      	str	r1, [r7, #8]
 8001824:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e009      	b.n	8001840 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	1c5a      	adds	r2, r3, #1
 8001830:	60ba      	str	r2, [r7, #8]
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	3301      	adds	r3, #1
 800183e:	617b      	str	r3, [r7, #20]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	429a      	cmp	r2, r3
 8001846:	dbf1      	blt.n	800182c <_write+0x12>
	}
	return len;
 8001848:	687b      	ldr	r3, [r7, #4]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3718      	adds	r7, #24
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <_close>:

int _close(int file)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
	return -1;
 800185a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800185e:	4618      	mov	r0, r3
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800186a:	b480      	push	{r7}
 800186c:	b083      	sub	sp, #12
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
 8001872:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800187a:	605a      	str	r2, [r3, #4]
	return 0;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr

0800188a <_isatty>:

int _isatty(int file)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
	return 1;
 8001892:	2301      	movs	r3, #1
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
	return 0;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
	...

080018bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b086      	sub	sp, #24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018c4:	4a14      	ldr	r2, [pc, #80]	; (8001918 <_sbrk+0x5c>)
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <_sbrk+0x60>)
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018d0:	4b13      	ldr	r3, [pc, #76]	; (8001920 <_sbrk+0x64>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d102      	bne.n	80018de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <_sbrk+0x64>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <_sbrk+0x68>)
 80018dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d207      	bcs.n	80018fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018ec:	f003 fa32 	bl	8004d54 <__errno>
 80018f0:	4603      	mov	r3, r0
 80018f2:	220c      	movs	r2, #12
 80018f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018f6:	f04f 33ff 	mov.w	r3, #4294967295
 80018fa:	e009      	b.n	8001910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018fc:	4b08      	ldr	r3, [pc, #32]	; (8001920 <_sbrk+0x64>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	4a05      	ldr	r2, [pc, #20]	; (8001920 <_sbrk+0x64>)
 800190c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20050000 	.word	0x20050000
 800191c:	00000400 	.word	0x00000400
 8001920:	20000200 	.word	0x20000200
 8001924:	200006f8 	.word	0x200006f8

08001928 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <SystemInit+0x20>)
 800192e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001932:	4a05      	ldr	r2, [pc, #20]	; (8001948 <SystemInit+0x20>)
 8001934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800194c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001984 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001950:	480d      	ldr	r0, [pc, #52]	; (8001988 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001952:	490e      	ldr	r1, [pc, #56]	; (800198c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001954:	4a0e      	ldr	r2, [pc, #56]	; (8001990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001958:	e002      	b.n	8001960 <LoopCopyDataInit>

0800195a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800195a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800195c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195e:	3304      	adds	r3, #4

08001960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001964:	d3f9      	bcc.n	800195a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001968:	4c0b      	ldr	r4, [pc, #44]	; (8001998 <LoopFillZerobss+0x26>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800196c:	e001      	b.n	8001972 <LoopFillZerobss>

0800196e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001970:	3204      	adds	r2, #4

08001972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001974:	d3fb      	bcc.n	800196e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001976:	f7ff ffd7 	bl	8001928 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800197a:	f003 f9f1 	bl	8004d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800197e:	f7ff faaf 	bl	8000ee0 <main>
  bx  lr    
 8001982:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001984:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800198c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001990:	08007f14 	.word	0x08007f14
  ldr r2, =_sbss
 8001994:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001998:	200006f4 	.word	0x200006f4

0800199c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800199c:	e7fe      	b.n	800199c <ADC_IRQHandler>

0800199e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a2:	2003      	movs	r0, #3
 80019a4:	f000 f92e 	bl	8001c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 f805 	bl	80019b8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80019ae:	f7ff fdc3 	bl	8001538 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c0:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_InitTick+0x54>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_InitTick+0x58>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4619      	mov	r1, r3
 80019ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f93b 	bl	8001c52 <HAL_SYSTICK_Config>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e00e      	b.n	8001a04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d80a      	bhi.n	8001a02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019ec:	2200      	movs	r2, #0
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	f04f 30ff 	mov.w	r0, #4294967295
 80019f4:	f000 f911 	bl	8001c1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f8:	4a06      	ldr	r2, [pc, #24]	; (8001a14 <HAL_InitTick+0x5c>)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	e000      	b.n	8001a04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000008 	.word	0x20000008
 8001a14:	20000004 	.word	0x20000004

08001a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a1c:	4b06      	ldr	r3, [pc, #24]	; (8001a38 <HAL_IncTick+0x20>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <HAL_IncTick+0x24>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4413      	add	r3, r2
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <HAL_IncTick+0x24>)
 8001a2a:	6013      	str	r3, [r2, #0]
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008
 8001a3c:	200006e0 	.word	0x200006e0

08001a40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  return uwTick;
 8001a44:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <HAL_GetTick+0x14>)
 8001a46:	681b      	ldr	r3, [r3, #0]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	200006e0 	.word	0x200006e0

08001a58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff ffee 	bl	8001a40 <HAL_GetTick>
 8001a64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d005      	beq.n	8001a7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_Delay+0x44>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a7e:	bf00      	nop
 8001a80:	f7ff ffde 	bl	8001a40 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d8f7      	bhi.n	8001a80 <HAL_Delay+0x28>
  {
  }
}
 8001a90:	bf00      	nop
 8001a92:	bf00      	nop
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000008 	.word	0x20000008

08001aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b085      	sub	sp, #20
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab6:	68ba      	ldr	r2, [r7, #8]
 8001ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001abc:	4013      	ands	r3, r2
 8001abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <__NVIC_SetPriorityGrouping+0x40>)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	60d3      	str	r3, [r2, #12]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	e000ed00 	.word	0xe000ed00
 8001ae4:	05fa0000 	.word	0x05fa0000

08001ae8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <__NVIC_GetPriorityGrouping+0x18>)
 8001aee:	68db      	ldr	r3, [r3, #12]
 8001af0:	0a1b      	lsrs	r3, r3, #8
 8001af2:	f003 0307 	and.w	r3, r3, #7
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	; (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	; (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	; 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	; 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
	...

08001bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bd0:	d301      	bcc.n	8001bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00f      	b.n	8001bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd6:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <SysTick_Config+0x40>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bde:	210f      	movs	r1, #15
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f7ff ff8e 	bl	8001b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <SysTick_Config+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <SysTick_Config+0x40>)
 8001bf0:	2207      	movs	r2, #7
 8001bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	e000e010 	.word	0xe000e010

08001c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff47 	bl	8001aa0 <__NVIC_SetPriorityGrouping>
}
 8001c12:	bf00      	nop
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	4603      	mov	r3, r0
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c2c:	f7ff ff5c 	bl	8001ae8 <__NVIC_GetPriorityGrouping>
 8001c30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	6978      	ldr	r0, [r7, #20]
 8001c38:	f7ff ff8e 	bl	8001b58 <NVIC_EncodePriority>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff ff5d 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b082      	sub	sp, #8
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7ff ffb0 	bl	8001bc0 <SysTick_Config>
 8001c60:	4603      	mov	r3, r0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
	...

08001c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	61fb      	str	r3, [r7, #28]
 8001c8a:	e175      	b.n	8001f78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	f040 8164 	bne.w	8001f72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d00b      	beq.n	8001cca <HAL_GPIO_Init+0x5e>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d007      	beq.n	8001cca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cbe:	2b11      	cmp	r3, #17
 8001cc0:	d003      	beq.n	8001cca <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b12      	cmp	r3, #18
 8001cc8:	d130      	bne.n	8001d2c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 0201 	and.w	r2, r3, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	2203      	movs	r2, #3
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	4013      	ands	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	689a      	ldr	r2, [r3, #8]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d003      	beq.n	8001d6c <HAL_GPIO_Init+0x100>
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b12      	cmp	r3, #18
 8001d6a:	d123      	bne.n	8001db4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	08da      	lsrs	r2, r3, #3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3208      	adds	r2, #8
 8001d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	220f      	movs	r2, #15
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	08da      	lsrs	r2, r3, #3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3208      	adds	r2, #8
 8001dae:	69b9      	ldr	r1, [r7, #24]
 8001db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	2203      	movs	r2, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0203 	and.w	r2, r3, #3
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 80be 	beq.w	8001f72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfa:	4a65      	ldr	r2, [pc, #404]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	; 0x44
 8001e02:	4b63      	ldr	r3, [pc, #396]	; (8001f90 <HAL_GPIO_Init+0x324>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001e0e:	4a61      	ldr	r2, [pc, #388]	; (8001f94 <HAL_GPIO_Init+0x328>)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	3302      	adds	r3, #2
 8001e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f003 0303 	and.w	r3, r3, #3
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	220f      	movs	r2, #15
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_GPIO_Init+0x32c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d037      	beq.n	8001eaa <HAL_GPIO_Init+0x23e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a57      	ldr	r2, [pc, #348]	; (8001f9c <HAL_GPIO_Init+0x330>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d031      	beq.n	8001ea6 <HAL_GPIO_Init+0x23a>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a56      	ldr	r2, [pc, #344]	; (8001fa0 <HAL_GPIO_Init+0x334>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d02b      	beq.n	8001ea2 <HAL_GPIO_Init+0x236>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a55      	ldr	r2, [pc, #340]	; (8001fa4 <HAL_GPIO_Init+0x338>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d025      	beq.n	8001e9e <HAL_GPIO_Init+0x232>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a54      	ldr	r2, [pc, #336]	; (8001fa8 <HAL_GPIO_Init+0x33c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d01f      	beq.n	8001e9a <HAL_GPIO_Init+0x22e>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a53      	ldr	r2, [pc, #332]	; (8001fac <HAL_GPIO_Init+0x340>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d019      	beq.n	8001e96 <HAL_GPIO_Init+0x22a>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a52      	ldr	r2, [pc, #328]	; (8001fb0 <HAL_GPIO_Init+0x344>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d013      	beq.n	8001e92 <HAL_GPIO_Init+0x226>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_GPIO_Init+0x348>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d00d      	beq.n	8001e8e <HAL_GPIO_Init+0x222>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a50      	ldr	r2, [pc, #320]	; (8001fb8 <HAL_GPIO_Init+0x34c>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d007      	beq.n	8001e8a <HAL_GPIO_Init+0x21e>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4f      	ldr	r2, [pc, #316]	; (8001fbc <HAL_GPIO_Init+0x350>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d101      	bne.n	8001e86 <HAL_GPIO_Init+0x21a>
 8001e82:	2309      	movs	r3, #9
 8001e84:	e012      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e86:	230a      	movs	r3, #10
 8001e88:	e010      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	e00e      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e8e:	2307      	movs	r3, #7
 8001e90:	e00c      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e92:	2306      	movs	r3, #6
 8001e94:	e00a      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e96:	2305      	movs	r3, #5
 8001e98:	e008      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	e006      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e004      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e002      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <HAL_GPIO_Init+0x240>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	69fa      	ldr	r2, [r7, #28]
 8001eae:	f002 0203 	and.w	r2, r2, #3
 8001eb2:	0092      	lsls	r2, r2, #2
 8001eb4:	4093      	lsls	r3, r2
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001ebc:	4935      	ldr	r1, [pc, #212]	; (8001f94 <HAL_GPIO_Init+0x328>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	089b      	lsrs	r3, r3, #2
 8001ec2:	3302      	adds	r3, #2
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eee:	4a34      	ldr	r2, [pc, #208]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ef4:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f1e:	4b28      	ldr	r3, [pc, #160]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	43db      	mvns	r3, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d003      	beq.n	8001f42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f42:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f48:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d003      	beq.n	8001f6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f6c:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <HAL_GPIO_Init+0x354>)
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3301      	adds	r3, #1
 8001f76:	61fb      	str	r3, [r7, #28]
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	2b0f      	cmp	r3, #15
 8001f7c:	f67f ae86 	bls.w	8001c8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f80:	bf00      	nop
 8001f82:	bf00      	nop
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40013800 	.word	0x40013800
 8001f98:	40020000 	.word	0x40020000
 8001f9c:	40020400 	.word	0x40020400
 8001fa0:	40020800 	.word	0x40020800
 8001fa4:	40020c00 	.word	0x40020c00
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40021400 	.word	0x40021400
 8001fb0:	40021800 	.word	0x40021800
 8001fb4:	40021c00 	.word	0x40021c00
 8001fb8:	40022000 	.word	0x40022000
 8001fbc:	40022400 	.word	0x40022400
 8001fc0:	40013c00 	.word	0x40013c00

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001fe0:	e003      	b.n	8001fea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001fe2:	887b      	ldrh	r3, [r7, #2]
 8001fe4:	041a      	lsls	r2, r3, #16
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	619a      	str	r2, [r3, #24]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e07f      	b.n	800210a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff faae 	bl	8001580 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2224      	movs	r2, #36	; 0x24
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0201 	bic.w	r2, r2, #1
 800203a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002048:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002058:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d107      	bne.n	8002072 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	e006      	b.n	8002080 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800207e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b02      	cmp	r3, #2
 8002086:	d104      	bne.n	8002092 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002090:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6859      	ldr	r1, [r3, #4]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_I2C_Init+0x11c>)
 800209e:	430b      	orrs	r3, r1
 80020a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	68da      	ldr	r2, [r3, #12]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	ea42 0103 	orr.w	r1, r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	021a      	lsls	r2, r3, #8
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69d9      	ldr	r1, [r3, #28]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1a      	ldr	r2, [r3, #32]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f042 0201 	orr.w	r2, r2, #1
 80020ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2220      	movs	r2, #32
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	02008000 	.word	0x02008000

08002118 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	4608      	mov	r0, r1
 8002122:	4611      	mov	r1, r2
 8002124:	461a      	mov	r2, r3
 8002126:	4603      	mov	r3, r0
 8002128:	817b      	strh	r3, [r7, #10]
 800212a:	460b      	mov	r3, r1
 800212c:	813b      	strh	r3, [r7, #8]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b20      	cmp	r3, #32
 800213c:	f040 80f9 	bne.w	8002332 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <HAL_I2C_Mem_Write+0x34>
 8002146:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002148:	2b00      	cmp	r3, #0
 800214a:	d105      	bne.n	8002158 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002152:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0ed      	b.n	8002334 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <HAL_I2C_Mem_Write+0x4e>
 8002162:	2302      	movs	r3, #2
 8002164:	e0e6      	b.n	8002334 <HAL_I2C_Mem_Write+0x21c>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2201      	movs	r2, #1
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800216e:	f7ff fc67 	bl	8001a40 <HAL_GetTick>
 8002172:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	2319      	movs	r3, #25
 800217a:	2201      	movs	r2, #1
 800217c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 fac3 	bl	800270c <I2C_WaitOnFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0d1      	b.n	8002334 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2221      	movs	r2, #33	; 0x21
 8002194:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2240      	movs	r2, #64	; 0x40
 800219c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a3a      	ldr	r2, [r7, #32]
 80021aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2200      	movs	r2, #0
 80021b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021b8:	88f8      	ldrh	r0, [r7, #6]
 80021ba:	893a      	ldrh	r2, [r7, #8]
 80021bc:	8979      	ldrh	r1, [r7, #10]
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	9301      	str	r3, [sp, #4]
 80021c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	4603      	mov	r3, r0
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f000 f9d3 	bl	8002574 <I2C_RequestMemoryWrite>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0a9      	b.n	8002334 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2bff      	cmp	r3, #255	; 0xff
 80021e8:	d90e      	bls.n	8002208 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	22ff      	movs	r2, #255	; 0xff
 80021ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	8979      	ldrh	r1, [r7, #10]
 80021f8:	2300      	movs	r3, #0
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f000 fba5 	bl	8002950 <I2C_TransferConfig>
 8002206:	e00f      	b.n	8002228 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	b2da      	uxtb	r2, r3
 8002218:	8979      	ldrh	r1, [r7, #10]
 800221a:	2300      	movs	r3, #0
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 fb94 	bl	8002950 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 faad 	bl	800278c <I2C_WaitOnTXISFlagUntilTimeout>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e07b      	b.n	8002334 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002270:	b29b      	uxth	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d034      	beq.n	80022e0 <HAL_I2C_Mem_Write+0x1c8>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227a:	2b00      	cmp	r3, #0
 800227c:	d130      	bne.n	80022e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	2200      	movs	r2, #0
 8002286:	2180      	movs	r1, #128	; 0x80
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fa3f 	bl	800270c <I2C_WaitOnFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e04d      	b.n	8002334 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	2bff      	cmp	r3, #255	; 0xff
 80022a0:	d90e      	bls.n	80022c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	22ff      	movs	r2, #255	; 0xff
 80022a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	8979      	ldrh	r1, [r7, #10]
 80022b0:	2300      	movs	r3, #0
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f000 fb49 	bl	8002950 <I2C_TransferConfig>
 80022be:	e00f      	b.n	80022e0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	8979      	ldrh	r1, [r7, #10]
 80022d2:	2300      	movs	r3, #0
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 fb38 	bl	8002950 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d19e      	bne.n	8002228 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fa8c 	bl	800280c <I2C_WaitOnSTOPFlagUntilTimeout>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e01a      	b.n	8002334 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2220      	movs	r2, #32
 8002304:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6859      	ldr	r1, [r3, #4]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <HAL_I2C_Mem_Write+0x224>)
 8002312:	400b      	ands	r3, r1
 8002314:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2220      	movs	r2, #32
 800231a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800232e:	2300      	movs	r3, #0
 8002330:	e000      	b.n	8002334 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002332:	2302      	movs	r3, #2
  }
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	fe00e800 	.word	0xfe00e800

08002340 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af02      	add	r7, sp, #8
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	4608      	mov	r0, r1
 800234a:	4611      	mov	r1, r2
 800234c:	461a      	mov	r2, r3
 800234e:	4603      	mov	r3, r0
 8002350:	817b      	strh	r3, [r7, #10]
 8002352:	460b      	mov	r3, r1
 8002354:	813b      	strh	r3, [r7, #8]
 8002356:	4613      	mov	r3, r2
 8002358:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b20      	cmp	r3, #32
 8002364:	f040 80fd 	bne.w	8002562 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d002      	beq.n	8002374 <HAL_I2C_Mem_Read+0x34>
 800236e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002370:	2b00      	cmp	r3, #0
 8002372:	d105      	bne.n	8002380 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800237a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0f1      	b.n	8002564 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_I2C_Mem_Read+0x4e>
 800238a:	2302      	movs	r3, #2
 800238c:	e0ea      	b.n	8002564 <HAL_I2C_Mem_Read+0x224>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002396:	f7ff fb53 	bl	8001a40 <HAL_GetTick>
 800239a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	2319      	movs	r3, #25
 80023a2:	2201      	movs	r2, #1
 80023a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f9af 	bl	800270c <I2C_WaitOnFlagUntilTimeout>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d001      	beq.n	80023b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0d5      	b.n	8002564 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2222      	movs	r2, #34	; 0x22
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2240      	movs	r2, #64	; 0x40
 80023c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6a3a      	ldr	r2, [r7, #32]
 80023d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2200      	movs	r2, #0
 80023de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023e0:	88f8      	ldrh	r0, [r7, #6]
 80023e2:	893a      	ldrh	r2, [r7, #8]
 80023e4:	8979      	ldrh	r1, [r7, #10]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	4603      	mov	r3, r0
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 f913 	bl	800261c <I2C_RequestMemoryRead>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e0ad      	b.n	8002564 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	2bff      	cmp	r3, #255	; 0xff
 8002410:	d90e      	bls.n	8002430 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	22ff      	movs	r2, #255	; 0xff
 8002416:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800241c:	b2da      	uxtb	r2, r3
 800241e:	8979      	ldrh	r1, [r7, #10]
 8002420:	4b52      	ldr	r3, [pc, #328]	; (800256c <HAL_I2C_Mem_Read+0x22c>)
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fa91 	bl	8002950 <I2C_TransferConfig>
 800242e:	e00f      	b.n	8002450 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243e:	b2da      	uxtb	r2, r3
 8002440:	8979      	ldrh	r1, [r7, #10]
 8002442:	4b4a      	ldr	r3, [pc, #296]	; (800256c <HAL_I2C_Mem_Read+0x22c>)
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fa80 	bl	8002950 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002456:	2200      	movs	r2, #0
 8002458:	2104      	movs	r1, #4
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f000 f956 	bl	800270c <I2C_WaitOnFlagUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e07c      	b.n	8002564 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	1c5a      	adds	r2, r3, #1
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002486:	3b01      	subs	r3, #1
 8002488:	b29a      	uxth	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d034      	beq.n	8002510 <HAL_I2C_Mem_Read+0x1d0>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d130      	bne.n	8002510 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b4:	2200      	movs	r2, #0
 80024b6:	2180      	movs	r1, #128	; 0x80
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 f927 	bl	800270c <I2C_WaitOnFlagUntilTimeout>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e04d      	b.n	8002564 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	2bff      	cmp	r3, #255	; 0xff
 80024d0:	d90e      	bls.n	80024f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	22ff      	movs	r2, #255	; 0xff
 80024d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	8979      	ldrh	r1, [r7, #10]
 80024e0:	2300      	movs	r3, #0
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	f000 fa31 	bl	8002950 <I2C_TransferConfig>
 80024ee:	e00f      	b.n	8002510 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fe:	b2da      	uxtb	r2, r3
 8002500:	8979      	ldrh	r1, [r7, #10]
 8002502:	2300      	movs	r3, #0
 8002504:	9300      	str	r3, [sp, #0]
 8002506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f000 fa20 	bl	8002950 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d19a      	bne.n	8002450 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 f974 	bl	800280c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e01a      	b.n	8002564 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2220      	movs	r2, #32
 8002534:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6859      	ldr	r1, [r3, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4b0b      	ldr	r3, [pc, #44]	; (8002570 <HAL_I2C_Mem_Read+0x230>)
 8002542:	400b      	ands	r3, r1
 8002544:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2220      	movs	r2, #32
 800254a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	e000      	b.n	8002564 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002562:	2302      	movs	r3, #2
  }
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	80002400 	.word	0x80002400
 8002570:	fe00e800 	.word	0xfe00e800

08002574 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af02      	add	r7, sp, #8
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	4608      	mov	r0, r1
 800257e:	4611      	mov	r1, r2
 8002580:	461a      	mov	r2, r3
 8002582:	4603      	mov	r3, r0
 8002584:	817b      	strh	r3, [r7, #10]
 8002586:	460b      	mov	r3, r1
 8002588:	813b      	strh	r3, [r7, #8]
 800258a:	4613      	mov	r3, r2
 800258c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	b2da      	uxtb	r2, r3
 8002592:	8979      	ldrh	r1, [r7, #10]
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <I2C_RequestMemoryWrite+0xa4>)
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f9d7 	bl	8002950 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	69b9      	ldr	r1, [r7, #24]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f8f0 	bl	800278c <I2C_WaitOnTXISFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e02c      	b.n	8002610 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d105      	bne.n	80025c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025bc:	893b      	ldrh	r3, [r7, #8]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	629a      	str	r2, [r3, #40]	; 0x28
 80025c6:	e015      	b.n	80025f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80025c8:	893b      	ldrh	r3, [r7, #8]
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	69b9      	ldr	r1, [r7, #24]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 f8d6 	bl	800278c <I2C_WaitOnTXISFlagUntilTimeout>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e012      	b.n	8002610 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025ea:	893b      	ldrh	r3, [r7, #8]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	2200      	movs	r2, #0
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f000 f884 	bl	800270c <I2C_WaitOnFlagUntilTimeout>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	80002000 	.word	0x80002000

0800261c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b086      	sub	sp, #24
 8002620:	af02      	add	r7, sp, #8
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	4608      	mov	r0, r1
 8002626:	4611      	mov	r1, r2
 8002628:	461a      	mov	r2, r3
 800262a:	4603      	mov	r3, r0
 800262c:	817b      	strh	r3, [r7, #10]
 800262e:	460b      	mov	r3, r1
 8002630:	813b      	strh	r3, [r7, #8]
 8002632:	4613      	mov	r3, r2
 8002634:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002636:	88fb      	ldrh	r3, [r7, #6]
 8002638:	b2da      	uxtb	r2, r3
 800263a:	8979      	ldrh	r1, [r7, #10]
 800263c:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <I2C_RequestMemoryRead+0xa4>)
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	2300      	movs	r3, #0
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f984 	bl	8002950 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002648:	69fa      	ldr	r2, [r7, #28]
 800264a:	69b9      	ldr	r1, [r7, #24]
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f89d 	bl	800278c <I2C_WaitOnTXISFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e02c      	b.n	80026b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d105      	bne.n	800266e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002662:	893b      	ldrh	r3, [r7, #8]
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	629a      	str	r2, [r3, #40]	; 0x28
 800266c:	e015      	b.n	800269a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800266e:	893b      	ldrh	r3, [r7, #8]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	b29b      	uxth	r3, r3
 8002674:	b2da      	uxtb	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	69b9      	ldr	r1, [r7, #24]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 f883 	bl	800278c <I2C_WaitOnTXISFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e012      	b.n	80026b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002690:	893b      	ldrh	r3, [r7, #8]
 8002692:	b2da      	uxtb	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	2200      	movs	r2, #0
 80026a2:	2140      	movs	r1, #64	; 0x40
 80026a4:	68f8      	ldr	r0, [r7, #12]
 80026a6:	f000 f831 	bl	800270c <I2C_WaitOnFlagUntilTimeout>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e000      	b.n	80026b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	80002000 	.word	0x80002000

080026c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d103      	bne.n	80026e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2200      	movs	r2, #0
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d007      	beq.n	8002700 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	699a      	ldr	r2, [r3, #24]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	619a      	str	r2, [r3, #24]
  }
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800271c:	e022      	b.n	8002764 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002724:	d01e      	beq.n	8002764 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002726:	f7ff f98b 	bl	8001a40 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d302      	bcc.n	800273c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d113      	bne.n	8002764 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f043 0220 	orr.w	r2, r3, #32
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2220      	movs	r2, #32
 800274c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e00f      	b.n	8002784 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699a      	ldr	r2, [r3, #24]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	4013      	ands	r3, r2
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	429a      	cmp	r2, r3
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	429a      	cmp	r2, r3
 8002780:	d0cd      	beq.n	800271e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002798:	e02c      	b.n	80027f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	68b9      	ldr	r1, [r7, #8]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f870 	bl	8002884 <I2C_IsAcknowledgeFailed>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e02a      	b.n	8002804 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b4:	d01e      	beq.n	80027f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b6:	f7ff f943 	bl	8001a40 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d302      	bcc.n	80027cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d113      	bne.n	80027f4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d0:	f043 0220 	orr.w	r2, r3, #32
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e007      	b.n	8002804 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d1cb      	bne.n	800279a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}

0800280c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002818:	e028      	b.n	800286c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f830 	bl	8002884 <I2C_IsAcknowledgeFailed>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e026      	b.n	800287c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282e:	f7ff f907 	bl	8001a40 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	d302      	bcc.n	8002844 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d113      	bne.n	800286c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	f043 0220 	orr.w	r2, r3, #32
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e007      	b.n	800287c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b20      	cmp	r3, #32
 8002878:	d1cf      	bne.n	800281a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f003 0310 	and.w	r3, r3, #16
 800289a:	2b10      	cmp	r3, #16
 800289c:	d151      	bne.n	8002942 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800289e:	e022      	b.n	80028e6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a6:	d01e      	beq.n	80028e6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028a8:	f7ff f8ca 	bl	8001a40 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d302      	bcc.n	80028be <I2C_IsAcknowledgeFailed+0x3a>
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d113      	bne.n	80028e6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f043 0220 	orr.w	r2, r3, #32
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2220      	movs	r2, #32
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e02e      	b.n	8002944 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b20      	cmp	r3, #32
 80028f2:	d1d5      	bne.n	80028a0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2210      	movs	r2, #16
 80028fa:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2220      	movs	r2, #32
 8002902:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f7ff fedd 	bl	80026c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b0d      	ldr	r3, [pc, #52]	; (800294c <I2C_IsAcknowledgeFailed+0xc8>)
 8002916:	400b      	ands	r3, r1
 8002918:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f043 0204 	orr.w	r2, r3, #4
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e000      	b.n	8002944 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	fe00e800 	.word	0xfe00e800

08002950 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	817b      	strh	r3, [r7, #10]
 800295e:	4613      	mov	r3, r2
 8002960:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685a      	ldr	r2, [r3, #4]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	0d5b      	lsrs	r3, r3, #21
 800296c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002970:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <I2C_TransferConfig+0x58>)
 8002972:	430b      	orrs	r3, r1
 8002974:	43db      	mvns	r3, r3
 8002976:	ea02 0103 	and.w	r1, r2, r3
 800297a:	897b      	ldrh	r3, [r7, #10]
 800297c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002980:	7a7b      	ldrb	r3, [r7, #9]
 8002982:	041b      	lsls	r3, r3, #16
 8002984:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002988:	431a      	orrs	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	431a      	orrs	r2, r3
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	431a      	orrs	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	03ff63ff 	.word	0x03ff63ff

080029ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b20      	cmp	r3, #32
 80029c0:	d138      	bne.n	8002a34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d101      	bne.n	80029d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80029cc:	2302      	movs	r3, #2
 80029ce:	e032      	b.n	8002a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6819      	ldr	r1, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 0201 	orr.w	r2, r2, #1
 8002a1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2220      	movs	r2, #32
 8002a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b085      	sub	sp, #20
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d139      	bne.n	8002acc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e033      	b.n	8002ace <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2224      	movs	r2, #36	; 0x24
 8002a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a94:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	e000      	b.n	8002ace <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002acc:	2302      	movs	r3, #2
  }
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ada:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002adc:	b08f      	sub	sp, #60	; 0x3c
 8002ade:	af0a      	add	r7, sp, #40	; 0x28
 8002ae0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e116      	b.n	8002d1a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d106      	bne.n	8002b0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe fdc2 	bl	8001690 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2203      	movs	r2, #3
 8002b10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d102      	bne.n	8002b26 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f001 feb2 	bl	8004894 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	603b      	str	r3, [r7, #0]
 8002b36:	687e      	ldr	r6, [r7, #4]
 8002b38:	466d      	mov	r5, sp
 8002b3a:	f106 0410 	add.w	r4, r6, #16
 8002b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b46:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b4a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b4e:	1d33      	adds	r3, r6, #4
 8002b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b52:	6838      	ldr	r0, [r7, #0]
 8002b54:	f001 fe46 	bl	80047e4 <USB_CoreInit>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2202      	movs	r2, #2
 8002b62:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e0d7      	b.n	8002d1a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f001 fea0 	bl	80048b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
 8002b7a:	e04a      	b.n	8002c12 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b7c:	7bfa      	ldrb	r2, [r7, #15]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	333d      	adds	r3, #61	; 0x3d
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	333c      	adds	r3, #60	; 0x3c
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	b298      	uxth	r0, r3
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	1a9b      	subs	r3, r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3342      	adds	r3, #66	; 0x42
 8002bb8:	4602      	mov	r2, r0
 8002bba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	333f      	adds	r3, #63	; 0x3f
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	3344      	adds	r3, #68	; 0x44
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3348      	adds	r3, #72	; 0x48
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	3350      	adds	r3, #80	; 0x50
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	73fb      	strb	r3, [r7, #15]
 8002c12:	7bfa      	ldrb	r2, [r7, #15]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d3af      	bcc.n	8002b7c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73fb      	strb	r3, [r7, #15]
 8002c20:	e044      	b.n	8002cac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c22:	7bfa      	ldrb	r2, [r7, #15]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	1a9b      	subs	r3, r3, r2
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	440b      	add	r3, r1
 8002c46:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c4a:	7bfa      	ldrb	r2, [r7, #15]
 8002c4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002c76:	2200      	movs	r2, #0
 8002c78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d3b5      	bcc.n	8002c22 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	687e      	ldr	r6, [r7, #4]
 8002cbe:	466d      	mov	r5, sp
 8002cc0:	f106 0410 	add.w	r4, r6, #16
 8002cc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ccc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cd0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cd4:	1d33      	adds	r3, r6, #4
 8002cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cd8:	6838      	ldr	r0, [r7, #0]
 8002cda:	f001 fe17 	bl	800490c <USB_DevInit>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e014      	b.n	8002d1a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d102      	bne.n	8002d0e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f000 f80b 	bl	8002d24 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f001 ffc9 	bl	8004caa <USB_DevDisconnect>

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d24 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d52:	4b05      	ldr	r3, [pc, #20]	; (8002d68 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	10000003 	.word	0x10000003

08002d6c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d70:	4b05      	ldr	r3, [pc, #20]	; (8002d88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002d76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d7a:	6013      	str	r3, [r2, #0]
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40007000 	.word	0x40007000

08002d8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002d94:	2300      	movs	r3, #0
 8002d96:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e291      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 8087 	beq.w	8002ebe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002db0:	4b96      	ldr	r3, [pc, #600]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 030c 	and.w	r3, r3, #12
 8002db8:	2b04      	cmp	r3, #4
 8002dba:	d00c      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dbc:	4b93      	ldr	r3, [pc, #588]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d112      	bne.n	8002dee <HAL_RCC_OscConfig+0x62>
 8002dc8:	4b90      	ldr	r3, [pc, #576]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd4:	d10b      	bne.n	8002dee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd6:	4b8d      	ldr	r3, [pc, #564]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d06c      	beq.n	8002ebc <HAL_RCC_OscConfig+0x130>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d168      	bne.n	8002ebc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e26b      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df6:	d106      	bne.n	8002e06 <HAL_RCC_OscConfig+0x7a>
 8002df8:	4b84      	ldr	r3, [pc, #528]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a83      	ldr	r2, [pc, #524]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	e02e      	b.n	8002e64 <HAL_RCC_OscConfig+0xd8>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x9c>
 8002e0e:	4b7f      	ldr	r3, [pc, #508]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a7e      	ldr	r2, [pc, #504]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002e14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	4b7c      	ldr	r3, [pc, #496]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a7b      	ldr	r2, [pc, #492]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002e20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	e01d      	b.n	8002e64 <HAL_RCC_OscConfig+0xd8>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCC_OscConfig+0xc0>
 8002e32:	4b76      	ldr	r3, [pc, #472]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a75      	ldr	r2, [pc, #468]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	4b73      	ldr	r3, [pc, #460]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a72      	ldr	r2, [pc, #456]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e48:	6013      	str	r3, [r2, #0]
 8002e4a:	e00b      	b.n	8002e64 <HAL_RCC_OscConfig+0xd8>
 8002e4c:	4b6f      	ldr	r3, [pc, #444]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a6e      	ldr	r2, [pc, #440]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e56:	6013      	str	r3, [r2, #0]
 8002e58:	4b6c      	ldr	r3, [pc, #432]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a6b      	ldr	r2, [pc, #428]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d013      	beq.n	8002e94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6c:	f7fe fde8 	bl	8001a40 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e74:	f7fe fde4 	bl	8001a40 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b64      	cmp	r3, #100	; 0x64
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e21f      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	4b61      	ldr	r3, [pc, #388]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0f0      	beq.n	8002e74 <HAL_RCC_OscConfig+0xe8>
 8002e92:	e014      	b.n	8002ebe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe fdd4 	bl	8001a40 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e9c:	f7fe fdd0 	bl	8001a40 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	; 0x64
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e20b      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eae:	4b57      	ldr	r3, [pc, #348]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f0      	bne.n	8002e9c <HAL_RCC_OscConfig+0x110>
 8002eba:	e000      	b.n	8002ebe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d069      	beq.n	8002f9e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002eca:	4b50      	ldr	r3, [pc, #320]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00b      	beq.n	8002eee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ed6:	4b4d      	ldr	r3, [pc, #308]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b08      	cmp	r3, #8
 8002ee0:	d11c      	bne.n	8002f1c <HAL_RCC_OscConfig+0x190>
 8002ee2:	4b4a      	ldr	r3, [pc, #296]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d116      	bne.n	8002f1c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eee:	4b47      	ldr	r3, [pc, #284]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d005      	beq.n	8002f06 <HAL_RCC_OscConfig+0x17a>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d001      	beq.n	8002f06 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e1df      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f06:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	493d      	ldr	r1, [pc, #244]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002f16:	4313      	orrs	r3, r2
 8002f18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f1a:	e040      	b.n	8002f9e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d023      	beq.n	8002f6c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f24:	4b39      	ldr	r3, [pc, #228]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a38      	ldr	r2, [pc, #224]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f30:	f7fe fd86 	bl	8001a40 <HAL_GetTick>
 8002f34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f36:	e008      	b.n	8002f4a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f38:	f7fe fd82 	bl	8001a40 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	1ad3      	subs	r3, r2, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d901      	bls.n	8002f4a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e1bd      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4a:	4b30      	ldr	r3, [pc, #192]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0f0      	beq.n	8002f38 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f56:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	691b      	ldr	r3, [r3, #16]
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4929      	ldr	r1, [pc, #164]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	600b      	str	r3, [r1, #0]
 8002f6a:	e018      	b.n	8002f9e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a26      	ldr	r2, [pc, #152]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002f72:	f023 0301 	bic.w	r3, r3, #1
 8002f76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f78:	f7fe fd62 	bl	8001a40 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f80:	f7fe fd5e 	bl	8001a40 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e199      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f92:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1f0      	bne.n	8002f80 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d038      	beq.n	800301c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d019      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002fb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fb6:	4a15      	ldr	r2, [pc, #84]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	f7fe fd3f 	bl	8001a40 <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fc6:	f7fe fd3b 	bl	8001a40 <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e176      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002fda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x23a>
 8002fe4:	e01a      	b.n	800301c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_RCC_OscConfig+0x280>)
 8002fec:	f023 0301 	bic.w	r3, r3, #1
 8002ff0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fd25 	bl	8001a40 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ff8:	e00a      	b.n	8003010 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fd21 	bl	8001a40 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d903      	bls.n	8003010 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e15c      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
 800300c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003010:	4b91      	ldr	r3, [pc, #580]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 8003012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ee      	bne.n	8002ffa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80a4 	beq.w	8003172 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800302a:	4b8b      	ldr	r3, [pc, #556]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10d      	bne.n	8003052 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003036:	4b88      	ldr	r3, [pc, #544]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	4a87      	ldr	r2, [pc, #540]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 800303c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003040:	6413      	str	r3, [r2, #64]	; 0x40
 8003042:	4b85      	ldr	r3, [pc, #532]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 8003044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304a:	60bb      	str	r3, [r7, #8]
 800304c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800304e:	2301      	movs	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003052:	4b82      	ldr	r3, [pc, #520]	; (800325c <HAL_RCC_OscConfig+0x4d0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800305a:	2b00      	cmp	r3, #0
 800305c:	d118      	bne.n	8003090 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800305e:	4b7f      	ldr	r3, [pc, #508]	; (800325c <HAL_RCC_OscConfig+0x4d0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a7e      	ldr	r2, [pc, #504]	; (800325c <HAL_RCC_OscConfig+0x4d0>)
 8003064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800306a:	f7fe fce9 	bl	8001a40 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003072:	f7fe fce5 	bl	8001a40 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b64      	cmp	r3, #100	; 0x64
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e120      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003084:	4b75      	ldr	r3, [pc, #468]	; (800325c <HAL_RCC_OscConfig+0x4d0>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d106      	bne.n	80030a6 <HAL_RCC_OscConfig+0x31a>
 8003098:	4b6f      	ldr	r3, [pc, #444]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	4a6e      	ldr	r2, [pc, #440]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	6713      	str	r3, [r2, #112]	; 0x70
 80030a4:	e02d      	b.n	8003102 <HAL_RCC_OscConfig+0x376>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10c      	bne.n	80030c8 <HAL_RCC_OscConfig+0x33c>
 80030ae:	4b6a      	ldr	r3, [pc, #424]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80030b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b2:	4a69      	ldr	r2, [pc, #420]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80030b4:	f023 0301 	bic.w	r3, r3, #1
 80030b8:	6713      	str	r3, [r2, #112]	; 0x70
 80030ba:	4b67      	ldr	r3, [pc, #412]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	4a66      	ldr	r2, [pc, #408]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80030c0:	f023 0304 	bic.w	r3, r3, #4
 80030c4:	6713      	str	r3, [r2, #112]	; 0x70
 80030c6:	e01c      	b.n	8003102 <HAL_RCC_OscConfig+0x376>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b05      	cmp	r3, #5
 80030ce:	d10c      	bne.n	80030ea <HAL_RCC_OscConfig+0x35e>
 80030d0:	4b61      	ldr	r3, [pc, #388]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80030d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d4:	4a60      	ldr	r2, [pc, #384]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80030d6:	f043 0304 	orr.w	r3, r3, #4
 80030da:	6713      	str	r3, [r2, #112]	; 0x70
 80030dc:	4b5e      	ldr	r3, [pc, #376]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e0:	4a5d      	ldr	r2, [pc, #372]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	6713      	str	r3, [r2, #112]	; 0x70
 80030e8:	e00b      	b.n	8003102 <HAL_RCC_OscConfig+0x376>
 80030ea:	4b5b      	ldr	r3, [pc, #364]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	4a5a      	ldr	r2, [pc, #360]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80030f0:	f023 0301 	bic.w	r3, r3, #1
 80030f4:	6713      	str	r3, [r2, #112]	; 0x70
 80030f6:	4b58      	ldr	r3, [pc, #352]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	4a57      	ldr	r2, [pc, #348]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80030fc:	f023 0304 	bic.w	r3, r3, #4
 8003100:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d015      	beq.n	8003136 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310a:	f7fe fc99 	bl	8001a40 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003110:	e00a      	b.n	8003128 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003112:	f7fe fc95 	bl	8001a40 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003120:	4293      	cmp	r3, r2
 8003122:	d901      	bls.n	8003128 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e0ce      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003128:	4b4b      	ldr	r3, [pc, #300]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0ee      	beq.n	8003112 <HAL_RCC_OscConfig+0x386>
 8003134:	e014      	b.n	8003160 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003136:	f7fe fc83 	bl	8001a40 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313c:	e00a      	b.n	8003154 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313e:	f7fe fc7f 	bl	8001a40 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f241 3288 	movw	r2, #5000	; 0x1388
 800314c:	4293      	cmp	r3, r2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e0b8      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003154:	4b40      	ldr	r3, [pc, #256]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ee      	bne.n	800313e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003160:	7dfb      	ldrb	r3, [r7, #23]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d105      	bne.n	8003172 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003166:	4b3c      	ldr	r3, [pc, #240]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	4a3b      	ldr	r2, [pc, #236]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 800316c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003170:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80a4 	beq.w	80032c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800317c:	4b36      	ldr	r3, [pc, #216]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f003 030c 	and.w	r3, r3, #12
 8003184:	2b08      	cmp	r3, #8
 8003186:	d06b      	beq.n	8003260 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b02      	cmp	r3, #2
 800318e:	d149      	bne.n	8003224 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003190:	4b31      	ldr	r3, [pc, #196]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a30      	ldr	r2, [pc, #192]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 8003196:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800319a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319c:	f7fe fc50 	bl	8001a40 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031a4:	f7fe fc4c 	bl	8001a40 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e087      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	4b28      	ldr	r3, [pc, #160]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	019b      	lsls	r3, r3, #6
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d8:	085b      	lsrs	r3, r3, #1
 80031da:	3b01      	subs	r3, #1
 80031dc:	041b      	lsls	r3, r3, #16
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	061b      	lsls	r3, r3, #24
 80031e6:	4313      	orrs	r3, r2
 80031e8:	4a1b      	ldr	r2, [pc, #108]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80031ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031f0:	4b19      	ldr	r3, [pc, #100]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a18      	ldr	r2, [pc, #96]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80031f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe fc20 	bl	8001a40 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003204:	f7fe fc1c 	bl	8001a40 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e057      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x478>
 8003222:	e04f      	b.n	80032c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0b      	ldr	r2, [pc, #44]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 800322a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800322e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe fc06 	bl	8001a40 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003238:	f7fe fc02 	bl	8001a40 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e03d      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324a:	4b03      	ldr	r3, [pc, #12]	; (8003258 <HAL_RCC_OscConfig+0x4cc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x4ac>
 8003256:	e035      	b.n	80032c4 <HAL_RCC_OscConfig+0x538>
 8003258:	40023800 	.word	0x40023800
 800325c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x544>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d028      	beq.n	80032c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003278:	429a      	cmp	r2, r3
 800327a:	d121      	bne.n	80032c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003286:	429a      	cmp	r2, r3
 8003288:	d11a      	bne.n	80032c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003290:	4013      	ands	r3, r2
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003296:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003298:	4293      	cmp	r3, r2
 800329a:	d111      	bne.n	80032c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	085b      	lsrs	r3, r3, #1
 80032a8:	3b01      	subs	r3, #1
 80032aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d107      	bne.n	80032c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800

080032d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0d0      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032ec:	4b6a      	ldr	r3, [pc, #424]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	683a      	ldr	r2, [r7, #0]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d910      	bls.n	800331c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032fa:	4b67      	ldr	r3, [pc, #412]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f023 020f 	bic.w	r2, r3, #15
 8003302:	4965      	ldr	r1, [pc, #404]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	4313      	orrs	r3, r2
 8003308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800330a:	4b63      	ldr	r3, [pc, #396]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	429a      	cmp	r2, r3
 8003316:	d001      	beq.n	800331c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0b8      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d020      	beq.n	800336a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003334:	4b59      	ldr	r3, [pc, #356]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a58      	ldr	r2, [pc, #352]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 800333a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800333e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d005      	beq.n	8003358 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800334c:	4b53      	ldr	r3, [pc, #332]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	4a52      	ldr	r2, [pc, #328]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003352:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003356:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003358:	4b50      	ldr	r3, [pc, #320]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	494d      	ldr	r1, [pc, #308]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d040      	beq.n	80033f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d107      	bne.n	800338e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800337e:	4b47      	ldr	r3, [pc, #284]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d115      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e07f      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d107      	bne.n	80033a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003396:	4b41      	ldr	r3, [pc, #260]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e073      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033a6:	4b3d      	ldr	r3, [pc, #244]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06b      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033b6:	4b39      	ldr	r3, [pc, #228]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f023 0203 	bic.w	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4936      	ldr	r1, [pc, #216]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033c8:	f7fe fb3a 	bl	8001a40 <HAL_GetTick>
 80033cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	e00a      	b.n	80033e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d0:	f7fe fb36 	bl	8001a40 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	f241 3288 	movw	r2, #5000	; 0x1388
 80033de:	4293      	cmp	r3, r2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e053      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033e6:	4b2d      	ldr	r3, [pc, #180]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f003 020c 	and.w	r2, r3, #12
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d1eb      	bne.n	80033d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033f8:	4b27      	ldr	r3, [pc, #156]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d210      	bcs.n	8003428 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b24      	ldr	r3, [pc, #144]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 020f 	bic.w	r2, r3, #15
 800340e:	4922      	ldr	r1, [pc, #136]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b20      	ldr	r3, [pc, #128]	; (8003498 <HAL_RCC_ClockConfig+0x1c4>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 030f 	and.w	r3, r3, #15
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e032      	b.n	800348e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	4916      	ldr	r1, [pc, #88]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d009      	beq.n	8003466 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003452:	4b12      	ldr	r3, [pc, #72]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	490e      	ldr	r1, [pc, #56]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 8003462:	4313      	orrs	r3, r2
 8003464:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003466:	f000 f821 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 800346a:	4602      	mov	r2, r0
 800346c:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_ClockConfig+0x1c8>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	490a      	ldr	r1, [pc, #40]	; (80034a0 <HAL_RCC_ClockConfig+0x1cc>)
 8003478:	5ccb      	ldrb	r3, [r1, r3]
 800347a:	fa22 f303 	lsr.w	r3, r2, r3
 800347e:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_RCC_ClockConfig+0x1d4>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4618      	mov	r0, r3
 8003488:	f7fe fa96 	bl	80019b8 <HAL_InitTick>

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40023c00 	.word	0x40023c00
 800349c:	40023800 	.word	0x40023800
 80034a0:	08007b0c 	.word	0x08007b0c
 80034a4:	20000000 	.word	0x20000000
 80034a8:	20000004 	.word	0x20000004

080034ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80034b4:	2300      	movs	r3, #0
 80034b6:	607b      	str	r3, [r7, #4]
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	2300      	movs	r3, #0
 80034be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034c4:	4b67      	ldr	r3, [pc, #412]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f003 030c 	and.w	r3, r3, #12
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d00d      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x40>
 80034d0:	2b08      	cmp	r3, #8
 80034d2:	f200 80bd 	bhi.w	8003650 <HAL_RCC_GetSysClockFreq+0x1a4>
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d002      	beq.n	80034e0 <HAL_RCC_GetSysClockFreq+0x34>
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d003      	beq.n	80034e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034de:	e0b7      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e0:	4b61      	ldr	r3, [pc, #388]	; (8003668 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80034e2:	60bb      	str	r3, [r7, #8]
      break;
 80034e4:	e0b7      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034e6:	4b61      	ldr	r3, [pc, #388]	; (800366c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80034e8:	60bb      	str	r3, [r7, #8]
      break;
 80034ea:	e0b4      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034ec:	4b5d      	ldr	r3, [pc, #372]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034f4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80034f6:	4b5b      	ldr	r3, [pc, #364]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d04d      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003502:	4b58      	ldr	r3, [pc, #352]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	099b      	lsrs	r3, r3, #6
 8003508:	461a      	mov	r2, r3
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	ea02 0800 	and.w	r8, r2, r0
 800351a:	ea03 0901 	and.w	r9, r3, r1
 800351e:	4640      	mov	r0, r8
 8003520:	4649      	mov	r1, r9
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	014b      	lsls	r3, r1, #5
 800352c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003530:	0142      	lsls	r2, r0, #5
 8003532:	4610      	mov	r0, r2
 8003534:	4619      	mov	r1, r3
 8003536:	ebb0 0008 	subs.w	r0, r0, r8
 800353a:	eb61 0109 	sbc.w	r1, r1, r9
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	018b      	lsls	r3, r1, #6
 8003548:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800354c:	0182      	lsls	r2, r0, #6
 800354e:	1a12      	subs	r2, r2, r0
 8003550:	eb63 0301 	sbc.w	r3, r3, r1
 8003554:	f04f 0000 	mov.w	r0, #0
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	00d9      	lsls	r1, r3, #3
 800355e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003562:	00d0      	lsls	r0, r2, #3
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	eb12 0208 	adds.w	r2, r2, r8
 800356c:	eb43 0309 	adc.w	r3, r3, r9
 8003570:	f04f 0000 	mov.w	r0, #0
 8003574:	f04f 0100 	mov.w	r1, #0
 8003578:	0259      	lsls	r1, r3, #9
 800357a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800357e:	0250      	lsls	r0, r2, #9
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	461a      	mov	r2, r3
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	f7fd fb2a 	bl	8000be8 <__aeabi_uldivmod>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	4613      	mov	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e04a      	b.n	8003634 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359e:	4b31      	ldr	r3, [pc, #196]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	099b      	lsrs	r3, r3, #6
 80035a4:	461a      	mov	r2, r3
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035ae:	f04f 0100 	mov.w	r1, #0
 80035b2:	ea02 0400 	and.w	r4, r2, r0
 80035b6:	ea03 0501 	and.w	r5, r3, r1
 80035ba:	4620      	mov	r0, r4
 80035bc:	4629      	mov	r1, r5
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	014b      	lsls	r3, r1, #5
 80035c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035cc:	0142      	lsls	r2, r0, #5
 80035ce:	4610      	mov	r0, r2
 80035d0:	4619      	mov	r1, r3
 80035d2:	1b00      	subs	r0, r0, r4
 80035d4:	eb61 0105 	sbc.w	r1, r1, r5
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	f04f 0300 	mov.w	r3, #0
 80035e0:	018b      	lsls	r3, r1, #6
 80035e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035e6:	0182      	lsls	r2, r0, #6
 80035e8:	1a12      	subs	r2, r2, r0
 80035ea:	eb63 0301 	sbc.w	r3, r3, r1
 80035ee:	f04f 0000 	mov.w	r0, #0
 80035f2:	f04f 0100 	mov.w	r1, #0
 80035f6:	00d9      	lsls	r1, r3, #3
 80035f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035fc:	00d0      	lsls	r0, r2, #3
 80035fe:	4602      	mov	r2, r0
 8003600:	460b      	mov	r3, r1
 8003602:	1912      	adds	r2, r2, r4
 8003604:	eb45 0303 	adc.w	r3, r5, r3
 8003608:	f04f 0000 	mov.w	r0, #0
 800360c:	f04f 0100 	mov.w	r1, #0
 8003610:	0299      	lsls	r1, r3, #10
 8003612:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003616:	0290      	lsls	r0, r2, #10
 8003618:	4602      	mov	r2, r0
 800361a:	460b      	mov	r3, r1
 800361c:	4610      	mov	r0, r2
 800361e:	4619      	mov	r1, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	461a      	mov	r2, r3
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	f7fd fade 	bl	8000be8 <__aeabi_uldivmod>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4613      	mov	r3, r2
 8003632:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003634:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	0c1b      	lsrs	r3, r3, #16
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	3301      	adds	r3, #1
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	fbb2 f3f3 	udiv	r3, r2, r3
 800364c:	60bb      	str	r3, [r7, #8]
      break;
 800364e:	e002      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003650:	4b05      	ldr	r3, [pc, #20]	; (8003668 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003652:	60bb      	str	r3, [r7, #8]
      break;
 8003654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003656:	68bb      	ldr	r3, [r7, #8]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	00f42400 	.word	0x00f42400
 800366c:	007a1200 	.word	0x007a1200

08003670 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_RCC_GetHCLKFreq+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000000 	.word	0x20000000

08003688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800368c:	f7ff fff0 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	0a9b      	lsrs	r3, r3, #10
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	4903      	ldr	r1, [pc, #12]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40023800 	.word	0x40023800
 80036ac:	08007b1c 	.word	0x08007b1c

080036b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036b4:	f7ff ffdc 	bl	8003670 <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	0b5b      	lsrs	r3, r3, #13
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4903      	ldr	r1, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40023800 	.word	0x40023800
 80036d4:	08007b1c 	.word	0x08007b1c

080036d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d012      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003700:	4b69      	ldr	r3, [pc, #420]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a68      	ldr	r2, [pc, #416]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003706:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800370a:	6093      	str	r3, [r2, #8]
 800370c:	4b66      	ldr	r3, [pc, #408]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003714:	4964      	ldr	r1, [pc, #400]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003722:	2301      	movs	r3, #1
 8003724:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d017      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003732:	4b5d      	ldr	r3, [pc, #372]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003734:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003738:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003740:	4959      	ldr	r1, [pc, #356]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003742:	4313      	orrs	r3, r2
 8003744:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003750:	d101      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003752:	2301      	movs	r3, #1
 8003754:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800375e:	2301      	movs	r3, #1
 8003760:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d017      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800376e:	4b4e      	ldr	r3, [pc, #312]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003774:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	494a      	ldr	r1, [pc, #296]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378c:	d101      	bne.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800378e:	2301      	movs	r3, #1
 8003790:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800379a:	2301      	movs	r3, #1
 800379c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0320 	and.w	r3, r3, #32
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 808b 	beq.w	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037bc:	4b3a      	ldr	r3, [pc, #232]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	4a39      	ldr	r2, [pc, #228]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037c6:	6413      	str	r3, [r2, #64]	; 0x40
 80037c8:	4b37      	ldr	r3, [pc, #220]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037d4:	4b35      	ldr	r3, [pc, #212]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a34      	ldr	r2, [pc, #208]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e0:	f7fe f92e 	bl	8001a40 <HAL_GetTick>
 80037e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037e6:	e008      	b.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e8:	f7fe f92a 	bl	8001a40 <HAL_GetTick>
 80037ec:	4602      	mov	r2, r0
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	2b64      	cmp	r3, #100	; 0x64
 80037f4:	d901      	bls.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e357      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037fa:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0f0      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003806:	4b28      	ldr	r3, [pc, #160]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800380e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d035      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	693a      	ldr	r2, [r7, #16]
 8003820:	429a      	cmp	r2, r3
 8003822:	d02e      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003824:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800382e:	4b1e      	ldr	r3, [pc, #120]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	4a1d      	ldr	r2, [pc, #116]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003838:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800383a:	4b1b      	ldr	r3, [pc, #108]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	4a1a      	ldr	r2, [pc, #104]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003840:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003844:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003846:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800384c:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d114      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7fe f8f2 	bl	8001a40 <HAL_GetTick>
 800385c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fe f8ee 	bl	8001a40 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	; 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e319      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	4b0c      	ldr	r3, [pc, #48]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ee      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800388e:	d111      	bne.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800389c:	4b04      	ldr	r3, [pc, #16]	; (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800389e:	400b      	ands	r3, r1
 80038a0:	4901      	ldr	r1, [pc, #4]	; (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
 80038a6:	e00b      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038a8:	40023800 	.word	0x40023800
 80038ac:	40007000 	.word	0x40007000
 80038b0:	0ffffcff 	.word	0x0ffffcff
 80038b4:	4bb1      	ldr	r3, [pc, #708]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	4ab0      	ldr	r2, [pc, #704]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038be:	6093      	str	r3, [r2, #8]
 80038c0:	4bae      	ldr	r3, [pc, #696]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038cc:	49ab      	ldr	r1, [pc, #684]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0310 	and.w	r3, r3, #16
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d010      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038de:	4ba7      	ldr	r3, [pc, #668]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038e4:	4aa5      	ldr	r2, [pc, #660]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80038ee:	4ba3      	ldr	r3, [pc, #652]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	49a0      	ldr	r1, [pc, #640]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800390c:	4b9b      	ldr	r3, [pc, #620]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800391a:	4998      	ldr	r1, [pc, #608]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800392e:	4b93      	ldr	r3, [pc, #588]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800393c:	498f      	ldr	r1, [pc, #572]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003950:	4b8a      	ldr	r3, [pc, #552]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800395e:	4987      	ldr	r1, [pc, #540]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003972:	4b82      	ldr	r3, [pc, #520]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003980:	497e      	ldr	r1, [pc, #504]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003994:	4b79      	ldr	r3, [pc, #484]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f023 0203 	bic.w	r2, r3, #3
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a2:	4976      	ldr	r1, [pc, #472]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039b6:	4b71      	ldr	r3, [pc, #452]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	f023 020c 	bic.w	r2, r3, #12
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c4:	496d      	ldr	r1, [pc, #436]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039d8:	4b68      	ldr	r3, [pc, #416]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e6:	4965      	ldr	r1, [pc, #404]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039fa:	4b60      	ldr	r3, [pc, #384]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a00:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	495c      	ldr	r1, [pc, #368]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a1c:	4b57      	ldr	r3, [pc, #348]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a22:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2a:	4954      	ldr	r1, [pc, #336]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a3e:	4b4f      	ldr	r3, [pc, #316]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	494b      	ldr	r1, [pc, #300]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a60:	4b46      	ldr	r3, [pc, #280]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	4943      	ldr	r1, [pc, #268]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a82:	4b3e      	ldr	r3, [pc, #248]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a90:	493a      	ldr	r1, [pc, #232]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003aa4:	4b35      	ldr	r3, [pc, #212]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aaa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab2:	4932      	ldr	r1, [pc, #200]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d011      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ac6:	4b2d      	ldr	r3, [pc, #180]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ad4:	4929      	ldr	r1, [pc, #164]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003ae4:	d101      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00a      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b06:	4b1d      	ldr	r3, [pc, #116]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b14:	4919      	ldr	r1, [pc, #100]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00b      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b28:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b38:	4910      	ldr	r1, [pc, #64]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d006      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 80d9 	beq.w	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003b5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b60:	f7fd ff6e 	bl	8001a40 <HAL_GetTick>
 8003b64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b66:	e00b      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b68:	f7fd ff6a 	bl	8001a40 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d904      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e197      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003b7a:	bf00      	nop
 8003b7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b80:	4b6c      	ldr	r3, [pc, #432]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1ed      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0301 	and.w	r3, r3, #1
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d021      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d11d      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ba0:	4b64      	ldr	r3, [pc, #400]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ba6:	0c1b      	lsrs	r3, r3, #16
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003bae:	4b61      	ldr	r3, [pc, #388]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bb4:	0e1b      	lsrs	r3, r3, #24
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	019a      	lsls	r2, r3, #6
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	041b      	lsls	r3, r3, #16
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	061b      	lsls	r3, r3, #24
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	071b      	lsls	r3, r3, #28
 8003bd4:	4957      	ldr	r1, [pc, #348]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d004      	beq.n	8003bf2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bf0:	d00a      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d02e      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c06:	d129      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c08:	4b4a      	ldr	r3, [pc, #296]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0e:	0c1b      	lsrs	r3, r3, #16
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c16:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c1c:	0f1b      	lsrs	r3, r3, #28
 8003c1e:	f003 0307 	and.w	r3, r3, #7
 8003c22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	019a      	lsls	r2, r3, #6
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	431a      	orrs	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	071b      	lsls	r3, r3, #28
 8003c3c:	493d      	ldr	r1, [pc, #244]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003c44:	4b3b      	ldr	r3, [pc, #236]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c4a:	f023 021f 	bic.w	r2, r3, #31
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	3b01      	subs	r3, #1
 8003c54:	4937      	ldr	r1, [pc, #220]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01d      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c68:	4b32      	ldr	r3, [pc, #200]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c6e:	0e1b      	lsrs	r3, r3, #24
 8003c70:	f003 030f 	and.w	r3, r3, #15
 8003c74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c76:	4b2f      	ldr	r3, [pc, #188]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c7c:	0f1b      	lsrs	r3, r3, #28
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	019a      	lsls	r2, r3, #6
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	041b      	lsls	r3, r3, #16
 8003c90:	431a      	orrs	r2, r3
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	061b      	lsls	r3, r3, #24
 8003c96:	431a      	orrs	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	071b      	lsls	r3, r3, #28
 8003c9c:	4925      	ldr	r1, [pc, #148]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d011      	beq.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	019a      	lsls	r2, r3, #6
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	041b      	lsls	r3, r3, #16
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	061b      	lsls	r3, r3, #24
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	071b      	lsls	r3, r3, #28
 8003ccc:	4919      	ldr	r1, [pc, #100]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003cd4:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cda:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ce0:	f7fd feae 	bl	8001a40 <HAL_GetTick>
 8003ce4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ce8:	f7fd feaa 	bl	8001a40 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b64      	cmp	r3, #100	; 0x64
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e0d7      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cfa:	4b0e      	ldr	r3, [pc, #56]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	f040 80cd 	bne.w	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d0e:	4b09      	ldr	r3, [pc, #36]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a08      	ldr	r2, [pc, #32]	; (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003d14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d1a:	f7fd fe91 	bl	8001a40 <HAL_GetTick>
 8003d1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d20:	e00a      	b.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d22:	f7fd fe8d 	bl	8001a40 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b64      	cmp	r3, #100	; 0x64
 8003d2e:	d903      	bls.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e0ba      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003d34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d38:	4b5e      	ldr	r3, [pc, #376]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d44:	d0ed      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d009      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d02e      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d12a      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d6e:	4b51      	ldr	r3, [pc, #324]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003d7c:	4b4d      	ldr	r3, [pc, #308]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d82:	0f1b      	lsrs	r3, r3, #28
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	019a      	lsls	r2, r3, #6
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	041b      	lsls	r3, r3, #16
 8003d94:	431a      	orrs	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	061b      	lsls	r3, r3, #24
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	071b      	lsls	r3, r3, #28
 8003da2:	4944      	ldr	r1, [pc, #272]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003daa:	4b42      	ldr	r3, [pc, #264]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003db0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db8:	3b01      	subs	r3, #1
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	493d      	ldr	r1, [pc, #244]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d022      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dd8:	d11d      	bne.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003dda:	4b36      	ldr	r3, [pc, #216]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	0e1b      	lsrs	r3, r3, #24
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003de8:	4b32      	ldr	r3, [pc, #200]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dee:	0f1b      	lsrs	r3, r3, #28
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	019a      	lsls	r2, r3, #6
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	431a      	orrs	r2, r3
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	061b      	lsls	r3, r3, #24
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	071b      	lsls	r3, r3, #28
 8003e0e:	4929      	ldr	r1, [pc, #164]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d028      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e22:	4b24      	ldr	r3, [pc, #144]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e28:	0e1b      	lsrs	r3, r3, #24
 8003e2a:	f003 030f 	and.w	r3, r3, #15
 8003e2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003e30:	4b20      	ldr	r3, [pc, #128]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	0c1b      	lsrs	r3, r3, #16
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	019a      	lsls	r2, r3, #6
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	061b      	lsls	r3, r3, #24
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	69db      	ldr	r3, [r3, #28]
 8003e54:	071b      	lsls	r3, r3, #28
 8003e56:	4917      	ldr	r1, [pc, #92]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	4911      	ldr	r1, [pc, #68]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e74:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a0e      	ldr	r2, [pc, #56]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e80:	f7fd fdde 	bl	8001a40 <HAL_GetTick>
 8003e84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003e88:	f7fd fdda 	bl	8001a40 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	; 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e007      	b.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e9a:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea6:	d1ef      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3720      	adds	r7, #32
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800

08003eb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e040      	b.n	8003f4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d106      	bne.n	8003ee0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7fd fb94 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2224      	movs	r2, #36	; 0x24
 8003ee4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 0201 	bic.w	r2, r2, #1
 8003ef4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f8c0 	bl	800407c <UART_SetConfig>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e022      	b.n	8003f4c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fb16 	bl	8004540 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0201 	orr.w	r2, r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fb9d 	bl	8004684 <UART_CheckIdleState>
 8003f4a:	4603      	mov	r3, r0
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3708      	adds	r7, #8
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}

08003f54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b08a      	sub	sp, #40	; 0x28
 8003f58:	af02      	add	r7, sp, #8
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	4613      	mov	r3, r2
 8003f62:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f68:	2b20      	cmp	r3, #32
 8003f6a:	f040 8081 	bne.w	8004070 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d002      	beq.n	8003f7a <HAL_UART_Transmit+0x26>
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e079      	b.n	8004072 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Transmit+0x38>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e072      	b.n	8004072 <HAL_UART_Transmit+0x11e>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2221      	movs	r2, #33	; 0x21
 8003fa0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fa2:	f7fd fd4d 	bl	8001a40 <HAL_GetTick>
 8003fa6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	88fa      	ldrh	r2, [r7, #6]
 8003fac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	88fa      	ldrh	r2, [r7, #6]
 8003fb4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fc0:	d108      	bne.n	8003fd4 <HAL_UART_Transmit+0x80>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d104      	bne.n	8003fd4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	61bb      	str	r3, [r7, #24]
 8003fd2:	e003      	b.n	8003fdc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003fe4:	e02c      	b.n	8004040 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2200      	movs	r2, #0
 8003fee:	2180      	movs	r1, #128	; 0x80
 8003ff0:	68f8      	ldr	r0, [r7, #12]
 8003ff2:	f000 fb7a 	bl	80046ea <UART_WaitOnFlagUntilTimeout>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e038      	b.n	8004072 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004014:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	3302      	adds	r3, #2
 800401a:	61bb      	str	r3, [r7, #24]
 800401c:	e007      	b.n	800402e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	781a      	ldrb	r2, [r3, #0]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	3301      	adds	r3, #1
 800402c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004034:	b29b      	uxth	r3, r3
 8004036:	3b01      	subs	r3, #1
 8004038:	b29a      	uxth	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d1cc      	bne.n	8003fe6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2200      	movs	r2, #0
 8004054:	2140      	movs	r1, #64	; 0x40
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fb47 	bl	80046ea <UART_WaitOnFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e005      	b.n	8004072 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	e000      	b.n	8004072 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8004070:	2302      	movs	r3, #2
  }
}
 8004072:	4618      	mov	r0, r3
 8004074:	3720      	adds	r7, #32
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b088      	sub	sp, #32
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689a      	ldr	r2, [r3, #8]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	4313      	orrs	r3, r2
 800409e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	4ba7      	ldr	r3, [pc, #668]	; (8004344 <UART_SetConfig+0x2c8>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	6979      	ldr	r1, [r7, #20]
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a1b      	ldr	r3, [r3, #32]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a95      	ldr	r2, [pc, #596]	; (8004348 <UART_SetConfig+0x2cc>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d120      	bne.n	800413a <UART_SetConfig+0xbe>
 80040f8:	4b94      	ldr	r3, [pc, #592]	; (800434c <UART_SetConfig+0x2d0>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	2b03      	cmp	r3, #3
 8004104:	d816      	bhi.n	8004134 <UART_SetConfig+0xb8>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <UART_SetConfig+0x90>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	0800411d 	.word	0x0800411d
 8004110:	08004129 	.word	0x08004129
 8004114:	08004123 	.word	0x08004123
 8004118:	0800412f 	.word	0x0800412f
 800411c:	2301      	movs	r3, #1
 800411e:	77fb      	strb	r3, [r7, #31]
 8004120:	e14f      	b.n	80043c2 <UART_SetConfig+0x346>
 8004122:	2302      	movs	r3, #2
 8004124:	77fb      	strb	r3, [r7, #31]
 8004126:	e14c      	b.n	80043c2 <UART_SetConfig+0x346>
 8004128:	2304      	movs	r3, #4
 800412a:	77fb      	strb	r3, [r7, #31]
 800412c:	e149      	b.n	80043c2 <UART_SetConfig+0x346>
 800412e:	2308      	movs	r3, #8
 8004130:	77fb      	strb	r3, [r7, #31]
 8004132:	e146      	b.n	80043c2 <UART_SetConfig+0x346>
 8004134:	2310      	movs	r3, #16
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e143      	b.n	80043c2 <UART_SetConfig+0x346>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a84      	ldr	r2, [pc, #528]	; (8004350 <UART_SetConfig+0x2d4>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d132      	bne.n	80041aa <UART_SetConfig+0x12e>
 8004144:	4b81      	ldr	r3, [pc, #516]	; (800434c <UART_SetConfig+0x2d0>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	f003 030c 	and.w	r3, r3, #12
 800414e:	2b0c      	cmp	r3, #12
 8004150:	d828      	bhi.n	80041a4 <UART_SetConfig+0x128>
 8004152:	a201      	add	r2, pc, #4	; (adr r2, 8004158 <UART_SetConfig+0xdc>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	0800418d 	.word	0x0800418d
 800415c:	080041a5 	.word	0x080041a5
 8004160:	080041a5 	.word	0x080041a5
 8004164:	080041a5 	.word	0x080041a5
 8004168:	08004199 	.word	0x08004199
 800416c:	080041a5 	.word	0x080041a5
 8004170:	080041a5 	.word	0x080041a5
 8004174:	080041a5 	.word	0x080041a5
 8004178:	08004193 	.word	0x08004193
 800417c:	080041a5 	.word	0x080041a5
 8004180:	080041a5 	.word	0x080041a5
 8004184:	080041a5 	.word	0x080041a5
 8004188:	0800419f 	.word	0x0800419f
 800418c:	2300      	movs	r3, #0
 800418e:	77fb      	strb	r3, [r7, #31]
 8004190:	e117      	b.n	80043c2 <UART_SetConfig+0x346>
 8004192:	2302      	movs	r3, #2
 8004194:	77fb      	strb	r3, [r7, #31]
 8004196:	e114      	b.n	80043c2 <UART_SetConfig+0x346>
 8004198:	2304      	movs	r3, #4
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e111      	b.n	80043c2 <UART_SetConfig+0x346>
 800419e:	2308      	movs	r3, #8
 80041a0:	77fb      	strb	r3, [r7, #31]
 80041a2:	e10e      	b.n	80043c2 <UART_SetConfig+0x346>
 80041a4:	2310      	movs	r3, #16
 80041a6:	77fb      	strb	r3, [r7, #31]
 80041a8:	e10b      	b.n	80043c2 <UART_SetConfig+0x346>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a69      	ldr	r2, [pc, #420]	; (8004354 <UART_SetConfig+0x2d8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d120      	bne.n	80041f6 <UART_SetConfig+0x17a>
 80041b4:	4b65      	ldr	r3, [pc, #404]	; (800434c <UART_SetConfig+0x2d0>)
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041be:	2b30      	cmp	r3, #48	; 0x30
 80041c0:	d013      	beq.n	80041ea <UART_SetConfig+0x16e>
 80041c2:	2b30      	cmp	r3, #48	; 0x30
 80041c4:	d814      	bhi.n	80041f0 <UART_SetConfig+0x174>
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d009      	beq.n	80041de <UART_SetConfig+0x162>
 80041ca:	2b20      	cmp	r3, #32
 80041cc:	d810      	bhi.n	80041f0 <UART_SetConfig+0x174>
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <UART_SetConfig+0x15c>
 80041d2:	2b10      	cmp	r3, #16
 80041d4:	d006      	beq.n	80041e4 <UART_SetConfig+0x168>
 80041d6:	e00b      	b.n	80041f0 <UART_SetConfig+0x174>
 80041d8:	2300      	movs	r3, #0
 80041da:	77fb      	strb	r3, [r7, #31]
 80041dc:	e0f1      	b.n	80043c2 <UART_SetConfig+0x346>
 80041de:	2302      	movs	r3, #2
 80041e0:	77fb      	strb	r3, [r7, #31]
 80041e2:	e0ee      	b.n	80043c2 <UART_SetConfig+0x346>
 80041e4:	2304      	movs	r3, #4
 80041e6:	77fb      	strb	r3, [r7, #31]
 80041e8:	e0eb      	b.n	80043c2 <UART_SetConfig+0x346>
 80041ea:	2308      	movs	r3, #8
 80041ec:	77fb      	strb	r3, [r7, #31]
 80041ee:	e0e8      	b.n	80043c2 <UART_SetConfig+0x346>
 80041f0:	2310      	movs	r3, #16
 80041f2:	77fb      	strb	r3, [r7, #31]
 80041f4:	e0e5      	b.n	80043c2 <UART_SetConfig+0x346>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a57      	ldr	r2, [pc, #348]	; (8004358 <UART_SetConfig+0x2dc>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d120      	bne.n	8004242 <UART_SetConfig+0x1c6>
 8004200:	4b52      	ldr	r3, [pc, #328]	; (800434c <UART_SetConfig+0x2d0>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800420a:	2bc0      	cmp	r3, #192	; 0xc0
 800420c:	d013      	beq.n	8004236 <UART_SetConfig+0x1ba>
 800420e:	2bc0      	cmp	r3, #192	; 0xc0
 8004210:	d814      	bhi.n	800423c <UART_SetConfig+0x1c0>
 8004212:	2b80      	cmp	r3, #128	; 0x80
 8004214:	d009      	beq.n	800422a <UART_SetConfig+0x1ae>
 8004216:	2b80      	cmp	r3, #128	; 0x80
 8004218:	d810      	bhi.n	800423c <UART_SetConfig+0x1c0>
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <UART_SetConfig+0x1a8>
 800421e:	2b40      	cmp	r3, #64	; 0x40
 8004220:	d006      	beq.n	8004230 <UART_SetConfig+0x1b4>
 8004222:	e00b      	b.n	800423c <UART_SetConfig+0x1c0>
 8004224:	2300      	movs	r3, #0
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e0cb      	b.n	80043c2 <UART_SetConfig+0x346>
 800422a:	2302      	movs	r3, #2
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e0c8      	b.n	80043c2 <UART_SetConfig+0x346>
 8004230:	2304      	movs	r3, #4
 8004232:	77fb      	strb	r3, [r7, #31]
 8004234:	e0c5      	b.n	80043c2 <UART_SetConfig+0x346>
 8004236:	2308      	movs	r3, #8
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e0c2      	b.n	80043c2 <UART_SetConfig+0x346>
 800423c:	2310      	movs	r3, #16
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e0bf      	b.n	80043c2 <UART_SetConfig+0x346>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a45      	ldr	r2, [pc, #276]	; (800435c <UART_SetConfig+0x2e0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d125      	bne.n	8004298 <UART_SetConfig+0x21c>
 800424c:	4b3f      	ldr	r3, [pc, #252]	; (800434c <UART_SetConfig+0x2d0>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004252:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800425a:	d017      	beq.n	800428c <UART_SetConfig+0x210>
 800425c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004260:	d817      	bhi.n	8004292 <UART_SetConfig+0x216>
 8004262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004266:	d00b      	beq.n	8004280 <UART_SetConfig+0x204>
 8004268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800426c:	d811      	bhi.n	8004292 <UART_SetConfig+0x216>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <UART_SetConfig+0x1fe>
 8004272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004276:	d006      	beq.n	8004286 <UART_SetConfig+0x20a>
 8004278:	e00b      	b.n	8004292 <UART_SetConfig+0x216>
 800427a:	2300      	movs	r3, #0
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e0a0      	b.n	80043c2 <UART_SetConfig+0x346>
 8004280:	2302      	movs	r3, #2
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e09d      	b.n	80043c2 <UART_SetConfig+0x346>
 8004286:	2304      	movs	r3, #4
 8004288:	77fb      	strb	r3, [r7, #31]
 800428a:	e09a      	b.n	80043c2 <UART_SetConfig+0x346>
 800428c:	2308      	movs	r3, #8
 800428e:	77fb      	strb	r3, [r7, #31]
 8004290:	e097      	b.n	80043c2 <UART_SetConfig+0x346>
 8004292:	2310      	movs	r3, #16
 8004294:	77fb      	strb	r3, [r7, #31]
 8004296:	e094      	b.n	80043c2 <UART_SetConfig+0x346>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a30      	ldr	r2, [pc, #192]	; (8004360 <UART_SetConfig+0x2e4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d125      	bne.n	80042ee <UART_SetConfig+0x272>
 80042a2:	4b2a      	ldr	r3, [pc, #168]	; (800434c <UART_SetConfig+0x2d0>)
 80042a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042b0:	d017      	beq.n	80042e2 <UART_SetConfig+0x266>
 80042b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042b6:	d817      	bhi.n	80042e8 <UART_SetConfig+0x26c>
 80042b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042bc:	d00b      	beq.n	80042d6 <UART_SetConfig+0x25a>
 80042be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c2:	d811      	bhi.n	80042e8 <UART_SetConfig+0x26c>
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <UART_SetConfig+0x254>
 80042c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042cc:	d006      	beq.n	80042dc <UART_SetConfig+0x260>
 80042ce:	e00b      	b.n	80042e8 <UART_SetConfig+0x26c>
 80042d0:	2301      	movs	r3, #1
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e075      	b.n	80043c2 <UART_SetConfig+0x346>
 80042d6:	2302      	movs	r3, #2
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	e072      	b.n	80043c2 <UART_SetConfig+0x346>
 80042dc:	2304      	movs	r3, #4
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e06f      	b.n	80043c2 <UART_SetConfig+0x346>
 80042e2:	2308      	movs	r3, #8
 80042e4:	77fb      	strb	r3, [r7, #31]
 80042e6:	e06c      	b.n	80043c2 <UART_SetConfig+0x346>
 80042e8:	2310      	movs	r3, #16
 80042ea:	77fb      	strb	r3, [r7, #31]
 80042ec:	e069      	b.n	80043c2 <UART_SetConfig+0x346>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a1c      	ldr	r2, [pc, #112]	; (8004364 <UART_SetConfig+0x2e8>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d137      	bne.n	8004368 <UART_SetConfig+0x2ec>
 80042f8:	4b14      	ldr	r3, [pc, #80]	; (800434c <UART_SetConfig+0x2d0>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004302:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004306:	d017      	beq.n	8004338 <UART_SetConfig+0x2bc>
 8004308:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800430c:	d817      	bhi.n	800433e <UART_SetConfig+0x2c2>
 800430e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004312:	d00b      	beq.n	800432c <UART_SetConfig+0x2b0>
 8004314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004318:	d811      	bhi.n	800433e <UART_SetConfig+0x2c2>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <UART_SetConfig+0x2aa>
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004322:	d006      	beq.n	8004332 <UART_SetConfig+0x2b6>
 8004324:	e00b      	b.n	800433e <UART_SetConfig+0x2c2>
 8004326:	2300      	movs	r3, #0
 8004328:	77fb      	strb	r3, [r7, #31]
 800432a:	e04a      	b.n	80043c2 <UART_SetConfig+0x346>
 800432c:	2302      	movs	r3, #2
 800432e:	77fb      	strb	r3, [r7, #31]
 8004330:	e047      	b.n	80043c2 <UART_SetConfig+0x346>
 8004332:	2304      	movs	r3, #4
 8004334:	77fb      	strb	r3, [r7, #31]
 8004336:	e044      	b.n	80043c2 <UART_SetConfig+0x346>
 8004338:	2308      	movs	r3, #8
 800433a:	77fb      	strb	r3, [r7, #31]
 800433c:	e041      	b.n	80043c2 <UART_SetConfig+0x346>
 800433e:	2310      	movs	r3, #16
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e03e      	b.n	80043c2 <UART_SetConfig+0x346>
 8004344:	efff69f3 	.word	0xefff69f3
 8004348:	40011000 	.word	0x40011000
 800434c:	40023800 	.word	0x40023800
 8004350:	40004400 	.word	0x40004400
 8004354:	40004800 	.word	0x40004800
 8004358:	40004c00 	.word	0x40004c00
 800435c:	40005000 	.word	0x40005000
 8004360:	40011400 	.word	0x40011400
 8004364:	40007800 	.word	0x40007800
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a71      	ldr	r2, [pc, #452]	; (8004534 <UART_SetConfig+0x4b8>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d125      	bne.n	80043be <UART_SetConfig+0x342>
 8004372:	4b71      	ldr	r3, [pc, #452]	; (8004538 <UART_SetConfig+0x4bc>)
 8004374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004378:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800437c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004380:	d017      	beq.n	80043b2 <UART_SetConfig+0x336>
 8004382:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004386:	d817      	bhi.n	80043b8 <UART_SetConfig+0x33c>
 8004388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800438c:	d00b      	beq.n	80043a6 <UART_SetConfig+0x32a>
 800438e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004392:	d811      	bhi.n	80043b8 <UART_SetConfig+0x33c>
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <UART_SetConfig+0x324>
 8004398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800439c:	d006      	beq.n	80043ac <UART_SetConfig+0x330>
 800439e:	e00b      	b.n	80043b8 <UART_SetConfig+0x33c>
 80043a0:	2300      	movs	r3, #0
 80043a2:	77fb      	strb	r3, [r7, #31]
 80043a4:	e00d      	b.n	80043c2 <UART_SetConfig+0x346>
 80043a6:	2302      	movs	r3, #2
 80043a8:	77fb      	strb	r3, [r7, #31]
 80043aa:	e00a      	b.n	80043c2 <UART_SetConfig+0x346>
 80043ac:	2304      	movs	r3, #4
 80043ae:	77fb      	strb	r3, [r7, #31]
 80043b0:	e007      	b.n	80043c2 <UART_SetConfig+0x346>
 80043b2:	2308      	movs	r3, #8
 80043b4:	77fb      	strb	r3, [r7, #31]
 80043b6:	e004      	b.n	80043c2 <UART_SetConfig+0x346>
 80043b8:	2310      	movs	r3, #16
 80043ba:	77fb      	strb	r3, [r7, #31]
 80043bc:	e001      	b.n	80043c2 <UART_SetConfig+0x346>
 80043be:	2310      	movs	r3, #16
 80043c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ca:	d15b      	bne.n	8004484 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 80043cc:	7ffb      	ldrb	r3, [r7, #31]
 80043ce:	2b08      	cmp	r3, #8
 80043d0:	d827      	bhi.n	8004422 <UART_SetConfig+0x3a6>
 80043d2:	a201      	add	r2, pc, #4	; (adr r2, 80043d8 <UART_SetConfig+0x35c>)
 80043d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d8:	080043fd 	.word	0x080043fd
 80043dc:	08004405 	.word	0x08004405
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	08004423 	.word	0x08004423
 80043e8:	08004413 	.word	0x08004413
 80043ec:	08004423 	.word	0x08004423
 80043f0:	08004423 	.word	0x08004423
 80043f4:	08004423 	.word	0x08004423
 80043f8:	0800441b 	.word	0x0800441b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043fc:	f7ff f944 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 8004400:	61b8      	str	r0, [r7, #24]
        break;
 8004402:	e013      	b.n	800442c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004404:	f7ff f954 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 8004408:	61b8      	str	r0, [r7, #24]
        break;
 800440a:	e00f      	b.n	800442c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800440c:	4b4b      	ldr	r3, [pc, #300]	; (800453c <UART_SetConfig+0x4c0>)
 800440e:	61bb      	str	r3, [r7, #24]
        break;
 8004410:	e00c      	b.n	800442c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004412:	f7ff f84b 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 8004416:	61b8      	str	r0, [r7, #24]
        break;
 8004418:	e008      	b.n	800442c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441e:	61bb      	str	r3, [r7, #24]
        break;
 8004420:	e004      	b.n	800442c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004422:	2300      	movs	r3, #0
 8004424:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	77bb      	strb	r3, [r7, #30]
        break;
 800442a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d074      	beq.n	800451c <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	005a      	lsls	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	085b      	lsrs	r3, r3, #1
 800443c:	441a      	add	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	fbb2 f3f3 	udiv	r3, r2, r3
 8004446:	b29b      	uxth	r3, r3
 8004448:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	2b0f      	cmp	r3, #15
 800444e:	d916      	bls.n	800447e <UART_SetConfig+0x402>
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004456:	d212      	bcs.n	800447e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	b29b      	uxth	r3, r3
 800445c:	f023 030f 	bic.w	r3, r3, #15
 8004460:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	b29b      	uxth	r3, r3
 8004468:	f003 0307 	and.w	r3, r3, #7
 800446c:	b29a      	uxth	r2, r3
 800446e:	89fb      	ldrh	r3, [r7, #14]
 8004470:	4313      	orrs	r3, r2
 8004472:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	89fa      	ldrh	r2, [r7, #14]
 800447a:	60da      	str	r2, [r3, #12]
 800447c:	e04e      	b.n	800451c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	77bb      	strb	r3, [r7, #30]
 8004482:	e04b      	b.n	800451c <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004484:	7ffb      	ldrb	r3, [r7, #31]
 8004486:	2b08      	cmp	r3, #8
 8004488:	d827      	bhi.n	80044da <UART_SetConfig+0x45e>
 800448a:	a201      	add	r2, pc, #4	; (adr r2, 8004490 <UART_SetConfig+0x414>)
 800448c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004490:	080044b5 	.word	0x080044b5
 8004494:	080044bd 	.word	0x080044bd
 8004498:	080044c5 	.word	0x080044c5
 800449c:	080044db 	.word	0x080044db
 80044a0:	080044cb 	.word	0x080044cb
 80044a4:	080044db 	.word	0x080044db
 80044a8:	080044db 	.word	0x080044db
 80044ac:	080044db 	.word	0x080044db
 80044b0:	080044d3 	.word	0x080044d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044b4:	f7ff f8e8 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 80044b8:	61b8      	str	r0, [r7, #24]
        break;
 80044ba:	e013      	b.n	80044e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044bc:	f7ff f8f8 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 80044c0:	61b8      	str	r0, [r7, #24]
        break;
 80044c2:	e00f      	b.n	80044e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c4:	4b1d      	ldr	r3, [pc, #116]	; (800453c <UART_SetConfig+0x4c0>)
 80044c6:	61bb      	str	r3, [r7, #24]
        break;
 80044c8:	e00c      	b.n	80044e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ca:	f7fe ffef 	bl	80034ac <HAL_RCC_GetSysClockFreq>
 80044ce:	61b8      	str	r0, [r7, #24]
        break;
 80044d0:	e008      	b.n	80044e4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044d6:	61bb      	str	r3, [r7, #24]
        break;
 80044d8:	e004      	b.n	80044e4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 80044da:	2300      	movs	r3, #0
 80044dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	77bb      	strb	r3, [r7, #30]
        break;
 80044e2:	bf00      	nop
    }

    if (pclk != 0U)
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d018      	beq.n	800451c <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	085a      	lsrs	r2, r3, #1
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	441a      	add	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	2b0f      	cmp	r3, #15
 8004504:	d908      	bls.n	8004518 <UART_SetConfig+0x49c>
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800450c:	d204      	bcs.n	8004518 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	60da      	str	r2, [r3, #12]
 8004516:	e001      	b.n	800451c <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004528:	7fbb      	ldrb	r3, [r7, #30]
}
 800452a:	4618      	mov	r0, r3
 800452c:	3720      	adds	r7, #32
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	40007c00 	.word	0x40007c00
 8004538:	40023800 	.word	0x40023800
 800453c:	00f42400 	.word	0x00f42400

08004540 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00a      	beq.n	800456a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00a      	beq.n	80045ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00a      	beq.n	80045d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	430a      	orrs	r2, r1
 80045ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	f003 0310 	and.w	r3, r3, #16
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01a      	beq.n	8004656 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800463e:	d10a      	bne.n	8004656 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	430a      	orrs	r2, r1
 8004654:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	605a      	str	r2, [r3, #4]
  }
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af02      	add	r7, sp, #8
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004694:	f7fd f9d4 	bl	8001a40 <HAL_GetTick>
 8004698:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d10e      	bne.n	80046c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046ac:	9300      	str	r3, [sp, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f000 f817 	bl	80046ea <UART_WaitOnFlagUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e00d      	b.n	80046e2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2220      	movs	r2, #32
 80046ca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3710      	adds	r7, #16
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046ea:	b580      	push	{r7, lr}
 80046ec:	b084      	sub	sp, #16
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	60f8      	str	r0, [r7, #12]
 80046f2:	60b9      	str	r1, [r7, #8]
 80046f4:	603b      	str	r3, [r7, #0]
 80046f6:	4613      	mov	r3, r2
 80046f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046fa:	e05e      	b.n	80047ba <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004702:	d05a      	beq.n	80047ba <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004704:	f7fd f99c 	bl	8001a40 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	69ba      	ldr	r2, [r7, #24]
 8004710:	429a      	cmp	r2, r3
 8004712:	d302      	bcc.n	800471a <UART_WaitOnFlagUntilTimeout+0x30>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d11b      	bne.n	8004752 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004728:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f022 0201 	bic.w	r2, r2, #1
 8004738:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2220      	movs	r2, #32
 800473e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2220      	movs	r2, #32
 8004744:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e043      	b.n	80047da <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0304 	and.w	r3, r3, #4
 800475c:	2b00      	cmp	r3, #0
 800475e:	d02c      	beq.n	80047ba <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	69db      	ldr	r3, [r3, #28]
 8004766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800476a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800476e:	d124      	bne.n	80047ba <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004778:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004788:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689a      	ldr	r2, [r3, #8]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2220      	movs	r2, #32
 80047a4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e00f      	b.n	80047da <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69da      	ldr	r2, [r3, #28]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4013      	ands	r3, r2
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	bf0c      	ite	eq
 80047ca:	2301      	moveq	r3, #1
 80047cc:	2300      	movne	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d091      	beq.n	80046fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
	...

080047e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047e4:	b084      	sub	sp, #16
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b084      	sub	sp, #16
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	f107 001c 	add.w	r0, r7, #28
 80047f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d120      	bne.n	800483e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004800:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68da      	ldr	r2, [r3, #12]
 800480c:	4b20      	ldr	r3, [pc, #128]	; (8004890 <USB_CoreInit+0xac>)
 800480e:	4013      	ands	r3, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004822:	2b01      	cmp	r3, #1
 8004824:	d105      	bne.n	8004832 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fa5a 	bl	8004cec <USB_CoreReset>
 8004838:	4603      	mov	r3, r0
 800483a:	73fb      	strb	r3, [r7, #15]
 800483c:	e010      	b.n	8004860 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fa4e 	bl	8004cec <USB_CoreReset>
 8004850:	4603      	mov	r3, r0
 8004852:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004858:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	2b01      	cmp	r3, #1
 8004864:	d10b      	bne.n	800487e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f043 0206 	orr.w	r2, r3, #6
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f043 0220 	orr.w	r2, r3, #32
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800488a:	b004      	add	sp, #16
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	ffbdffbf 	.word	0xffbdffbf

08004894 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004894:	b480      	push	{r7}
 8004896:	b083      	sub	sp, #12
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 0201 	bic.w	r2, r3, #1
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	370c      	adds	r7, #12
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b082      	sub	sp, #8
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	460b      	mov	r3, r1
 80048c0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d106      	bne.n	80048e2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	60da      	str	r2, [r3, #12]
 80048e0:	e00b      	b.n	80048fa <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80048e2:	78fb      	ldrb	r3, [r7, #3]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d106      	bne.n	80048f6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60da      	str	r2, [r3, #12]
 80048f4:	e001      	b.n	80048fa <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e003      	b.n	8004902 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80048fa:	2032      	movs	r0, #50	; 0x32
 80048fc:	f7fd f8ac 	bl	8001a58 <HAL_Delay>

  return HAL_OK;
 8004900:	2300      	movs	r3, #0
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
	...

0800490c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800490c:	b084      	sub	sp, #16
 800490e:	b580      	push	{r7, lr}
 8004910:	b086      	sub	sp, #24
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
 8004916:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800491a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004926:	2300      	movs	r3, #0
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	e009      	b.n	8004940 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	3340      	adds	r3, #64	; 0x40
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	2200      	movs	r2, #0
 8004938:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	3301      	adds	r3, #1
 800493e:	613b      	str	r3, [r7, #16]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b0e      	cmp	r3, #14
 8004944:	d9f2      	bls.n	800492c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d11c      	bne.n	8004986 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800495a:	f043 0302 	orr.w	r3, r3, #2
 800495e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004964:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e005      	b.n	8004992 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004998:	461a      	mov	r2, r3
 800499a:	2300      	movs	r3, #0
 800499c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a4:	4619      	mov	r1, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ac:	461a      	mov	r2, r3
 80049ae:	680b      	ldr	r3, [r1, #0]
 80049b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d10c      	bne.n	80049d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d104      	bne.n	80049c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049be:	2100      	movs	r1, #0
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f959 	bl	8004c78 <USB_SetDevSpeed>
 80049c6:	e018      	b.n	80049fa <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049c8:	2101      	movs	r1, #1
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f954 	bl	8004c78 <USB_SetDevSpeed>
 80049d0:	e013      	b.n	80049fa <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d10c      	bne.n	80049f2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049de:	2100      	movs	r1, #0
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f949 	bl	8004c78 <USB_SetDevSpeed>
 80049e6:	e008      	b.n	80049fa <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049e8:	2101      	movs	r1, #1
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f944 	bl	8004c78 <USB_SetDevSpeed>
 80049f0:	e003      	b.n	80049fa <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049f2:	2103      	movs	r1, #3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f93f 	bl	8004c78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049fa:	2110      	movs	r1, #16
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f8f3 	bl	8004be8 <USB_FlushTxFifo>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f911 	bl	8004c34 <USB_FlushRxFifo>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	461a      	mov	r2, r3
 8004a24:	2300      	movs	r3, #0
 8004a26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2300      	movs	r3, #0
 8004a32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	e043      	b.n	8004ace <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a5c:	d118      	bne.n	8004a90 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	461a      	mov	r2, r3
 8004a72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e013      	b.n	8004aa2 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a86:	461a      	mov	r2, r3
 8004a88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e008      	b.n	8004aa2 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ac6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	3301      	adds	r3, #1
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d3b7      	bcc.n	8004a46 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	e043      	b.n	8004b64 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af2:	d118      	bne.n	8004b26 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b06:	461a      	mov	r2, r3
 8004b08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e013      	b.n	8004b38 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	e008      	b.n	8004b38 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	461a      	mov	r2, r3
 8004b34:	2300      	movs	r3, #0
 8004b36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	461a      	mov	r2, r3
 8004b46:	2300      	movs	r3, #0
 8004b48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	461a      	mov	r2, r3
 8004b58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	3301      	adds	r3, #1
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d3b7      	bcc.n	8004adc <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f043 0210 	orr.w	r2, r3, #16
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <USB_DevInit+0x2d4>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f043 0208 	orr.w	r2, r3, #8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d105      	bne.n	8004bd0 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <USB_DevInit+0x2d8>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bdc:	b004      	add	sp, #16
 8004bde:	4770      	bx	lr
 8004be0:	803c3800 	.word	0x803c3800
 8004be4:	40000004 	.word	0x40000004

08004be8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	019b      	lsls	r3, r3, #6
 8004bfa:	f043 0220 	orr.w	r2, r3, #32
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3301      	adds	r3, #1
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4a09      	ldr	r2, [pc, #36]	; (8004c30 <USB_FlushTxFifo+0x48>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d901      	bls.n	8004c14 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e006      	b.n	8004c22 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f003 0320 	and.w	r3, r3, #32
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d0f0      	beq.n	8004c02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	00030d40 	.word	0x00030d40

08004c34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2210      	movs	r2, #16
 8004c44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	60fb      	str	r3, [r7, #12]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	4a09      	ldr	r2, [pc, #36]	; (8004c74 <USB_FlushRxFifo+0x40>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d901      	bls.n	8004c58 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e006      	b.n	8004c66 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	f003 0310 	and.w	r3, r3, #16
 8004c60:	2b10      	cmp	r3, #16
 8004c62:	d0f0      	beq.n	8004c46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	00030d40 	.word	0x00030d40

08004c78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	68f9      	ldr	r1, [r7, #12]
 8004c94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cc4:	f023 0303 	bic.w	r3, r3, #3
 8004cc8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cd8:	f043 0302 	orr.w	r3, r3, #2
 8004cdc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a13      	ldr	r2, [pc, #76]	; (8004d50 <USB_CoreReset+0x64>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d901      	bls.n	8004d0a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d06:	2303      	movs	r3, #3
 8004d08:	e01b      	b.n	8004d42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	daf2      	bge.n	8004cf8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f043 0201 	orr.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	3301      	adds	r3, #1
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <USB_CoreReset+0x64>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d901      	bls.n	8004d34 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e006      	b.n	8004d42 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f003 0301 	and.w	r3, r3, #1
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d0f0      	beq.n	8004d22 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	00030d40 	.word	0x00030d40

08004d54 <__errno>:
 8004d54:	4b01      	ldr	r3, [pc, #4]	; (8004d5c <__errno+0x8>)
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	2000000c 	.word	0x2000000c

08004d60 <__libc_init_array>:
 8004d60:	b570      	push	{r4, r5, r6, lr}
 8004d62:	4d0d      	ldr	r5, [pc, #52]	; (8004d98 <__libc_init_array+0x38>)
 8004d64:	4c0d      	ldr	r4, [pc, #52]	; (8004d9c <__libc_init_array+0x3c>)
 8004d66:	1b64      	subs	r4, r4, r5
 8004d68:	10a4      	asrs	r4, r4, #2
 8004d6a:	2600      	movs	r6, #0
 8004d6c:	42a6      	cmp	r6, r4
 8004d6e:	d109      	bne.n	8004d84 <__libc_init_array+0x24>
 8004d70:	4d0b      	ldr	r5, [pc, #44]	; (8004da0 <__libc_init_array+0x40>)
 8004d72:	4c0c      	ldr	r4, [pc, #48]	; (8004da4 <__libc_init_array+0x44>)
 8004d74:	f002 feb6 	bl	8007ae4 <_init>
 8004d78:	1b64      	subs	r4, r4, r5
 8004d7a:	10a4      	asrs	r4, r4, #2
 8004d7c:	2600      	movs	r6, #0
 8004d7e:	42a6      	cmp	r6, r4
 8004d80:	d105      	bne.n	8004d8e <__libc_init_array+0x2e>
 8004d82:	bd70      	pop	{r4, r5, r6, pc}
 8004d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d88:	4798      	blx	r3
 8004d8a:	3601      	adds	r6, #1
 8004d8c:	e7ee      	b.n	8004d6c <__libc_init_array+0xc>
 8004d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d92:	4798      	blx	r3
 8004d94:	3601      	adds	r6, #1
 8004d96:	e7f2      	b.n	8004d7e <__libc_init_array+0x1e>
 8004d98:	08007f0c 	.word	0x08007f0c
 8004d9c:	08007f0c 	.word	0x08007f0c
 8004da0:	08007f0c 	.word	0x08007f0c
 8004da4:	08007f10 	.word	0x08007f10

08004da8 <memset>:
 8004da8:	4402      	add	r2, r0
 8004daa:	4603      	mov	r3, r0
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d100      	bne.n	8004db2 <memset+0xa>
 8004db0:	4770      	bx	lr
 8004db2:	f803 1b01 	strb.w	r1, [r3], #1
 8004db6:	e7f9      	b.n	8004dac <memset+0x4>

08004db8 <__cvt>:
 8004db8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dbc:	ec55 4b10 	vmov	r4, r5, d0
 8004dc0:	2d00      	cmp	r5, #0
 8004dc2:	460e      	mov	r6, r1
 8004dc4:	4619      	mov	r1, r3
 8004dc6:	462b      	mov	r3, r5
 8004dc8:	bfbb      	ittet	lt
 8004dca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004dce:	461d      	movlt	r5, r3
 8004dd0:	2300      	movge	r3, #0
 8004dd2:	232d      	movlt	r3, #45	; 0x2d
 8004dd4:	700b      	strb	r3, [r1, #0]
 8004dd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dd8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ddc:	4691      	mov	r9, r2
 8004dde:	f023 0820 	bic.w	r8, r3, #32
 8004de2:	bfbc      	itt	lt
 8004de4:	4622      	movlt	r2, r4
 8004de6:	4614      	movlt	r4, r2
 8004de8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dec:	d005      	beq.n	8004dfa <__cvt+0x42>
 8004dee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004df2:	d100      	bne.n	8004df6 <__cvt+0x3e>
 8004df4:	3601      	adds	r6, #1
 8004df6:	2102      	movs	r1, #2
 8004df8:	e000      	b.n	8004dfc <__cvt+0x44>
 8004dfa:	2103      	movs	r1, #3
 8004dfc:	ab03      	add	r3, sp, #12
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	ab02      	add	r3, sp, #8
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	ec45 4b10 	vmov	d0, r4, r5
 8004e08:	4653      	mov	r3, sl
 8004e0a:	4632      	mov	r2, r6
 8004e0c:	f000 fcec 	bl	80057e8 <_dtoa_r>
 8004e10:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e14:	4607      	mov	r7, r0
 8004e16:	d102      	bne.n	8004e1e <__cvt+0x66>
 8004e18:	f019 0f01 	tst.w	r9, #1
 8004e1c:	d022      	beq.n	8004e64 <__cvt+0xac>
 8004e1e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e22:	eb07 0906 	add.w	r9, r7, r6
 8004e26:	d110      	bne.n	8004e4a <__cvt+0x92>
 8004e28:	783b      	ldrb	r3, [r7, #0]
 8004e2a:	2b30      	cmp	r3, #48	; 0x30
 8004e2c:	d10a      	bne.n	8004e44 <__cvt+0x8c>
 8004e2e:	2200      	movs	r2, #0
 8004e30:	2300      	movs	r3, #0
 8004e32:	4620      	mov	r0, r4
 8004e34:	4629      	mov	r1, r5
 8004e36:	f7fb fe67 	bl	8000b08 <__aeabi_dcmpeq>
 8004e3a:	b918      	cbnz	r0, 8004e44 <__cvt+0x8c>
 8004e3c:	f1c6 0601 	rsb	r6, r6, #1
 8004e40:	f8ca 6000 	str.w	r6, [sl]
 8004e44:	f8da 3000 	ldr.w	r3, [sl]
 8004e48:	4499      	add	r9, r3
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4620      	mov	r0, r4
 8004e50:	4629      	mov	r1, r5
 8004e52:	f7fb fe59 	bl	8000b08 <__aeabi_dcmpeq>
 8004e56:	b108      	cbz	r0, 8004e5c <__cvt+0xa4>
 8004e58:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e5c:	2230      	movs	r2, #48	; 0x30
 8004e5e:	9b03      	ldr	r3, [sp, #12]
 8004e60:	454b      	cmp	r3, r9
 8004e62:	d307      	bcc.n	8004e74 <__cvt+0xbc>
 8004e64:	9b03      	ldr	r3, [sp, #12]
 8004e66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e68:	1bdb      	subs	r3, r3, r7
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	6013      	str	r3, [r2, #0]
 8004e6e:	b004      	add	sp, #16
 8004e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e74:	1c59      	adds	r1, r3, #1
 8004e76:	9103      	str	r1, [sp, #12]
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	e7f0      	b.n	8004e5e <__cvt+0xa6>

08004e7c <__exponent>:
 8004e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2900      	cmp	r1, #0
 8004e82:	bfb8      	it	lt
 8004e84:	4249      	neglt	r1, r1
 8004e86:	f803 2b02 	strb.w	r2, [r3], #2
 8004e8a:	bfb4      	ite	lt
 8004e8c:	222d      	movlt	r2, #45	; 0x2d
 8004e8e:	222b      	movge	r2, #43	; 0x2b
 8004e90:	2909      	cmp	r1, #9
 8004e92:	7042      	strb	r2, [r0, #1]
 8004e94:	dd2a      	ble.n	8004eec <__exponent+0x70>
 8004e96:	f10d 0407 	add.w	r4, sp, #7
 8004e9a:	46a4      	mov	ip, r4
 8004e9c:	270a      	movs	r7, #10
 8004e9e:	46a6      	mov	lr, r4
 8004ea0:	460a      	mov	r2, r1
 8004ea2:	fb91 f6f7 	sdiv	r6, r1, r7
 8004ea6:	fb07 1516 	mls	r5, r7, r6, r1
 8004eaa:	3530      	adds	r5, #48	; 0x30
 8004eac:	2a63      	cmp	r2, #99	; 0x63
 8004eae:	f104 34ff 	add.w	r4, r4, #4294967295
 8004eb2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004eb6:	4631      	mov	r1, r6
 8004eb8:	dcf1      	bgt.n	8004e9e <__exponent+0x22>
 8004eba:	3130      	adds	r1, #48	; 0x30
 8004ebc:	f1ae 0502 	sub.w	r5, lr, #2
 8004ec0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004ec4:	1c44      	adds	r4, r0, #1
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	4561      	cmp	r1, ip
 8004eca:	d30a      	bcc.n	8004ee2 <__exponent+0x66>
 8004ecc:	f10d 0209 	add.w	r2, sp, #9
 8004ed0:	eba2 020e 	sub.w	r2, r2, lr
 8004ed4:	4565      	cmp	r5, ip
 8004ed6:	bf88      	it	hi
 8004ed8:	2200      	movhi	r2, #0
 8004eda:	4413      	add	r3, r2
 8004edc:	1a18      	subs	r0, r3, r0
 8004ede:	b003      	add	sp, #12
 8004ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ee6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004eea:	e7ed      	b.n	8004ec8 <__exponent+0x4c>
 8004eec:	2330      	movs	r3, #48	; 0x30
 8004eee:	3130      	adds	r1, #48	; 0x30
 8004ef0:	7083      	strb	r3, [r0, #2]
 8004ef2:	70c1      	strb	r1, [r0, #3]
 8004ef4:	1d03      	adds	r3, r0, #4
 8004ef6:	e7f1      	b.n	8004edc <__exponent+0x60>

08004ef8 <_printf_float>:
 8004ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efc:	ed2d 8b02 	vpush	{d8}
 8004f00:	b08d      	sub	sp, #52	; 0x34
 8004f02:	460c      	mov	r4, r1
 8004f04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f08:	4616      	mov	r6, r2
 8004f0a:	461f      	mov	r7, r3
 8004f0c:	4605      	mov	r5, r0
 8004f0e:	f001 fa57 	bl	80063c0 <_localeconv_r>
 8004f12:	f8d0 a000 	ldr.w	sl, [r0]
 8004f16:	4650      	mov	r0, sl
 8004f18:	f7fb f97a 	bl	8000210 <strlen>
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	9305      	str	r3, [sp, #20]
 8004f24:	f8d8 3000 	ldr.w	r3, [r8]
 8004f28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f2c:	3307      	adds	r3, #7
 8004f2e:	f023 0307 	bic.w	r3, r3, #7
 8004f32:	f103 0208 	add.w	r2, r3, #8
 8004f36:	f8c8 2000 	str.w	r2, [r8]
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004f46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f4a:	9307      	str	r3, [sp, #28]
 8004f4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f50:	ee08 0a10 	vmov	s16, r0
 8004f54:	4b9f      	ldr	r3, [pc, #636]	; (80051d4 <_printf_float+0x2dc>)
 8004f56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f5e:	f7fb fe05 	bl	8000b6c <__aeabi_dcmpun>
 8004f62:	bb88      	cbnz	r0, 8004fc8 <_printf_float+0xd0>
 8004f64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f68:	4b9a      	ldr	r3, [pc, #616]	; (80051d4 <_printf_float+0x2dc>)
 8004f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f6e:	f7fb fddf 	bl	8000b30 <__aeabi_dcmple>
 8004f72:	bb48      	cbnz	r0, 8004fc8 <_printf_float+0xd0>
 8004f74:	2200      	movs	r2, #0
 8004f76:	2300      	movs	r3, #0
 8004f78:	4640      	mov	r0, r8
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	f7fb fdce 	bl	8000b1c <__aeabi_dcmplt>
 8004f80:	b110      	cbz	r0, 8004f88 <_printf_float+0x90>
 8004f82:	232d      	movs	r3, #45	; 0x2d
 8004f84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f88:	4b93      	ldr	r3, [pc, #588]	; (80051d8 <_printf_float+0x2e0>)
 8004f8a:	4894      	ldr	r0, [pc, #592]	; (80051dc <_printf_float+0x2e4>)
 8004f8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f90:	bf94      	ite	ls
 8004f92:	4698      	movls	r8, r3
 8004f94:	4680      	movhi	r8, r0
 8004f96:	2303      	movs	r3, #3
 8004f98:	6123      	str	r3, [r4, #16]
 8004f9a:	9b05      	ldr	r3, [sp, #20]
 8004f9c:	f023 0204 	bic.w	r2, r3, #4
 8004fa0:	6022      	str	r2, [r4, #0]
 8004fa2:	f04f 0900 	mov.w	r9, #0
 8004fa6:	9700      	str	r7, [sp, #0]
 8004fa8:	4633      	mov	r3, r6
 8004faa:	aa0b      	add	r2, sp, #44	; 0x2c
 8004fac:	4621      	mov	r1, r4
 8004fae:	4628      	mov	r0, r5
 8004fb0:	f000 f9d8 	bl	8005364 <_printf_common>
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	f040 8090 	bne.w	80050da <_printf_float+0x1e2>
 8004fba:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbe:	b00d      	add	sp, #52	; 0x34
 8004fc0:	ecbd 8b02 	vpop	{d8}
 8004fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc8:	4642      	mov	r2, r8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	4640      	mov	r0, r8
 8004fce:	4649      	mov	r1, r9
 8004fd0:	f7fb fdcc 	bl	8000b6c <__aeabi_dcmpun>
 8004fd4:	b140      	cbz	r0, 8004fe8 <_printf_float+0xf0>
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bfbc      	itt	lt
 8004fdc:	232d      	movlt	r3, #45	; 0x2d
 8004fde:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004fe2:	487f      	ldr	r0, [pc, #508]	; (80051e0 <_printf_float+0x2e8>)
 8004fe4:	4b7f      	ldr	r3, [pc, #508]	; (80051e4 <_printf_float+0x2ec>)
 8004fe6:	e7d1      	b.n	8004f8c <_printf_float+0x94>
 8004fe8:	6863      	ldr	r3, [r4, #4]
 8004fea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004fee:	9206      	str	r2, [sp, #24]
 8004ff0:	1c5a      	adds	r2, r3, #1
 8004ff2:	d13f      	bne.n	8005074 <_printf_float+0x17c>
 8004ff4:	2306      	movs	r3, #6
 8004ff6:	6063      	str	r3, [r4, #4]
 8004ff8:	9b05      	ldr	r3, [sp, #20]
 8004ffa:	6861      	ldr	r1, [r4, #4]
 8004ffc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005000:	2300      	movs	r3, #0
 8005002:	9303      	str	r3, [sp, #12]
 8005004:	ab0a      	add	r3, sp, #40	; 0x28
 8005006:	e9cd b301 	strd	fp, r3, [sp, #4]
 800500a:	ab09      	add	r3, sp, #36	; 0x24
 800500c:	ec49 8b10 	vmov	d0, r8, r9
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	6022      	str	r2, [r4, #0]
 8005014:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005018:	4628      	mov	r0, r5
 800501a:	f7ff fecd 	bl	8004db8 <__cvt>
 800501e:	9b06      	ldr	r3, [sp, #24]
 8005020:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005022:	2b47      	cmp	r3, #71	; 0x47
 8005024:	4680      	mov	r8, r0
 8005026:	d108      	bne.n	800503a <_printf_float+0x142>
 8005028:	1cc8      	adds	r0, r1, #3
 800502a:	db02      	blt.n	8005032 <_printf_float+0x13a>
 800502c:	6863      	ldr	r3, [r4, #4]
 800502e:	4299      	cmp	r1, r3
 8005030:	dd41      	ble.n	80050b6 <_printf_float+0x1be>
 8005032:	f1ab 0b02 	sub.w	fp, fp, #2
 8005036:	fa5f fb8b 	uxtb.w	fp, fp
 800503a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800503e:	d820      	bhi.n	8005082 <_printf_float+0x18a>
 8005040:	3901      	subs	r1, #1
 8005042:	465a      	mov	r2, fp
 8005044:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005048:	9109      	str	r1, [sp, #36]	; 0x24
 800504a:	f7ff ff17 	bl	8004e7c <__exponent>
 800504e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005050:	1813      	adds	r3, r2, r0
 8005052:	2a01      	cmp	r2, #1
 8005054:	4681      	mov	r9, r0
 8005056:	6123      	str	r3, [r4, #16]
 8005058:	dc02      	bgt.n	8005060 <_printf_float+0x168>
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	07d2      	lsls	r2, r2, #31
 800505e:	d501      	bpl.n	8005064 <_printf_float+0x16c>
 8005060:	3301      	adds	r3, #1
 8005062:	6123      	str	r3, [r4, #16]
 8005064:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005068:	2b00      	cmp	r3, #0
 800506a:	d09c      	beq.n	8004fa6 <_printf_float+0xae>
 800506c:	232d      	movs	r3, #45	; 0x2d
 800506e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005072:	e798      	b.n	8004fa6 <_printf_float+0xae>
 8005074:	9a06      	ldr	r2, [sp, #24]
 8005076:	2a47      	cmp	r2, #71	; 0x47
 8005078:	d1be      	bne.n	8004ff8 <_printf_float+0x100>
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1bc      	bne.n	8004ff8 <_printf_float+0x100>
 800507e:	2301      	movs	r3, #1
 8005080:	e7b9      	b.n	8004ff6 <_printf_float+0xfe>
 8005082:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005086:	d118      	bne.n	80050ba <_printf_float+0x1c2>
 8005088:	2900      	cmp	r1, #0
 800508a:	6863      	ldr	r3, [r4, #4]
 800508c:	dd0b      	ble.n	80050a6 <_printf_float+0x1ae>
 800508e:	6121      	str	r1, [r4, #16]
 8005090:	b913      	cbnz	r3, 8005098 <_printf_float+0x1a0>
 8005092:	6822      	ldr	r2, [r4, #0]
 8005094:	07d0      	lsls	r0, r2, #31
 8005096:	d502      	bpl.n	800509e <_printf_float+0x1a6>
 8005098:	3301      	adds	r3, #1
 800509a:	440b      	add	r3, r1
 800509c:	6123      	str	r3, [r4, #16]
 800509e:	65a1      	str	r1, [r4, #88]	; 0x58
 80050a0:	f04f 0900 	mov.w	r9, #0
 80050a4:	e7de      	b.n	8005064 <_printf_float+0x16c>
 80050a6:	b913      	cbnz	r3, 80050ae <_printf_float+0x1b6>
 80050a8:	6822      	ldr	r2, [r4, #0]
 80050aa:	07d2      	lsls	r2, r2, #31
 80050ac:	d501      	bpl.n	80050b2 <_printf_float+0x1ba>
 80050ae:	3302      	adds	r3, #2
 80050b0:	e7f4      	b.n	800509c <_printf_float+0x1a4>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e7f2      	b.n	800509c <_printf_float+0x1a4>
 80050b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80050ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050bc:	4299      	cmp	r1, r3
 80050be:	db05      	blt.n	80050cc <_printf_float+0x1d4>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	6121      	str	r1, [r4, #16]
 80050c4:	07d8      	lsls	r0, r3, #31
 80050c6:	d5ea      	bpl.n	800509e <_printf_float+0x1a6>
 80050c8:	1c4b      	adds	r3, r1, #1
 80050ca:	e7e7      	b.n	800509c <_printf_float+0x1a4>
 80050cc:	2900      	cmp	r1, #0
 80050ce:	bfd4      	ite	le
 80050d0:	f1c1 0202 	rsble	r2, r1, #2
 80050d4:	2201      	movgt	r2, #1
 80050d6:	4413      	add	r3, r2
 80050d8:	e7e0      	b.n	800509c <_printf_float+0x1a4>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	055a      	lsls	r2, r3, #21
 80050de:	d407      	bmi.n	80050f0 <_printf_float+0x1f8>
 80050e0:	6923      	ldr	r3, [r4, #16]
 80050e2:	4642      	mov	r2, r8
 80050e4:	4631      	mov	r1, r6
 80050e6:	4628      	mov	r0, r5
 80050e8:	47b8      	blx	r7
 80050ea:	3001      	adds	r0, #1
 80050ec:	d12c      	bne.n	8005148 <_printf_float+0x250>
 80050ee:	e764      	b.n	8004fba <_printf_float+0xc2>
 80050f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050f4:	f240 80e0 	bls.w	80052b8 <_printf_float+0x3c0>
 80050f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050fc:	2200      	movs	r2, #0
 80050fe:	2300      	movs	r3, #0
 8005100:	f7fb fd02 	bl	8000b08 <__aeabi_dcmpeq>
 8005104:	2800      	cmp	r0, #0
 8005106:	d034      	beq.n	8005172 <_printf_float+0x27a>
 8005108:	4a37      	ldr	r2, [pc, #220]	; (80051e8 <_printf_float+0x2f0>)
 800510a:	2301      	movs	r3, #1
 800510c:	4631      	mov	r1, r6
 800510e:	4628      	mov	r0, r5
 8005110:	47b8      	blx	r7
 8005112:	3001      	adds	r0, #1
 8005114:	f43f af51 	beq.w	8004fba <_printf_float+0xc2>
 8005118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800511c:	429a      	cmp	r2, r3
 800511e:	db02      	blt.n	8005126 <_printf_float+0x22e>
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	07d8      	lsls	r0, r3, #31
 8005124:	d510      	bpl.n	8005148 <_printf_float+0x250>
 8005126:	ee18 3a10 	vmov	r3, s16
 800512a:	4652      	mov	r2, sl
 800512c:	4631      	mov	r1, r6
 800512e:	4628      	mov	r0, r5
 8005130:	47b8      	blx	r7
 8005132:	3001      	adds	r0, #1
 8005134:	f43f af41 	beq.w	8004fba <_printf_float+0xc2>
 8005138:	f04f 0800 	mov.w	r8, #0
 800513c:	f104 091a 	add.w	r9, r4, #26
 8005140:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005142:	3b01      	subs	r3, #1
 8005144:	4543      	cmp	r3, r8
 8005146:	dc09      	bgt.n	800515c <_printf_float+0x264>
 8005148:	6823      	ldr	r3, [r4, #0]
 800514a:	079b      	lsls	r3, r3, #30
 800514c:	f100 8105 	bmi.w	800535a <_printf_float+0x462>
 8005150:	68e0      	ldr	r0, [r4, #12]
 8005152:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005154:	4298      	cmp	r0, r3
 8005156:	bfb8      	it	lt
 8005158:	4618      	movlt	r0, r3
 800515a:	e730      	b.n	8004fbe <_printf_float+0xc6>
 800515c:	2301      	movs	r3, #1
 800515e:	464a      	mov	r2, r9
 8005160:	4631      	mov	r1, r6
 8005162:	4628      	mov	r0, r5
 8005164:	47b8      	blx	r7
 8005166:	3001      	adds	r0, #1
 8005168:	f43f af27 	beq.w	8004fba <_printf_float+0xc2>
 800516c:	f108 0801 	add.w	r8, r8, #1
 8005170:	e7e6      	b.n	8005140 <_printf_float+0x248>
 8005172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005174:	2b00      	cmp	r3, #0
 8005176:	dc39      	bgt.n	80051ec <_printf_float+0x2f4>
 8005178:	4a1b      	ldr	r2, [pc, #108]	; (80051e8 <_printf_float+0x2f0>)
 800517a:	2301      	movs	r3, #1
 800517c:	4631      	mov	r1, r6
 800517e:	4628      	mov	r0, r5
 8005180:	47b8      	blx	r7
 8005182:	3001      	adds	r0, #1
 8005184:	f43f af19 	beq.w	8004fba <_printf_float+0xc2>
 8005188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800518c:	4313      	orrs	r3, r2
 800518e:	d102      	bne.n	8005196 <_printf_float+0x29e>
 8005190:	6823      	ldr	r3, [r4, #0]
 8005192:	07d9      	lsls	r1, r3, #31
 8005194:	d5d8      	bpl.n	8005148 <_printf_float+0x250>
 8005196:	ee18 3a10 	vmov	r3, s16
 800519a:	4652      	mov	r2, sl
 800519c:	4631      	mov	r1, r6
 800519e:	4628      	mov	r0, r5
 80051a0:	47b8      	blx	r7
 80051a2:	3001      	adds	r0, #1
 80051a4:	f43f af09 	beq.w	8004fba <_printf_float+0xc2>
 80051a8:	f04f 0900 	mov.w	r9, #0
 80051ac:	f104 0a1a 	add.w	sl, r4, #26
 80051b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b2:	425b      	negs	r3, r3
 80051b4:	454b      	cmp	r3, r9
 80051b6:	dc01      	bgt.n	80051bc <_printf_float+0x2c4>
 80051b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051ba:	e792      	b.n	80050e2 <_printf_float+0x1ea>
 80051bc:	2301      	movs	r3, #1
 80051be:	4652      	mov	r2, sl
 80051c0:	4631      	mov	r1, r6
 80051c2:	4628      	mov	r0, r5
 80051c4:	47b8      	blx	r7
 80051c6:	3001      	adds	r0, #1
 80051c8:	f43f aef7 	beq.w	8004fba <_printf_float+0xc2>
 80051cc:	f109 0901 	add.w	r9, r9, #1
 80051d0:	e7ee      	b.n	80051b0 <_printf_float+0x2b8>
 80051d2:	bf00      	nop
 80051d4:	7fefffff 	.word	0x7fefffff
 80051d8:	08007b28 	.word	0x08007b28
 80051dc:	08007b2c 	.word	0x08007b2c
 80051e0:	08007b34 	.word	0x08007b34
 80051e4:	08007b30 	.word	0x08007b30
 80051e8:	08007b38 	.word	0x08007b38
 80051ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051f0:	429a      	cmp	r2, r3
 80051f2:	bfa8      	it	ge
 80051f4:	461a      	movge	r2, r3
 80051f6:	2a00      	cmp	r2, #0
 80051f8:	4691      	mov	r9, r2
 80051fa:	dc37      	bgt.n	800526c <_printf_float+0x374>
 80051fc:	f04f 0b00 	mov.w	fp, #0
 8005200:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005204:	f104 021a 	add.w	r2, r4, #26
 8005208:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800520a:	9305      	str	r3, [sp, #20]
 800520c:	eba3 0309 	sub.w	r3, r3, r9
 8005210:	455b      	cmp	r3, fp
 8005212:	dc33      	bgt.n	800527c <_printf_float+0x384>
 8005214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005218:	429a      	cmp	r2, r3
 800521a:	db3b      	blt.n	8005294 <_printf_float+0x39c>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	07da      	lsls	r2, r3, #31
 8005220:	d438      	bmi.n	8005294 <_printf_float+0x39c>
 8005222:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005224:	9b05      	ldr	r3, [sp, #20]
 8005226:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	eba2 0901 	sub.w	r9, r2, r1
 800522e:	4599      	cmp	r9, r3
 8005230:	bfa8      	it	ge
 8005232:	4699      	movge	r9, r3
 8005234:	f1b9 0f00 	cmp.w	r9, #0
 8005238:	dc35      	bgt.n	80052a6 <_printf_float+0x3ae>
 800523a:	f04f 0800 	mov.w	r8, #0
 800523e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005242:	f104 0a1a 	add.w	sl, r4, #26
 8005246:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800524a:	1a9b      	subs	r3, r3, r2
 800524c:	eba3 0309 	sub.w	r3, r3, r9
 8005250:	4543      	cmp	r3, r8
 8005252:	f77f af79 	ble.w	8005148 <_printf_float+0x250>
 8005256:	2301      	movs	r3, #1
 8005258:	4652      	mov	r2, sl
 800525a:	4631      	mov	r1, r6
 800525c:	4628      	mov	r0, r5
 800525e:	47b8      	blx	r7
 8005260:	3001      	adds	r0, #1
 8005262:	f43f aeaa 	beq.w	8004fba <_printf_float+0xc2>
 8005266:	f108 0801 	add.w	r8, r8, #1
 800526a:	e7ec      	b.n	8005246 <_printf_float+0x34e>
 800526c:	4613      	mov	r3, r2
 800526e:	4631      	mov	r1, r6
 8005270:	4642      	mov	r2, r8
 8005272:	4628      	mov	r0, r5
 8005274:	47b8      	blx	r7
 8005276:	3001      	adds	r0, #1
 8005278:	d1c0      	bne.n	80051fc <_printf_float+0x304>
 800527a:	e69e      	b.n	8004fba <_printf_float+0xc2>
 800527c:	2301      	movs	r3, #1
 800527e:	4631      	mov	r1, r6
 8005280:	4628      	mov	r0, r5
 8005282:	9205      	str	r2, [sp, #20]
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f ae97 	beq.w	8004fba <_printf_float+0xc2>
 800528c:	9a05      	ldr	r2, [sp, #20]
 800528e:	f10b 0b01 	add.w	fp, fp, #1
 8005292:	e7b9      	b.n	8005208 <_printf_float+0x310>
 8005294:	ee18 3a10 	vmov	r3, s16
 8005298:	4652      	mov	r2, sl
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	d1be      	bne.n	8005222 <_printf_float+0x32a>
 80052a4:	e689      	b.n	8004fba <_printf_float+0xc2>
 80052a6:	9a05      	ldr	r2, [sp, #20]
 80052a8:	464b      	mov	r3, r9
 80052aa:	4442      	add	r2, r8
 80052ac:	4631      	mov	r1, r6
 80052ae:	4628      	mov	r0, r5
 80052b0:	47b8      	blx	r7
 80052b2:	3001      	adds	r0, #1
 80052b4:	d1c1      	bne.n	800523a <_printf_float+0x342>
 80052b6:	e680      	b.n	8004fba <_printf_float+0xc2>
 80052b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ba:	2a01      	cmp	r2, #1
 80052bc:	dc01      	bgt.n	80052c2 <_printf_float+0x3ca>
 80052be:	07db      	lsls	r3, r3, #31
 80052c0:	d538      	bpl.n	8005334 <_printf_float+0x43c>
 80052c2:	2301      	movs	r3, #1
 80052c4:	4642      	mov	r2, r8
 80052c6:	4631      	mov	r1, r6
 80052c8:	4628      	mov	r0, r5
 80052ca:	47b8      	blx	r7
 80052cc:	3001      	adds	r0, #1
 80052ce:	f43f ae74 	beq.w	8004fba <_printf_float+0xc2>
 80052d2:	ee18 3a10 	vmov	r3, s16
 80052d6:	4652      	mov	r2, sl
 80052d8:	4631      	mov	r1, r6
 80052da:	4628      	mov	r0, r5
 80052dc:	47b8      	blx	r7
 80052de:	3001      	adds	r0, #1
 80052e0:	f43f ae6b 	beq.w	8004fba <_printf_float+0xc2>
 80052e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052e8:	2200      	movs	r2, #0
 80052ea:	2300      	movs	r3, #0
 80052ec:	f7fb fc0c 	bl	8000b08 <__aeabi_dcmpeq>
 80052f0:	b9d8      	cbnz	r0, 800532a <_printf_float+0x432>
 80052f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052f4:	f108 0201 	add.w	r2, r8, #1
 80052f8:	3b01      	subs	r3, #1
 80052fa:	4631      	mov	r1, r6
 80052fc:	4628      	mov	r0, r5
 80052fe:	47b8      	blx	r7
 8005300:	3001      	adds	r0, #1
 8005302:	d10e      	bne.n	8005322 <_printf_float+0x42a>
 8005304:	e659      	b.n	8004fba <_printf_float+0xc2>
 8005306:	2301      	movs	r3, #1
 8005308:	4652      	mov	r2, sl
 800530a:	4631      	mov	r1, r6
 800530c:	4628      	mov	r0, r5
 800530e:	47b8      	blx	r7
 8005310:	3001      	adds	r0, #1
 8005312:	f43f ae52 	beq.w	8004fba <_printf_float+0xc2>
 8005316:	f108 0801 	add.w	r8, r8, #1
 800531a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800531c:	3b01      	subs	r3, #1
 800531e:	4543      	cmp	r3, r8
 8005320:	dcf1      	bgt.n	8005306 <_printf_float+0x40e>
 8005322:	464b      	mov	r3, r9
 8005324:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005328:	e6dc      	b.n	80050e4 <_printf_float+0x1ec>
 800532a:	f04f 0800 	mov.w	r8, #0
 800532e:	f104 0a1a 	add.w	sl, r4, #26
 8005332:	e7f2      	b.n	800531a <_printf_float+0x422>
 8005334:	2301      	movs	r3, #1
 8005336:	4642      	mov	r2, r8
 8005338:	e7df      	b.n	80052fa <_printf_float+0x402>
 800533a:	2301      	movs	r3, #1
 800533c:	464a      	mov	r2, r9
 800533e:	4631      	mov	r1, r6
 8005340:	4628      	mov	r0, r5
 8005342:	47b8      	blx	r7
 8005344:	3001      	adds	r0, #1
 8005346:	f43f ae38 	beq.w	8004fba <_printf_float+0xc2>
 800534a:	f108 0801 	add.w	r8, r8, #1
 800534e:	68e3      	ldr	r3, [r4, #12]
 8005350:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005352:	1a5b      	subs	r3, r3, r1
 8005354:	4543      	cmp	r3, r8
 8005356:	dcf0      	bgt.n	800533a <_printf_float+0x442>
 8005358:	e6fa      	b.n	8005150 <_printf_float+0x258>
 800535a:	f04f 0800 	mov.w	r8, #0
 800535e:	f104 0919 	add.w	r9, r4, #25
 8005362:	e7f4      	b.n	800534e <_printf_float+0x456>

08005364 <_printf_common>:
 8005364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005368:	4616      	mov	r6, r2
 800536a:	4699      	mov	r9, r3
 800536c:	688a      	ldr	r2, [r1, #8]
 800536e:	690b      	ldr	r3, [r1, #16]
 8005370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005374:	4293      	cmp	r3, r2
 8005376:	bfb8      	it	lt
 8005378:	4613      	movlt	r3, r2
 800537a:	6033      	str	r3, [r6, #0]
 800537c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005380:	4607      	mov	r7, r0
 8005382:	460c      	mov	r4, r1
 8005384:	b10a      	cbz	r2, 800538a <_printf_common+0x26>
 8005386:	3301      	adds	r3, #1
 8005388:	6033      	str	r3, [r6, #0]
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	0699      	lsls	r1, r3, #26
 800538e:	bf42      	ittt	mi
 8005390:	6833      	ldrmi	r3, [r6, #0]
 8005392:	3302      	addmi	r3, #2
 8005394:	6033      	strmi	r3, [r6, #0]
 8005396:	6825      	ldr	r5, [r4, #0]
 8005398:	f015 0506 	ands.w	r5, r5, #6
 800539c:	d106      	bne.n	80053ac <_printf_common+0x48>
 800539e:	f104 0a19 	add.w	sl, r4, #25
 80053a2:	68e3      	ldr	r3, [r4, #12]
 80053a4:	6832      	ldr	r2, [r6, #0]
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	42ab      	cmp	r3, r5
 80053aa:	dc26      	bgt.n	80053fa <_printf_common+0x96>
 80053ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053b0:	1e13      	subs	r3, r2, #0
 80053b2:	6822      	ldr	r2, [r4, #0]
 80053b4:	bf18      	it	ne
 80053b6:	2301      	movne	r3, #1
 80053b8:	0692      	lsls	r2, r2, #26
 80053ba:	d42b      	bmi.n	8005414 <_printf_common+0xb0>
 80053bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053c0:	4649      	mov	r1, r9
 80053c2:	4638      	mov	r0, r7
 80053c4:	47c0      	blx	r8
 80053c6:	3001      	adds	r0, #1
 80053c8:	d01e      	beq.n	8005408 <_printf_common+0xa4>
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	68e5      	ldr	r5, [r4, #12]
 80053ce:	6832      	ldr	r2, [r6, #0]
 80053d0:	f003 0306 	and.w	r3, r3, #6
 80053d4:	2b04      	cmp	r3, #4
 80053d6:	bf08      	it	eq
 80053d8:	1aad      	subeq	r5, r5, r2
 80053da:	68a3      	ldr	r3, [r4, #8]
 80053dc:	6922      	ldr	r2, [r4, #16]
 80053de:	bf0c      	ite	eq
 80053e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053e4:	2500      	movne	r5, #0
 80053e6:	4293      	cmp	r3, r2
 80053e8:	bfc4      	itt	gt
 80053ea:	1a9b      	subgt	r3, r3, r2
 80053ec:	18ed      	addgt	r5, r5, r3
 80053ee:	2600      	movs	r6, #0
 80053f0:	341a      	adds	r4, #26
 80053f2:	42b5      	cmp	r5, r6
 80053f4:	d11a      	bne.n	800542c <_printf_common+0xc8>
 80053f6:	2000      	movs	r0, #0
 80053f8:	e008      	b.n	800540c <_printf_common+0xa8>
 80053fa:	2301      	movs	r3, #1
 80053fc:	4652      	mov	r2, sl
 80053fe:	4649      	mov	r1, r9
 8005400:	4638      	mov	r0, r7
 8005402:	47c0      	blx	r8
 8005404:	3001      	adds	r0, #1
 8005406:	d103      	bne.n	8005410 <_printf_common+0xac>
 8005408:	f04f 30ff 	mov.w	r0, #4294967295
 800540c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005410:	3501      	adds	r5, #1
 8005412:	e7c6      	b.n	80053a2 <_printf_common+0x3e>
 8005414:	18e1      	adds	r1, r4, r3
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	2030      	movs	r0, #48	; 0x30
 800541a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800541e:	4422      	add	r2, r4
 8005420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005428:	3302      	adds	r3, #2
 800542a:	e7c7      	b.n	80053bc <_printf_common+0x58>
 800542c:	2301      	movs	r3, #1
 800542e:	4622      	mov	r2, r4
 8005430:	4649      	mov	r1, r9
 8005432:	4638      	mov	r0, r7
 8005434:	47c0      	blx	r8
 8005436:	3001      	adds	r0, #1
 8005438:	d0e6      	beq.n	8005408 <_printf_common+0xa4>
 800543a:	3601      	adds	r6, #1
 800543c:	e7d9      	b.n	80053f2 <_printf_common+0x8e>
	...

08005440 <_printf_i>:
 8005440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005444:	460c      	mov	r4, r1
 8005446:	4691      	mov	r9, r2
 8005448:	7e27      	ldrb	r7, [r4, #24]
 800544a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800544c:	2f78      	cmp	r7, #120	; 0x78
 800544e:	4680      	mov	r8, r0
 8005450:	469a      	mov	sl, r3
 8005452:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005456:	d807      	bhi.n	8005468 <_printf_i+0x28>
 8005458:	2f62      	cmp	r7, #98	; 0x62
 800545a:	d80a      	bhi.n	8005472 <_printf_i+0x32>
 800545c:	2f00      	cmp	r7, #0
 800545e:	f000 80d8 	beq.w	8005612 <_printf_i+0x1d2>
 8005462:	2f58      	cmp	r7, #88	; 0x58
 8005464:	f000 80a3 	beq.w	80055ae <_printf_i+0x16e>
 8005468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800546c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005470:	e03a      	b.n	80054e8 <_printf_i+0xa8>
 8005472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005476:	2b15      	cmp	r3, #21
 8005478:	d8f6      	bhi.n	8005468 <_printf_i+0x28>
 800547a:	a001      	add	r0, pc, #4	; (adr r0, 8005480 <_printf_i+0x40>)
 800547c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005480:	080054d9 	.word	0x080054d9
 8005484:	080054ed 	.word	0x080054ed
 8005488:	08005469 	.word	0x08005469
 800548c:	08005469 	.word	0x08005469
 8005490:	08005469 	.word	0x08005469
 8005494:	08005469 	.word	0x08005469
 8005498:	080054ed 	.word	0x080054ed
 800549c:	08005469 	.word	0x08005469
 80054a0:	08005469 	.word	0x08005469
 80054a4:	08005469 	.word	0x08005469
 80054a8:	08005469 	.word	0x08005469
 80054ac:	080055f9 	.word	0x080055f9
 80054b0:	0800551d 	.word	0x0800551d
 80054b4:	080055db 	.word	0x080055db
 80054b8:	08005469 	.word	0x08005469
 80054bc:	08005469 	.word	0x08005469
 80054c0:	0800561b 	.word	0x0800561b
 80054c4:	08005469 	.word	0x08005469
 80054c8:	0800551d 	.word	0x0800551d
 80054cc:	08005469 	.word	0x08005469
 80054d0:	08005469 	.word	0x08005469
 80054d4:	080055e3 	.word	0x080055e3
 80054d8:	680b      	ldr	r3, [r1, #0]
 80054da:	1d1a      	adds	r2, r3, #4
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	600a      	str	r2, [r1, #0]
 80054e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80054e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0a3      	b.n	8005634 <_printf_i+0x1f4>
 80054ec:	6825      	ldr	r5, [r4, #0]
 80054ee:	6808      	ldr	r0, [r1, #0]
 80054f0:	062e      	lsls	r6, r5, #24
 80054f2:	f100 0304 	add.w	r3, r0, #4
 80054f6:	d50a      	bpl.n	800550e <_printf_i+0xce>
 80054f8:	6805      	ldr	r5, [r0, #0]
 80054fa:	600b      	str	r3, [r1, #0]
 80054fc:	2d00      	cmp	r5, #0
 80054fe:	da03      	bge.n	8005508 <_printf_i+0xc8>
 8005500:	232d      	movs	r3, #45	; 0x2d
 8005502:	426d      	negs	r5, r5
 8005504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005508:	485e      	ldr	r0, [pc, #376]	; (8005684 <_printf_i+0x244>)
 800550a:	230a      	movs	r3, #10
 800550c:	e019      	b.n	8005542 <_printf_i+0x102>
 800550e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005512:	6805      	ldr	r5, [r0, #0]
 8005514:	600b      	str	r3, [r1, #0]
 8005516:	bf18      	it	ne
 8005518:	b22d      	sxthne	r5, r5
 800551a:	e7ef      	b.n	80054fc <_printf_i+0xbc>
 800551c:	680b      	ldr	r3, [r1, #0]
 800551e:	6825      	ldr	r5, [r4, #0]
 8005520:	1d18      	adds	r0, r3, #4
 8005522:	6008      	str	r0, [r1, #0]
 8005524:	0628      	lsls	r0, r5, #24
 8005526:	d501      	bpl.n	800552c <_printf_i+0xec>
 8005528:	681d      	ldr	r5, [r3, #0]
 800552a:	e002      	b.n	8005532 <_printf_i+0xf2>
 800552c:	0669      	lsls	r1, r5, #25
 800552e:	d5fb      	bpl.n	8005528 <_printf_i+0xe8>
 8005530:	881d      	ldrh	r5, [r3, #0]
 8005532:	4854      	ldr	r0, [pc, #336]	; (8005684 <_printf_i+0x244>)
 8005534:	2f6f      	cmp	r7, #111	; 0x6f
 8005536:	bf0c      	ite	eq
 8005538:	2308      	moveq	r3, #8
 800553a:	230a      	movne	r3, #10
 800553c:	2100      	movs	r1, #0
 800553e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005542:	6866      	ldr	r6, [r4, #4]
 8005544:	60a6      	str	r6, [r4, #8]
 8005546:	2e00      	cmp	r6, #0
 8005548:	bfa2      	ittt	ge
 800554a:	6821      	ldrge	r1, [r4, #0]
 800554c:	f021 0104 	bicge.w	r1, r1, #4
 8005550:	6021      	strge	r1, [r4, #0]
 8005552:	b90d      	cbnz	r5, 8005558 <_printf_i+0x118>
 8005554:	2e00      	cmp	r6, #0
 8005556:	d04d      	beq.n	80055f4 <_printf_i+0x1b4>
 8005558:	4616      	mov	r6, r2
 800555a:	fbb5 f1f3 	udiv	r1, r5, r3
 800555e:	fb03 5711 	mls	r7, r3, r1, r5
 8005562:	5dc7      	ldrb	r7, [r0, r7]
 8005564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005568:	462f      	mov	r7, r5
 800556a:	42bb      	cmp	r3, r7
 800556c:	460d      	mov	r5, r1
 800556e:	d9f4      	bls.n	800555a <_printf_i+0x11a>
 8005570:	2b08      	cmp	r3, #8
 8005572:	d10b      	bne.n	800558c <_printf_i+0x14c>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	07df      	lsls	r7, r3, #31
 8005578:	d508      	bpl.n	800558c <_printf_i+0x14c>
 800557a:	6923      	ldr	r3, [r4, #16]
 800557c:	6861      	ldr	r1, [r4, #4]
 800557e:	4299      	cmp	r1, r3
 8005580:	bfde      	ittt	le
 8005582:	2330      	movle	r3, #48	; 0x30
 8005584:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005588:	f106 36ff 	addle.w	r6, r6, #4294967295
 800558c:	1b92      	subs	r2, r2, r6
 800558e:	6122      	str	r2, [r4, #16]
 8005590:	f8cd a000 	str.w	sl, [sp]
 8005594:	464b      	mov	r3, r9
 8005596:	aa03      	add	r2, sp, #12
 8005598:	4621      	mov	r1, r4
 800559a:	4640      	mov	r0, r8
 800559c:	f7ff fee2 	bl	8005364 <_printf_common>
 80055a0:	3001      	adds	r0, #1
 80055a2:	d14c      	bne.n	800563e <_printf_i+0x1fe>
 80055a4:	f04f 30ff 	mov.w	r0, #4294967295
 80055a8:	b004      	add	sp, #16
 80055aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ae:	4835      	ldr	r0, [pc, #212]	; (8005684 <_printf_i+0x244>)
 80055b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	680e      	ldr	r6, [r1, #0]
 80055b8:	061f      	lsls	r7, r3, #24
 80055ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80055be:	600e      	str	r6, [r1, #0]
 80055c0:	d514      	bpl.n	80055ec <_printf_i+0x1ac>
 80055c2:	07d9      	lsls	r1, r3, #31
 80055c4:	bf44      	itt	mi
 80055c6:	f043 0320 	orrmi.w	r3, r3, #32
 80055ca:	6023      	strmi	r3, [r4, #0]
 80055cc:	b91d      	cbnz	r5, 80055d6 <_printf_i+0x196>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	f023 0320 	bic.w	r3, r3, #32
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	2310      	movs	r3, #16
 80055d8:	e7b0      	b.n	800553c <_printf_i+0xfc>
 80055da:	6823      	ldr	r3, [r4, #0]
 80055dc:	f043 0320 	orr.w	r3, r3, #32
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	2378      	movs	r3, #120	; 0x78
 80055e4:	4828      	ldr	r0, [pc, #160]	; (8005688 <_printf_i+0x248>)
 80055e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055ea:	e7e3      	b.n	80055b4 <_printf_i+0x174>
 80055ec:	065e      	lsls	r6, r3, #25
 80055ee:	bf48      	it	mi
 80055f0:	b2ad      	uxthmi	r5, r5
 80055f2:	e7e6      	b.n	80055c2 <_printf_i+0x182>
 80055f4:	4616      	mov	r6, r2
 80055f6:	e7bb      	b.n	8005570 <_printf_i+0x130>
 80055f8:	680b      	ldr	r3, [r1, #0]
 80055fa:	6826      	ldr	r6, [r4, #0]
 80055fc:	6960      	ldr	r0, [r4, #20]
 80055fe:	1d1d      	adds	r5, r3, #4
 8005600:	600d      	str	r5, [r1, #0]
 8005602:	0635      	lsls	r5, r6, #24
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	d501      	bpl.n	800560c <_printf_i+0x1cc>
 8005608:	6018      	str	r0, [r3, #0]
 800560a:	e002      	b.n	8005612 <_printf_i+0x1d2>
 800560c:	0671      	lsls	r1, r6, #25
 800560e:	d5fb      	bpl.n	8005608 <_printf_i+0x1c8>
 8005610:	8018      	strh	r0, [r3, #0]
 8005612:	2300      	movs	r3, #0
 8005614:	6123      	str	r3, [r4, #16]
 8005616:	4616      	mov	r6, r2
 8005618:	e7ba      	b.n	8005590 <_printf_i+0x150>
 800561a:	680b      	ldr	r3, [r1, #0]
 800561c:	1d1a      	adds	r2, r3, #4
 800561e:	600a      	str	r2, [r1, #0]
 8005620:	681e      	ldr	r6, [r3, #0]
 8005622:	6862      	ldr	r2, [r4, #4]
 8005624:	2100      	movs	r1, #0
 8005626:	4630      	mov	r0, r6
 8005628:	f7fa fdfa 	bl	8000220 <memchr>
 800562c:	b108      	cbz	r0, 8005632 <_printf_i+0x1f2>
 800562e:	1b80      	subs	r0, r0, r6
 8005630:	6060      	str	r0, [r4, #4]
 8005632:	6863      	ldr	r3, [r4, #4]
 8005634:	6123      	str	r3, [r4, #16]
 8005636:	2300      	movs	r3, #0
 8005638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800563c:	e7a8      	b.n	8005590 <_printf_i+0x150>
 800563e:	6923      	ldr	r3, [r4, #16]
 8005640:	4632      	mov	r2, r6
 8005642:	4649      	mov	r1, r9
 8005644:	4640      	mov	r0, r8
 8005646:	47d0      	blx	sl
 8005648:	3001      	adds	r0, #1
 800564a:	d0ab      	beq.n	80055a4 <_printf_i+0x164>
 800564c:	6823      	ldr	r3, [r4, #0]
 800564e:	079b      	lsls	r3, r3, #30
 8005650:	d413      	bmi.n	800567a <_printf_i+0x23a>
 8005652:	68e0      	ldr	r0, [r4, #12]
 8005654:	9b03      	ldr	r3, [sp, #12]
 8005656:	4298      	cmp	r0, r3
 8005658:	bfb8      	it	lt
 800565a:	4618      	movlt	r0, r3
 800565c:	e7a4      	b.n	80055a8 <_printf_i+0x168>
 800565e:	2301      	movs	r3, #1
 8005660:	4632      	mov	r2, r6
 8005662:	4649      	mov	r1, r9
 8005664:	4640      	mov	r0, r8
 8005666:	47d0      	blx	sl
 8005668:	3001      	adds	r0, #1
 800566a:	d09b      	beq.n	80055a4 <_printf_i+0x164>
 800566c:	3501      	adds	r5, #1
 800566e:	68e3      	ldr	r3, [r4, #12]
 8005670:	9903      	ldr	r1, [sp, #12]
 8005672:	1a5b      	subs	r3, r3, r1
 8005674:	42ab      	cmp	r3, r5
 8005676:	dcf2      	bgt.n	800565e <_printf_i+0x21e>
 8005678:	e7eb      	b.n	8005652 <_printf_i+0x212>
 800567a:	2500      	movs	r5, #0
 800567c:	f104 0619 	add.w	r6, r4, #25
 8005680:	e7f5      	b.n	800566e <_printf_i+0x22e>
 8005682:	bf00      	nop
 8005684:	08007b3a 	.word	0x08007b3a
 8005688:	08007b4b 	.word	0x08007b4b

0800568c <siprintf>:
 800568c:	b40e      	push	{r1, r2, r3}
 800568e:	b500      	push	{lr}
 8005690:	b09c      	sub	sp, #112	; 0x70
 8005692:	ab1d      	add	r3, sp, #116	; 0x74
 8005694:	9002      	str	r0, [sp, #8]
 8005696:	9006      	str	r0, [sp, #24]
 8005698:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800569c:	4809      	ldr	r0, [pc, #36]	; (80056c4 <siprintf+0x38>)
 800569e:	9107      	str	r1, [sp, #28]
 80056a0:	9104      	str	r1, [sp, #16]
 80056a2:	4909      	ldr	r1, [pc, #36]	; (80056c8 <siprintf+0x3c>)
 80056a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80056a8:	9105      	str	r1, [sp, #20]
 80056aa:	6800      	ldr	r0, [r0, #0]
 80056ac:	9301      	str	r3, [sp, #4]
 80056ae:	a902      	add	r1, sp, #8
 80056b0:	f001 fb34 	bl	8006d1c <_svfiprintf_r>
 80056b4:	9b02      	ldr	r3, [sp, #8]
 80056b6:	2200      	movs	r2, #0
 80056b8:	701a      	strb	r2, [r3, #0]
 80056ba:	b01c      	add	sp, #112	; 0x70
 80056bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80056c0:	b003      	add	sp, #12
 80056c2:	4770      	bx	lr
 80056c4:	2000000c 	.word	0x2000000c
 80056c8:	ffff0208 	.word	0xffff0208

080056cc <quorem>:
 80056cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d0:	6903      	ldr	r3, [r0, #16]
 80056d2:	690c      	ldr	r4, [r1, #16]
 80056d4:	42a3      	cmp	r3, r4
 80056d6:	4607      	mov	r7, r0
 80056d8:	f2c0 8081 	blt.w	80057de <quorem+0x112>
 80056dc:	3c01      	subs	r4, #1
 80056de:	f101 0814 	add.w	r8, r1, #20
 80056e2:	f100 0514 	add.w	r5, r0, #20
 80056e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056ea:	9301      	str	r3, [sp, #4]
 80056ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80056f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056f4:	3301      	adds	r3, #1
 80056f6:	429a      	cmp	r2, r3
 80056f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80056fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005700:	fbb2 f6f3 	udiv	r6, r2, r3
 8005704:	d331      	bcc.n	800576a <quorem+0x9e>
 8005706:	f04f 0e00 	mov.w	lr, #0
 800570a:	4640      	mov	r0, r8
 800570c:	46ac      	mov	ip, r5
 800570e:	46f2      	mov	sl, lr
 8005710:	f850 2b04 	ldr.w	r2, [r0], #4
 8005714:	b293      	uxth	r3, r2
 8005716:	fb06 e303 	mla	r3, r6, r3, lr
 800571a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800571e:	b29b      	uxth	r3, r3
 8005720:	ebaa 0303 	sub.w	r3, sl, r3
 8005724:	0c12      	lsrs	r2, r2, #16
 8005726:	f8dc a000 	ldr.w	sl, [ip]
 800572a:	fb06 e202 	mla	r2, r6, r2, lr
 800572e:	fa13 f38a 	uxtah	r3, r3, sl
 8005732:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005736:	fa1f fa82 	uxth.w	sl, r2
 800573a:	f8dc 2000 	ldr.w	r2, [ip]
 800573e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005742:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005746:	b29b      	uxth	r3, r3
 8005748:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800574c:	4581      	cmp	r9, r0
 800574e:	f84c 3b04 	str.w	r3, [ip], #4
 8005752:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005756:	d2db      	bcs.n	8005710 <quorem+0x44>
 8005758:	f855 300b 	ldr.w	r3, [r5, fp]
 800575c:	b92b      	cbnz	r3, 800576a <quorem+0x9e>
 800575e:	9b01      	ldr	r3, [sp, #4]
 8005760:	3b04      	subs	r3, #4
 8005762:	429d      	cmp	r5, r3
 8005764:	461a      	mov	r2, r3
 8005766:	d32e      	bcc.n	80057c6 <quorem+0xfa>
 8005768:	613c      	str	r4, [r7, #16]
 800576a:	4638      	mov	r0, r7
 800576c:	f001 f8c0 	bl	80068f0 <__mcmp>
 8005770:	2800      	cmp	r0, #0
 8005772:	db24      	blt.n	80057be <quorem+0xf2>
 8005774:	3601      	adds	r6, #1
 8005776:	4628      	mov	r0, r5
 8005778:	f04f 0c00 	mov.w	ip, #0
 800577c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005780:	f8d0 e000 	ldr.w	lr, [r0]
 8005784:	b293      	uxth	r3, r2
 8005786:	ebac 0303 	sub.w	r3, ip, r3
 800578a:	0c12      	lsrs	r2, r2, #16
 800578c:	fa13 f38e 	uxtah	r3, r3, lr
 8005790:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005794:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005798:	b29b      	uxth	r3, r3
 800579a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800579e:	45c1      	cmp	r9, r8
 80057a0:	f840 3b04 	str.w	r3, [r0], #4
 80057a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80057a8:	d2e8      	bcs.n	800577c <quorem+0xb0>
 80057aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057b2:	b922      	cbnz	r2, 80057be <quorem+0xf2>
 80057b4:	3b04      	subs	r3, #4
 80057b6:	429d      	cmp	r5, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	d30a      	bcc.n	80057d2 <quorem+0x106>
 80057bc:	613c      	str	r4, [r7, #16]
 80057be:	4630      	mov	r0, r6
 80057c0:	b003      	add	sp, #12
 80057c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057c6:	6812      	ldr	r2, [r2, #0]
 80057c8:	3b04      	subs	r3, #4
 80057ca:	2a00      	cmp	r2, #0
 80057cc:	d1cc      	bne.n	8005768 <quorem+0x9c>
 80057ce:	3c01      	subs	r4, #1
 80057d0:	e7c7      	b.n	8005762 <quorem+0x96>
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	3b04      	subs	r3, #4
 80057d6:	2a00      	cmp	r2, #0
 80057d8:	d1f0      	bne.n	80057bc <quorem+0xf0>
 80057da:	3c01      	subs	r4, #1
 80057dc:	e7eb      	b.n	80057b6 <quorem+0xea>
 80057de:	2000      	movs	r0, #0
 80057e0:	e7ee      	b.n	80057c0 <quorem+0xf4>
 80057e2:	0000      	movs	r0, r0
 80057e4:	0000      	movs	r0, r0
	...

080057e8 <_dtoa_r>:
 80057e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ec:	ed2d 8b02 	vpush	{d8}
 80057f0:	ec57 6b10 	vmov	r6, r7, d0
 80057f4:	b095      	sub	sp, #84	; 0x54
 80057f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80057f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80057fc:	9105      	str	r1, [sp, #20]
 80057fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005802:	4604      	mov	r4, r0
 8005804:	9209      	str	r2, [sp, #36]	; 0x24
 8005806:	930f      	str	r3, [sp, #60]	; 0x3c
 8005808:	b975      	cbnz	r5, 8005828 <_dtoa_r+0x40>
 800580a:	2010      	movs	r0, #16
 800580c:	f000 fddc 	bl	80063c8 <malloc>
 8005810:	4602      	mov	r2, r0
 8005812:	6260      	str	r0, [r4, #36]	; 0x24
 8005814:	b920      	cbnz	r0, 8005820 <_dtoa_r+0x38>
 8005816:	4bb2      	ldr	r3, [pc, #712]	; (8005ae0 <_dtoa_r+0x2f8>)
 8005818:	21ea      	movs	r1, #234	; 0xea
 800581a:	48b2      	ldr	r0, [pc, #712]	; (8005ae4 <_dtoa_r+0x2fc>)
 800581c:	f001 fb8e 	bl	8006f3c <__assert_func>
 8005820:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005824:	6005      	str	r5, [r0, #0]
 8005826:	60c5      	str	r5, [r0, #12]
 8005828:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800582a:	6819      	ldr	r1, [r3, #0]
 800582c:	b151      	cbz	r1, 8005844 <_dtoa_r+0x5c>
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	604a      	str	r2, [r1, #4]
 8005832:	2301      	movs	r3, #1
 8005834:	4093      	lsls	r3, r2
 8005836:	608b      	str	r3, [r1, #8]
 8005838:	4620      	mov	r0, r4
 800583a:	f000 fe1b 	bl	8006474 <_Bfree>
 800583e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005840:	2200      	movs	r2, #0
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	1e3b      	subs	r3, r7, #0
 8005846:	bfb9      	ittee	lt
 8005848:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800584c:	9303      	strlt	r3, [sp, #12]
 800584e:	2300      	movge	r3, #0
 8005850:	f8c8 3000 	strge.w	r3, [r8]
 8005854:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005858:	4ba3      	ldr	r3, [pc, #652]	; (8005ae8 <_dtoa_r+0x300>)
 800585a:	bfbc      	itt	lt
 800585c:	2201      	movlt	r2, #1
 800585e:	f8c8 2000 	strlt.w	r2, [r8]
 8005862:	ea33 0309 	bics.w	r3, r3, r9
 8005866:	d11b      	bne.n	80058a0 <_dtoa_r+0xb8>
 8005868:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800586a:	f242 730f 	movw	r3, #9999	; 0x270f
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005874:	4333      	orrs	r3, r6
 8005876:	f000 857a 	beq.w	800636e <_dtoa_r+0xb86>
 800587a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800587c:	b963      	cbnz	r3, 8005898 <_dtoa_r+0xb0>
 800587e:	4b9b      	ldr	r3, [pc, #620]	; (8005aec <_dtoa_r+0x304>)
 8005880:	e024      	b.n	80058cc <_dtoa_r+0xe4>
 8005882:	4b9b      	ldr	r3, [pc, #620]	; (8005af0 <_dtoa_r+0x308>)
 8005884:	9300      	str	r3, [sp, #0]
 8005886:	3308      	adds	r3, #8
 8005888:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	9800      	ldr	r0, [sp, #0]
 800588e:	b015      	add	sp, #84	; 0x54
 8005890:	ecbd 8b02 	vpop	{d8}
 8005894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005898:	4b94      	ldr	r3, [pc, #592]	; (8005aec <_dtoa_r+0x304>)
 800589a:	9300      	str	r3, [sp, #0]
 800589c:	3303      	adds	r3, #3
 800589e:	e7f3      	b.n	8005888 <_dtoa_r+0xa0>
 80058a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80058a4:	2200      	movs	r2, #0
 80058a6:	ec51 0b17 	vmov	r0, r1, d7
 80058aa:	2300      	movs	r3, #0
 80058ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80058b0:	f7fb f92a 	bl	8000b08 <__aeabi_dcmpeq>
 80058b4:	4680      	mov	r8, r0
 80058b6:	b158      	cbz	r0, 80058d0 <_dtoa_r+0xe8>
 80058b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80058ba:	2301      	movs	r3, #1
 80058bc:	6013      	str	r3, [r2, #0]
 80058be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	f000 8551 	beq.w	8006368 <_dtoa_r+0xb80>
 80058c6:	488b      	ldr	r0, [pc, #556]	; (8005af4 <_dtoa_r+0x30c>)
 80058c8:	6018      	str	r0, [r3, #0]
 80058ca:	1e43      	subs	r3, r0, #1
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	e7dd      	b.n	800588c <_dtoa_r+0xa4>
 80058d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80058d4:	aa12      	add	r2, sp, #72	; 0x48
 80058d6:	a913      	add	r1, sp, #76	; 0x4c
 80058d8:	4620      	mov	r0, r4
 80058da:	f001 f8ad 	bl	8006a38 <__d2b>
 80058de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80058e2:	4683      	mov	fp, r0
 80058e4:	2d00      	cmp	r5, #0
 80058e6:	d07c      	beq.n	80059e2 <_dtoa_r+0x1fa>
 80058e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80058ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80058f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80058fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80058fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005902:	4b7d      	ldr	r3, [pc, #500]	; (8005af8 <_dtoa_r+0x310>)
 8005904:	2200      	movs	r2, #0
 8005906:	4630      	mov	r0, r6
 8005908:	4639      	mov	r1, r7
 800590a:	f7fa fcdd 	bl	80002c8 <__aeabi_dsub>
 800590e:	a36e      	add	r3, pc, #440	; (adr r3, 8005ac8 <_dtoa_r+0x2e0>)
 8005910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005914:	f7fa fe90 	bl	8000638 <__aeabi_dmul>
 8005918:	a36d      	add	r3, pc, #436	; (adr r3, 8005ad0 <_dtoa_r+0x2e8>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f7fa fcd5 	bl	80002cc <__adddf3>
 8005922:	4606      	mov	r6, r0
 8005924:	4628      	mov	r0, r5
 8005926:	460f      	mov	r7, r1
 8005928:	f7fa fe1c 	bl	8000564 <__aeabi_i2d>
 800592c:	a36a      	add	r3, pc, #424	; (adr r3, 8005ad8 <_dtoa_r+0x2f0>)
 800592e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005932:	f7fa fe81 	bl	8000638 <__aeabi_dmul>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4630      	mov	r0, r6
 800593c:	4639      	mov	r1, r7
 800593e:	f7fa fcc5 	bl	80002cc <__adddf3>
 8005942:	4606      	mov	r6, r0
 8005944:	460f      	mov	r7, r1
 8005946:	f7fb f927 	bl	8000b98 <__aeabi_d2iz>
 800594a:	2200      	movs	r2, #0
 800594c:	4682      	mov	sl, r0
 800594e:	2300      	movs	r3, #0
 8005950:	4630      	mov	r0, r6
 8005952:	4639      	mov	r1, r7
 8005954:	f7fb f8e2 	bl	8000b1c <__aeabi_dcmplt>
 8005958:	b148      	cbz	r0, 800596e <_dtoa_r+0x186>
 800595a:	4650      	mov	r0, sl
 800595c:	f7fa fe02 	bl	8000564 <__aeabi_i2d>
 8005960:	4632      	mov	r2, r6
 8005962:	463b      	mov	r3, r7
 8005964:	f7fb f8d0 	bl	8000b08 <__aeabi_dcmpeq>
 8005968:	b908      	cbnz	r0, 800596e <_dtoa_r+0x186>
 800596a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800596e:	f1ba 0f16 	cmp.w	sl, #22
 8005972:	d854      	bhi.n	8005a1e <_dtoa_r+0x236>
 8005974:	4b61      	ldr	r3, [pc, #388]	; (8005afc <_dtoa_r+0x314>)
 8005976:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005982:	f7fb f8cb 	bl	8000b1c <__aeabi_dcmplt>
 8005986:	2800      	cmp	r0, #0
 8005988:	d04b      	beq.n	8005a22 <_dtoa_r+0x23a>
 800598a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800598e:	2300      	movs	r3, #0
 8005990:	930e      	str	r3, [sp, #56]	; 0x38
 8005992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005994:	1b5d      	subs	r5, r3, r5
 8005996:	1e6b      	subs	r3, r5, #1
 8005998:	9304      	str	r3, [sp, #16]
 800599a:	bf43      	ittte	mi
 800599c:	2300      	movmi	r3, #0
 800599e:	f1c5 0801 	rsbmi	r8, r5, #1
 80059a2:	9304      	strmi	r3, [sp, #16]
 80059a4:	f04f 0800 	movpl.w	r8, #0
 80059a8:	f1ba 0f00 	cmp.w	sl, #0
 80059ac:	db3b      	blt.n	8005a26 <_dtoa_r+0x23e>
 80059ae:	9b04      	ldr	r3, [sp, #16]
 80059b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80059b4:	4453      	add	r3, sl
 80059b6:	9304      	str	r3, [sp, #16]
 80059b8:	2300      	movs	r3, #0
 80059ba:	9306      	str	r3, [sp, #24]
 80059bc:	9b05      	ldr	r3, [sp, #20]
 80059be:	2b09      	cmp	r3, #9
 80059c0:	d869      	bhi.n	8005a96 <_dtoa_r+0x2ae>
 80059c2:	2b05      	cmp	r3, #5
 80059c4:	bfc4      	itt	gt
 80059c6:	3b04      	subgt	r3, #4
 80059c8:	9305      	strgt	r3, [sp, #20]
 80059ca:	9b05      	ldr	r3, [sp, #20]
 80059cc:	f1a3 0302 	sub.w	r3, r3, #2
 80059d0:	bfcc      	ite	gt
 80059d2:	2500      	movgt	r5, #0
 80059d4:	2501      	movle	r5, #1
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	d869      	bhi.n	8005aae <_dtoa_r+0x2c6>
 80059da:	e8df f003 	tbb	[pc, r3]
 80059de:	4e2c      	.short	0x4e2c
 80059e0:	5a4c      	.short	0x5a4c
 80059e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80059e6:	441d      	add	r5, r3
 80059e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	bfc1      	itttt	gt
 80059f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80059f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80059f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80059fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005a00:	bfda      	itte	le
 8005a02:	f1c3 0320 	rsble	r3, r3, #32
 8005a06:	fa06 f003 	lslle.w	r0, r6, r3
 8005a0a:	4318      	orrgt	r0, r3
 8005a0c:	f7fa fd9a 	bl	8000544 <__aeabi_ui2d>
 8005a10:	2301      	movs	r3, #1
 8005a12:	4606      	mov	r6, r0
 8005a14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005a18:	3d01      	subs	r5, #1
 8005a1a:	9310      	str	r3, [sp, #64]	; 0x40
 8005a1c:	e771      	b.n	8005902 <_dtoa_r+0x11a>
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e7b6      	b.n	8005990 <_dtoa_r+0x1a8>
 8005a22:	900e      	str	r0, [sp, #56]	; 0x38
 8005a24:	e7b5      	b.n	8005992 <_dtoa_r+0x1aa>
 8005a26:	f1ca 0300 	rsb	r3, sl, #0
 8005a2a:	9306      	str	r3, [sp, #24]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	eba8 080a 	sub.w	r8, r8, sl
 8005a32:	930d      	str	r3, [sp, #52]	; 0x34
 8005a34:	e7c2      	b.n	80059bc <_dtoa_r+0x1d4>
 8005a36:	2300      	movs	r3, #0
 8005a38:	9308      	str	r3, [sp, #32]
 8005a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	dc39      	bgt.n	8005ab4 <_dtoa_r+0x2cc>
 8005a40:	f04f 0901 	mov.w	r9, #1
 8005a44:	f8cd 9004 	str.w	r9, [sp, #4]
 8005a48:	464b      	mov	r3, r9
 8005a4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005a4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005a50:	2200      	movs	r2, #0
 8005a52:	6042      	str	r2, [r0, #4]
 8005a54:	2204      	movs	r2, #4
 8005a56:	f102 0614 	add.w	r6, r2, #20
 8005a5a:	429e      	cmp	r6, r3
 8005a5c:	6841      	ldr	r1, [r0, #4]
 8005a5e:	d92f      	bls.n	8005ac0 <_dtoa_r+0x2d8>
 8005a60:	4620      	mov	r0, r4
 8005a62:	f000 fcc7 	bl	80063f4 <_Balloc>
 8005a66:	9000      	str	r0, [sp, #0]
 8005a68:	2800      	cmp	r0, #0
 8005a6a:	d14b      	bne.n	8005b04 <_dtoa_r+0x31c>
 8005a6c:	4b24      	ldr	r3, [pc, #144]	; (8005b00 <_dtoa_r+0x318>)
 8005a6e:	4602      	mov	r2, r0
 8005a70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005a74:	e6d1      	b.n	800581a <_dtoa_r+0x32>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e7de      	b.n	8005a38 <_dtoa_r+0x250>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9308      	str	r3, [sp, #32]
 8005a7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a80:	eb0a 0903 	add.w	r9, sl, r3
 8005a84:	f109 0301 	add.w	r3, r9, #1
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	9301      	str	r3, [sp, #4]
 8005a8c:	bfb8      	it	lt
 8005a8e:	2301      	movlt	r3, #1
 8005a90:	e7dd      	b.n	8005a4e <_dtoa_r+0x266>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e7f2      	b.n	8005a7c <_dtoa_r+0x294>
 8005a96:	2501      	movs	r5, #1
 8005a98:	2300      	movs	r3, #0
 8005a9a:	9305      	str	r3, [sp, #20]
 8005a9c:	9508      	str	r5, [sp, #32]
 8005a9e:	f04f 39ff 	mov.w	r9, #4294967295
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005aa8:	2312      	movs	r3, #18
 8005aaa:	9209      	str	r2, [sp, #36]	; 0x24
 8005aac:	e7cf      	b.n	8005a4e <_dtoa_r+0x266>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	9308      	str	r3, [sp, #32]
 8005ab2:	e7f4      	b.n	8005a9e <_dtoa_r+0x2b6>
 8005ab4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005ab8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005abc:	464b      	mov	r3, r9
 8005abe:	e7c6      	b.n	8005a4e <_dtoa_r+0x266>
 8005ac0:	3101      	adds	r1, #1
 8005ac2:	6041      	str	r1, [r0, #4]
 8005ac4:	0052      	lsls	r2, r2, #1
 8005ac6:	e7c6      	b.n	8005a56 <_dtoa_r+0x26e>
 8005ac8:	636f4361 	.word	0x636f4361
 8005acc:	3fd287a7 	.word	0x3fd287a7
 8005ad0:	8b60c8b3 	.word	0x8b60c8b3
 8005ad4:	3fc68a28 	.word	0x3fc68a28
 8005ad8:	509f79fb 	.word	0x509f79fb
 8005adc:	3fd34413 	.word	0x3fd34413
 8005ae0:	08007b69 	.word	0x08007b69
 8005ae4:	08007b80 	.word	0x08007b80
 8005ae8:	7ff00000 	.word	0x7ff00000
 8005aec:	08007b65 	.word	0x08007b65
 8005af0:	08007b5c 	.word	0x08007b5c
 8005af4:	08007b39 	.word	0x08007b39
 8005af8:	3ff80000 	.word	0x3ff80000
 8005afc:	08007c78 	.word	0x08007c78
 8005b00:	08007bdf 	.word	0x08007bdf
 8005b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b06:	9a00      	ldr	r2, [sp, #0]
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	9b01      	ldr	r3, [sp, #4]
 8005b0c:	2b0e      	cmp	r3, #14
 8005b0e:	f200 80ad 	bhi.w	8005c6c <_dtoa_r+0x484>
 8005b12:	2d00      	cmp	r5, #0
 8005b14:	f000 80aa 	beq.w	8005c6c <_dtoa_r+0x484>
 8005b18:	f1ba 0f00 	cmp.w	sl, #0
 8005b1c:	dd36      	ble.n	8005b8c <_dtoa_r+0x3a4>
 8005b1e:	4ac3      	ldr	r2, [pc, #780]	; (8005e2c <_dtoa_r+0x644>)
 8005b20:	f00a 030f 	and.w	r3, sl, #15
 8005b24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005b28:	ed93 7b00 	vldr	d7, [r3]
 8005b2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005b30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005b34:	eeb0 8a47 	vmov.f32	s16, s14
 8005b38:	eef0 8a67 	vmov.f32	s17, s15
 8005b3c:	d016      	beq.n	8005b6c <_dtoa_r+0x384>
 8005b3e:	4bbc      	ldr	r3, [pc, #752]	; (8005e30 <_dtoa_r+0x648>)
 8005b40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b48:	f7fa fea0 	bl	800088c <__aeabi_ddiv>
 8005b4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b50:	f007 070f 	and.w	r7, r7, #15
 8005b54:	2503      	movs	r5, #3
 8005b56:	4eb6      	ldr	r6, [pc, #728]	; (8005e30 <_dtoa_r+0x648>)
 8005b58:	b957      	cbnz	r7, 8005b70 <_dtoa_r+0x388>
 8005b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b5e:	ec53 2b18 	vmov	r2, r3, d8
 8005b62:	f7fa fe93 	bl	800088c <__aeabi_ddiv>
 8005b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b6a:	e029      	b.n	8005bc0 <_dtoa_r+0x3d8>
 8005b6c:	2502      	movs	r5, #2
 8005b6e:	e7f2      	b.n	8005b56 <_dtoa_r+0x36e>
 8005b70:	07f9      	lsls	r1, r7, #31
 8005b72:	d508      	bpl.n	8005b86 <_dtoa_r+0x39e>
 8005b74:	ec51 0b18 	vmov	r0, r1, d8
 8005b78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b7c:	f7fa fd5c 	bl	8000638 <__aeabi_dmul>
 8005b80:	ec41 0b18 	vmov	d8, r0, r1
 8005b84:	3501      	adds	r5, #1
 8005b86:	107f      	asrs	r7, r7, #1
 8005b88:	3608      	adds	r6, #8
 8005b8a:	e7e5      	b.n	8005b58 <_dtoa_r+0x370>
 8005b8c:	f000 80a6 	beq.w	8005cdc <_dtoa_r+0x4f4>
 8005b90:	f1ca 0600 	rsb	r6, sl, #0
 8005b94:	4ba5      	ldr	r3, [pc, #660]	; (8005e2c <_dtoa_r+0x644>)
 8005b96:	4fa6      	ldr	r7, [pc, #664]	; (8005e30 <_dtoa_r+0x648>)
 8005b98:	f006 020f 	and.w	r2, r6, #15
 8005b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ba8:	f7fa fd46 	bl	8000638 <__aeabi_dmul>
 8005bac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bb0:	1136      	asrs	r6, r6, #4
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	2502      	movs	r5, #2
 8005bb6:	2e00      	cmp	r6, #0
 8005bb8:	f040 8085 	bne.w	8005cc6 <_dtoa_r+0x4de>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1d2      	bne.n	8005b66 <_dtoa_r+0x37e>
 8005bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 808c 	beq.w	8005ce0 <_dtoa_r+0x4f8>
 8005bc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005bcc:	4b99      	ldr	r3, [pc, #612]	; (8005e34 <_dtoa_r+0x64c>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	4630      	mov	r0, r6
 8005bd2:	4639      	mov	r1, r7
 8005bd4:	f7fa ffa2 	bl	8000b1c <__aeabi_dcmplt>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	f000 8081 	beq.w	8005ce0 <_dtoa_r+0x4f8>
 8005bde:	9b01      	ldr	r3, [sp, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d07d      	beq.n	8005ce0 <_dtoa_r+0x4f8>
 8005be4:	f1b9 0f00 	cmp.w	r9, #0
 8005be8:	dd3c      	ble.n	8005c64 <_dtoa_r+0x47c>
 8005bea:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005bee:	9307      	str	r3, [sp, #28]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	4b91      	ldr	r3, [pc, #580]	; (8005e38 <_dtoa_r+0x650>)
 8005bf4:	4630      	mov	r0, r6
 8005bf6:	4639      	mov	r1, r7
 8005bf8:	f7fa fd1e 	bl	8000638 <__aeabi_dmul>
 8005bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c00:	3501      	adds	r5, #1
 8005c02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005c06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	f7fa fcaa 	bl	8000564 <__aeabi_i2d>
 8005c10:	4632      	mov	r2, r6
 8005c12:	463b      	mov	r3, r7
 8005c14:	f7fa fd10 	bl	8000638 <__aeabi_dmul>
 8005c18:	4b88      	ldr	r3, [pc, #544]	; (8005e3c <_dtoa_r+0x654>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f7fa fb56 	bl	80002cc <__adddf3>
 8005c20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005c24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c28:	9303      	str	r3, [sp, #12]
 8005c2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d15c      	bne.n	8005cea <_dtoa_r+0x502>
 8005c30:	4b83      	ldr	r3, [pc, #524]	; (8005e40 <_dtoa_r+0x658>)
 8005c32:	2200      	movs	r2, #0
 8005c34:	4630      	mov	r0, r6
 8005c36:	4639      	mov	r1, r7
 8005c38:	f7fa fb46 	bl	80002c8 <__aeabi_dsub>
 8005c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c40:	4606      	mov	r6, r0
 8005c42:	460f      	mov	r7, r1
 8005c44:	f7fa ff88 	bl	8000b58 <__aeabi_dcmpgt>
 8005c48:	2800      	cmp	r0, #0
 8005c4a:	f040 8296 	bne.w	800617a <_dtoa_r+0x992>
 8005c4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005c52:	4630      	mov	r0, r6
 8005c54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c58:	4639      	mov	r1, r7
 8005c5a:	f7fa ff5f 	bl	8000b1c <__aeabi_dcmplt>
 8005c5e:	2800      	cmp	r0, #0
 8005c60:	f040 8288 	bne.w	8006174 <_dtoa_r+0x98c>
 8005c64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f2c0 8158 	blt.w	8005f24 <_dtoa_r+0x73c>
 8005c74:	f1ba 0f0e 	cmp.w	sl, #14
 8005c78:	f300 8154 	bgt.w	8005f24 <_dtoa_r+0x73c>
 8005c7c:	4b6b      	ldr	r3, [pc, #428]	; (8005e2c <_dtoa_r+0x644>)
 8005c7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f280 80e3 	bge.w	8005e54 <_dtoa_r+0x66c>
 8005c8e:	9b01      	ldr	r3, [sp, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f300 80df 	bgt.w	8005e54 <_dtoa_r+0x66c>
 8005c96:	f040 826d 	bne.w	8006174 <_dtoa_r+0x98c>
 8005c9a:	4b69      	ldr	r3, [pc, #420]	; (8005e40 <_dtoa_r+0x658>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	f7fa fcc9 	bl	8000638 <__aeabi_dmul>
 8005ca6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005caa:	f7fa ff4b 	bl	8000b44 <__aeabi_dcmpge>
 8005cae:	9e01      	ldr	r6, [sp, #4]
 8005cb0:	4637      	mov	r7, r6
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	f040 8243 	bne.w	800613e <_dtoa_r+0x956>
 8005cb8:	9d00      	ldr	r5, [sp, #0]
 8005cba:	2331      	movs	r3, #49	; 0x31
 8005cbc:	f805 3b01 	strb.w	r3, [r5], #1
 8005cc0:	f10a 0a01 	add.w	sl, sl, #1
 8005cc4:	e23f      	b.n	8006146 <_dtoa_r+0x95e>
 8005cc6:	07f2      	lsls	r2, r6, #31
 8005cc8:	d505      	bpl.n	8005cd6 <_dtoa_r+0x4ee>
 8005cca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005cce:	f7fa fcb3 	bl	8000638 <__aeabi_dmul>
 8005cd2:	3501      	adds	r5, #1
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	1076      	asrs	r6, r6, #1
 8005cd8:	3708      	adds	r7, #8
 8005cda:	e76c      	b.n	8005bb6 <_dtoa_r+0x3ce>
 8005cdc:	2502      	movs	r5, #2
 8005cde:	e76f      	b.n	8005bc0 <_dtoa_r+0x3d8>
 8005ce0:	9b01      	ldr	r3, [sp, #4]
 8005ce2:	f8cd a01c 	str.w	sl, [sp, #28]
 8005ce6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ce8:	e78d      	b.n	8005c06 <_dtoa_r+0x41e>
 8005cea:	9900      	ldr	r1, [sp, #0]
 8005cec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005cee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005cf0:	4b4e      	ldr	r3, [pc, #312]	; (8005e2c <_dtoa_r+0x644>)
 8005cf2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cf6:	4401      	add	r1, r0
 8005cf8:	9102      	str	r1, [sp, #8]
 8005cfa:	9908      	ldr	r1, [sp, #32]
 8005cfc:	eeb0 8a47 	vmov.f32	s16, s14
 8005d00:	eef0 8a67 	vmov.f32	s17, s15
 8005d04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d0c:	2900      	cmp	r1, #0
 8005d0e:	d045      	beq.n	8005d9c <_dtoa_r+0x5b4>
 8005d10:	494c      	ldr	r1, [pc, #304]	; (8005e44 <_dtoa_r+0x65c>)
 8005d12:	2000      	movs	r0, #0
 8005d14:	f7fa fdba 	bl	800088c <__aeabi_ddiv>
 8005d18:	ec53 2b18 	vmov	r2, r3, d8
 8005d1c:	f7fa fad4 	bl	80002c8 <__aeabi_dsub>
 8005d20:	9d00      	ldr	r5, [sp, #0]
 8005d22:	ec41 0b18 	vmov	d8, r0, r1
 8005d26:	4639      	mov	r1, r7
 8005d28:	4630      	mov	r0, r6
 8005d2a:	f7fa ff35 	bl	8000b98 <__aeabi_d2iz>
 8005d2e:	900c      	str	r0, [sp, #48]	; 0x30
 8005d30:	f7fa fc18 	bl	8000564 <__aeabi_i2d>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4630      	mov	r0, r6
 8005d3a:	4639      	mov	r1, r7
 8005d3c:	f7fa fac4 	bl	80002c8 <__aeabi_dsub>
 8005d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d42:	3330      	adds	r3, #48	; 0x30
 8005d44:	f805 3b01 	strb.w	r3, [r5], #1
 8005d48:	ec53 2b18 	vmov	r2, r3, d8
 8005d4c:	4606      	mov	r6, r0
 8005d4e:	460f      	mov	r7, r1
 8005d50:	f7fa fee4 	bl	8000b1c <__aeabi_dcmplt>
 8005d54:	2800      	cmp	r0, #0
 8005d56:	d165      	bne.n	8005e24 <_dtoa_r+0x63c>
 8005d58:	4632      	mov	r2, r6
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	4935      	ldr	r1, [pc, #212]	; (8005e34 <_dtoa_r+0x64c>)
 8005d5e:	2000      	movs	r0, #0
 8005d60:	f7fa fab2 	bl	80002c8 <__aeabi_dsub>
 8005d64:	ec53 2b18 	vmov	r2, r3, d8
 8005d68:	f7fa fed8 	bl	8000b1c <__aeabi_dcmplt>
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	f040 80b9 	bne.w	8005ee4 <_dtoa_r+0x6fc>
 8005d72:	9b02      	ldr	r3, [sp, #8]
 8005d74:	429d      	cmp	r5, r3
 8005d76:	f43f af75 	beq.w	8005c64 <_dtoa_r+0x47c>
 8005d7a:	4b2f      	ldr	r3, [pc, #188]	; (8005e38 <_dtoa_r+0x650>)
 8005d7c:	ec51 0b18 	vmov	r0, r1, d8
 8005d80:	2200      	movs	r2, #0
 8005d82:	f7fa fc59 	bl	8000638 <__aeabi_dmul>
 8005d86:	4b2c      	ldr	r3, [pc, #176]	; (8005e38 <_dtoa_r+0x650>)
 8005d88:	ec41 0b18 	vmov	d8, r0, r1
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	4630      	mov	r0, r6
 8005d90:	4639      	mov	r1, r7
 8005d92:	f7fa fc51 	bl	8000638 <__aeabi_dmul>
 8005d96:	4606      	mov	r6, r0
 8005d98:	460f      	mov	r7, r1
 8005d9a:	e7c4      	b.n	8005d26 <_dtoa_r+0x53e>
 8005d9c:	ec51 0b17 	vmov	r0, r1, d7
 8005da0:	f7fa fc4a 	bl	8000638 <__aeabi_dmul>
 8005da4:	9b02      	ldr	r3, [sp, #8]
 8005da6:	9d00      	ldr	r5, [sp, #0]
 8005da8:	930c      	str	r3, [sp, #48]	; 0x30
 8005daa:	ec41 0b18 	vmov	d8, r0, r1
 8005dae:	4639      	mov	r1, r7
 8005db0:	4630      	mov	r0, r6
 8005db2:	f7fa fef1 	bl	8000b98 <__aeabi_d2iz>
 8005db6:	9011      	str	r0, [sp, #68]	; 0x44
 8005db8:	f7fa fbd4 	bl	8000564 <__aeabi_i2d>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	4639      	mov	r1, r7
 8005dc4:	f7fa fa80 	bl	80002c8 <__aeabi_dsub>
 8005dc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005dca:	3330      	adds	r3, #48	; 0x30
 8005dcc:	f805 3b01 	strb.w	r3, [r5], #1
 8005dd0:	9b02      	ldr	r3, [sp, #8]
 8005dd2:	429d      	cmp	r5, r3
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	460f      	mov	r7, r1
 8005dd8:	f04f 0200 	mov.w	r2, #0
 8005ddc:	d134      	bne.n	8005e48 <_dtoa_r+0x660>
 8005dde:	4b19      	ldr	r3, [pc, #100]	; (8005e44 <_dtoa_r+0x65c>)
 8005de0:	ec51 0b18 	vmov	r0, r1, d8
 8005de4:	f7fa fa72 	bl	80002cc <__adddf3>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4630      	mov	r0, r6
 8005dee:	4639      	mov	r1, r7
 8005df0:	f7fa feb2 	bl	8000b58 <__aeabi_dcmpgt>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d175      	bne.n	8005ee4 <_dtoa_r+0x6fc>
 8005df8:	ec53 2b18 	vmov	r2, r3, d8
 8005dfc:	4911      	ldr	r1, [pc, #68]	; (8005e44 <_dtoa_r+0x65c>)
 8005dfe:	2000      	movs	r0, #0
 8005e00:	f7fa fa62 	bl	80002c8 <__aeabi_dsub>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4630      	mov	r0, r6
 8005e0a:	4639      	mov	r1, r7
 8005e0c:	f7fa fe86 	bl	8000b1c <__aeabi_dcmplt>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	f43f af27 	beq.w	8005c64 <_dtoa_r+0x47c>
 8005e16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e18:	1e6b      	subs	r3, r5, #1
 8005e1a:	930c      	str	r3, [sp, #48]	; 0x30
 8005e1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e20:	2b30      	cmp	r3, #48	; 0x30
 8005e22:	d0f8      	beq.n	8005e16 <_dtoa_r+0x62e>
 8005e24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005e28:	e04a      	b.n	8005ec0 <_dtoa_r+0x6d8>
 8005e2a:	bf00      	nop
 8005e2c:	08007c78 	.word	0x08007c78
 8005e30:	08007c50 	.word	0x08007c50
 8005e34:	3ff00000 	.word	0x3ff00000
 8005e38:	40240000 	.word	0x40240000
 8005e3c:	401c0000 	.word	0x401c0000
 8005e40:	40140000 	.word	0x40140000
 8005e44:	3fe00000 	.word	0x3fe00000
 8005e48:	4baf      	ldr	r3, [pc, #700]	; (8006108 <_dtoa_r+0x920>)
 8005e4a:	f7fa fbf5 	bl	8000638 <__aeabi_dmul>
 8005e4e:	4606      	mov	r6, r0
 8005e50:	460f      	mov	r7, r1
 8005e52:	e7ac      	b.n	8005dae <_dtoa_r+0x5c6>
 8005e54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005e58:	9d00      	ldr	r5, [sp, #0]
 8005e5a:	4642      	mov	r2, r8
 8005e5c:	464b      	mov	r3, r9
 8005e5e:	4630      	mov	r0, r6
 8005e60:	4639      	mov	r1, r7
 8005e62:	f7fa fd13 	bl	800088c <__aeabi_ddiv>
 8005e66:	f7fa fe97 	bl	8000b98 <__aeabi_d2iz>
 8005e6a:	9002      	str	r0, [sp, #8]
 8005e6c:	f7fa fb7a 	bl	8000564 <__aeabi_i2d>
 8005e70:	4642      	mov	r2, r8
 8005e72:	464b      	mov	r3, r9
 8005e74:	f7fa fbe0 	bl	8000638 <__aeabi_dmul>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	4639      	mov	r1, r7
 8005e80:	f7fa fa22 	bl	80002c8 <__aeabi_dsub>
 8005e84:	9e02      	ldr	r6, [sp, #8]
 8005e86:	9f01      	ldr	r7, [sp, #4]
 8005e88:	3630      	adds	r6, #48	; 0x30
 8005e8a:	f805 6b01 	strb.w	r6, [r5], #1
 8005e8e:	9e00      	ldr	r6, [sp, #0]
 8005e90:	1bae      	subs	r6, r5, r6
 8005e92:	42b7      	cmp	r7, r6
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	d137      	bne.n	8005f0a <_dtoa_r+0x722>
 8005e9a:	f7fa fa17 	bl	80002cc <__adddf3>
 8005e9e:	4642      	mov	r2, r8
 8005ea0:	464b      	mov	r3, r9
 8005ea2:	4606      	mov	r6, r0
 8005ea4:	460f      	mov	r7, r1
 8005ea6:	f7fa fe57 	bl	8000b58 <__aeabi_dcmpgt>
 8005eaa:	b9c8      	cbnz	r0, 8005ee0 <_dtoa_r+0x6f8>
 8005eac:	4642      	mov	r2, r8
 8005eae:	464b      	mov	r3, r9
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	f7fa fe28 	bl	8000b08 <__aeabi_dcmpeq>
 8005eb8:	b110      	cbz	r0, 8005ec0 <_dtoa_r+0x6d8>
 8005eba:	9b02      	ldr	r3, [sp, #8]
 8005ebc:	07d9      	lsls	r1, r3, #31
 8005ebe:	d40f      	bmi.n	8005ee0 <_dtoa_r+0x6f8>
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	4659      	mov	r1, fp
 8005ec4:	f000 fad6 	bl	8006474 <_Bfree>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	702b      	strb	r3, [r5, #0]
 8005ecc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ece:	f10a 0001 	add.w	r0, sl, #1
 8005ed2:	6018      	str	r0, [r3, #0]
 8005ed4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f43f acd8 	beq.w	800588c <_dtoa_r+0xa4>
 8005edc:	601d      	str	r5, [r3, #0]
 8005ede:	e4d5      	b.n	800588c <_dtoa_r+0xa4>
 8005ee0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005ee4:	462b      	mov	r3, r5
 8005ee6:	461d      	mov	r5, r3
 8005ee8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005eec:	2a39      	cmp	r2, #57	; 0x39
 8005eee:	d108      	bne.n	8005f02 <_dtoa_r+0x71a>
 8005ef0:	9a00      	ldr	r2, [sp, #0]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d1f7      	bne.n	8005ee6 <_dtoa_r+0x6fe>
 8005ef6:	9a07      	ldr	r2, [sp, #28]
 8005ef8:	9900      	ldr	r1, [sp, #0]
 8005efa:	3201      	adds	r2, #1
 8005efc:	9207      	str	r2, [sp, #28]
 8005efe:	2230      	movs	r2, #48	; 0x30
 8005f00:	700a      	strb	r2, [r1, #0]
 8005f02:	781a      	ldrb	r2, [r3, #0]
 8005f04:	3201      	adds	r2, #1
 8005f06:	701a      	strb	r2, [r3, #0]
 8005f08:	e78c      	b.n	8005e24 <_dtoa_r+0x63c>
 8005f0a:	4b7f      	ldr	r3, [pc, #508]	; (8006108 <_dtoa_r+0x920>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f7fa fb93 	bl	8000638 <__aeabi_dmul>
 8005f12:	2200      	movs	r2, #0
 8005f14:	2300      	movs	r3, #0
 8005f16:	4606      	mov	r6, r0
 8005f18:	460f      	mov	r7, r1
 8005f1a:	f7fa fdf5 	bl	8000b08 <__aeabi_dcmpeq>
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d09b      	beq.n	8005e5a <_dtoa_r+0x672>
 8005f22:	e7cd      	b.n	8005ec0 <_dtoa_r+0x6d8>
 8005f24:	9a08      	ldr	r2, [sp, #32]
 8005f26:	2a00      	cmp	r2, #0
 8005f28:	f000 80c4 	beq.w	80060b4 <_dtoa_r+0x8cc>
 8005f2c:	9a05      	ldr	r2, [sp, #20]
 8005f2e:	2a01      	cmp	r2, #1
 8005f30:	f300 80a8 	bgt.w	8006084 <_dtoa_r+0x89c>
 8005f34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005f36:	2a00      	cmp	r2, #0
 8005f38:	f000 80a0 	beq.w	800607c <_dtoa_r+0x894>
 8005f3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005f40:	9e06      	ldr	r6, [sp, #24]
 8005f42:	4645      	mov	r5, r8
 8005f44:	9a04      	ldr	r2, [sp, #16]
 8005f46:	2101      	movs	r1, #1
 8005f48:	441a      	add	r2, r3
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	4498      	add	r8, r3
 8005f4e:	9204      	str	r2, [sp, #16]
 8005f50:	f000 fb4c 	bl	80065ec <__i2b>
 8005f54:	4607      	mov	r7, r0
 8005f56:	2d00      	cmp	r5, #0
 8005f58:	dd0b      	ble.n	8005f72 <_dtoa_r+0x78a>
 8005f5a:	9b04      	ldr	r3, [sp, #16]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	dd08      	ble.n	8005f72 <_dtoa_r+0x78a>
 8005f60:	42ab      	cmp	r3, r5
 8005f62:	9a04      	ldr	r2, [sp, #16]
 8005f64:	bfa8      	it	ge
 8005f66:	462b      	movge	r3, r5
 8005f68:	eba8 0803 	sub.w	r8, r8, r3
 8005f6c:	1aed      	subs	r5, r5, r3
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	9b06      	ldr	r3, [sp, #24]
 8005f74:	b1fb      	cbz	r3, 8005fb6 <_dtoa_r+0x7ce>
 8005f76:	9b08      	ldr	r3, [sp, #32]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 809f 	beq.w	80060bc <_dtoa_r+0x8d4>
 8005f7e:	2e00      	cmp	r6, #0
 8005f80:	dd11      	ble.n	8005fa6 <_dtoa_r+0x7be>
 8005f82:	4639      	mov	r1, r7
 8005f84:	4632      	mov	r2, r6
 8005f86:	4620      	mov	r0, r4
 8005f88:	f000 fbec 	bl	8006764 <__pow5mult>
 8005f8c:	465a      	mov	r2, fp
 8005f8e:	4601      	mov	r1, r0
 8005f90:	4607      	mov	r7, r0
 8005f92:	4620      	mov	r0, r4
 8005f94:	f000 fb40 	bl	8006618 <__multiply>
 8005f98:	4659      	mov	r1, fp
 8005f9a:	9007      	str	r0, [sp, #28]
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f000 fa69 	bl	8006474 <_Bfree>
 8005fa2:	9b07      	ldr	r3, [sp, #28]
 8005fa4:	469b      	mov	fp, r3
 8005fa6:	9b06      	ldr	r3, [sp, #24]
 8005fa8:	1b9a      	subs	r2, r3, r6
 8005faa:	d004      	beq.n	8005fb6 <_dtoa_r+0x7ce>
 8005fac:	4659      	mov	r1, fp
 8005fae:	4620      	mov	r0, r4
 8005fb0:	f000 fbd8 	bl	8006764 <__pow5mult>
 8005fb4:	4683      	mov	fp, r0
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	4620      	mov	r0, r4
 8005fba:	f000 fb17 	bl	80065ec <__i2b>
 8005fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	dd7c      	ble.n	80060c0 <_dtoa_r+0x8d8>
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	4601      	mov	r1, r0
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 fbca 	bl	8006764 <__pow5mult>
 8005fd0:	9b05      	ldr	r3, [sp, #20]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	4606      	mov	r6, r0
 8005fd6:	dd76      	ble.n	80060c6 <_dtoa_r+0x8de>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	9306      	str	r3, [sp, #24]
 8005fdc:	6933      	ldr	r3, [r6, #16]
 8005fde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005fe2:	6918      	ldr	r0, [r3, #16]
 8005fe4:	f000 fab2 	bl	800654c <__hi0bits>
 8005fe8:	f1c0 0020 	rsb	r0, r0, #32
 8005fec:	9b04      	ldr	r3, [sp, #16]
 8005fee:	4418      	add	r0, r3
 8005ff0:	f010 001f 	ands.w	r0, r0, #31
 8005ff4:	f000 8086 	beq.w	8006104 <_dtoa_r+0x91c>
 8005ff8:	f1c0 0320 	rsb	r3, r0, #32
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	dd7f      	ble.n	8006100 <_dtoa_r+0x918>
 8006000:	f1c0 001c 	rsb	r0, r0, #28
 8006004:	9b04      	ldr	r3, [sp, #16]
 8006006:	4403      	add	r3, r0
 8006008:	4480      	add	r8, r0
 800600a:	4405      	add	r5, r0
 800600c:	9304      	str	r3, [sp, #16]
 800600e:	f1b8 0f00 	cmp.w	r8, #0
 8006012:	dd05      	ble.n	8006020 <_dtoa_r+0x838>
 8006014:	4659      	mov	r1, fp
 8006016:	4642      	mov	r2, r8
 8006018:	4620      	mov	r0, r4
 800601a:	f000 fbfd 	bl	8006818 <__lshift>
 800601e:	4683      	mov	fp, r0
 8006020:	9b04      	ldr	r3, [sp, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	dd05      	ble.n	8006032 <_dtoa_r+0x84a>
 8006026:	4631      	mov	r1, r6
 8006028:	461a      	mov	r2, r3
 800602a:	4620      	mov	r0, r4
 800602c:	f000 fbf4 	bl	8006818 <__lshift>
 8006030:	4606      	mov	r6, r0
 8006032:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006034:	2b00      	cmp	r3, #0
 8006036:	d069      	beq.n	800610c <_dtoa_r+0x924>
 8006038:	4631      	mov	r1, r6
 800603a:	4658      	mov	r0, fp
 800603c:	f000 fc58 	bl	80068f0 <__mcmp>
 8006040:	2800      	cmp	r0, #0
 8006042:	da63      	bge.n	800610c <_dtoa_r+0x924>
 8006044:	2300      	movs	r3, #0
 8006046:	4659      	mov	r1, fp
 8006048:	220a      	movs	r2, #10
 800604a:	4620      	mov	r0, r4
 800604c:	f000 fa34 	bl	80064b8 <__multadd>
 8006050:	9b08      	ldr	r3, [sp, #32]
 8006052:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006056:	4683      	mov	fp, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 818f 	beq.w	800637c <_dtoa_r+0xb94>
 800605e:	4639      	mov	r1, r7
 8006060:	2300      	movs	r3, #0
 8006062:	220a      	movs	r2, #10
 8006064:	4620      	mov	r0, r4
 8006066:	f000 fa27 	bl	80064b8 <__multadd>
 800606a:	f1b9 0f00 	cmp.w	r9, #0
 800606e:	4607      	mov	r7, r0
 8006070:	f300 808e 	bgt.w	8006190 <_dtoa_r+0x9a8>
 8006074:	9b05      	ldr	r3, [sp, #20]
 8006076:	2b02      	cmp	r3, #2
 8006078:	dc50      	bgt.n	800611c <_dtoa_r+0x934>
 800607a:	e089      	b.n	8006190 <_dtoa_r+0x9a8>
 800607c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800607e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006082:	e75d      	b.n	8005f40 <_dtoa_r+0x758>
 8006084:	9b01      	ldr	r3, [sp, #4]
 8006086:	1e5e      	subs	r6, r3, #1
 8006088:	9b06      	ldr	r3, [sp, #24]
 800608a:	42b3      	cmp	r3, r6
 800608c:	bfbf      	itttt	lt
 800608e:	9b06      	ldrlt	r3, [sp, #24]
 8006090:	9606      	strlt	r6, [sp, #24]
 8006092:	1af2      	sublt	r2, r6, r3
 8006094:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006096:	bfb6      	itet	lt
 8006098:	189b      	addlt	r3, r3, r2
 800609a:	1b9e      	subge	r6, r3, r6
 800609c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800609e:	9b01      	ldr	r3, [sp, #4]
 80060a0:	bfb8      	it	lt
 80060a2:	2600      	movlt	r6, #0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	bfb5      	itete	lt
 80060a8:	eba8 0503 	sublt.w	r5, r8, r3
 80060ac:	9b01      	ldrge	r3, [sp, #4]
 80060ae:	2300      	movlt	r3, #0
 80060b0:	4645      	movge	r5, r8
 80060b2:	e747      	b.n	8005f44 <_dtoa_r+0x75c>
 80060b4:	9e06      	ldr	r6, [sp, #24]
 80060b6:	9f08      	ldr	r7, [sp, #32]
 80060b8:	4645      	mov	r5, r8
 80060ba:	e74c      	b.n	8005f56 <_dtoa_r+0x76e>
 80060bc:	9a06      	ldr	r2, [sp, #24]
 80060be:	e775      	b.n	8005fac <_dtoa_r+0x7c4>
 80060c0:	9b05      	ldr	r3, [sp, #20]
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	dc18      	bgt.n	80060f8 <_dtoa_r+0x910>
 80060c6:	9b02      	ldr	r3, [sp, #8]
 80060c8:	b9b3      	cbnz	r3, 80060f8 <_dtoa_r+0x910>
 80060ca:	9b03      	ldr	r3, [sp, #12]
 80060cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80060d0:	b9a3      	cbnz	r3, 80060fc <_dtoa_r+0x914>
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060d8:	0d1b      	lsrs	r3, r3, #20
 80060da:	051b      	lsls	r3, r3, #20
 80060dc:	b12b      	cbz	r3, 80060ea <_dtoa_r+0x902>
 80060de:	9b04      	ldr	r3, [sp, #16]
 80060e0:	3301      	adds	r3, #1
 80060e2:	9304      	str	r3, [sp, #16]
 80060e4:	f108 0801 	add.w	r8, r8, #1
 80060e8:	2301      	movs	r3, #1
 80060ea:	9306      	str	r3, [sp, #24]
 80060ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f47f af74 	bne.w	8005fdc <_dtoa_r+0x7f4>
 80060f4:	2001      	movs	r0, #1
 80060f6:	e779      	b.n	8005fec <_dtoa_r+0x804>
 80060f8:	2300      	movs	r3, #0
 80060fa:	e7f6      	b.n	80060ea <_dtoa_r+0x902>
 80060fc:	9b02      	ldr	r3, [sp, #8]
 80060fe:	e7f4      	b.n	80060ea <_dtoa_r+0x902>
 8006100:	d085      	beq.n	800600e <_dtoa_r+0x826>
 8006102:	4618      	mov	r0, r3
 8006104:	301c      	adds	r0, #28
 8006106:	e77d      	b.n	8006004 <_dtoa_r+0x81c>
 8006108:	40240000 	.word	0x40240000
 800610c:	9b01      	ldr	r3, [sp, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	dc38      	bgt.n	8006184 <_dtoa_r+0x99c>
 8006112:	9b05      	ldr	r3, [sp, #20]
 8006114:	2b02      	cmp	r3, #2
 8006116:	dd35      	ble.n	8006184 <_dtoa_r+0x99c>
 8006118:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800611c:	f1b9 0f00 	cmp.w	r9, #0
 8006120:	d10d      	bne.n	800613e <_dtoa_r+0x956>
 8006122:	4631      	mov	r1, r6
 8006124:	464b      	mov	r3, r9
 8006126:	2205      	movs	r2, #5
 8006128:	4620      	mov	r0, r4
 800612a:	f000 f9c5 	bl	80064b8 <__multadd>
 800612e:	4601      	mov	r1, r0
 8006130:	4606      	mov	r6, r0
 8006132:	4658      	mov	r0, fp
 8006134:	f000 fbdc 	bl	80068f0 <__mcmp>
 8006138:	2800      	cmp	r0, #0
 800613a:	f73f adbd 	bgt.w	8005cb8 <_dtoa_r+0x4d0>
 800613e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006140:	9d00      	ldr	r5, [sp, #0]
 8006142:	ea6f 0a03 	mvn.w	sl, r3
 8006146:	f04f 0800 	mov.w	r8, #0
 800614a:	4631      	mov	r1, r6
 800614c:	4620      	mov	r0, r4
 800614e:	f000 f991 	bl	8006474 <_Bfree>
 8006152:	2f00      	cmp	r7, #0
 8006154:	f43f aeb4 	beq.w	8005ec0 <_dtoa_r+0x6d8>
 8006158:	f1b8 0f00 	cmp.w	r8, #0
 800615c:	d005      	beq.n	800616a <_dtoa_r+0x982>
 800615e:	45b8      	cmp	r8, r7
 8006160:	d003      	beq.n	800616a <_dtoa_r+0x982>
 8006162:	4641      	mov	r1, r8
 8006164:	4620      	mov	r0, r4
 8006166:	f000 f985 	bl	8006474 <_Bfree>
 800616a:	4639      	mov	r1, r7
 800616c:	4620      	mov	r0, r4
 800616e:	f000 f981 	bl	8006474 <_Bfree>
 8006172:	e6a5      	b.n	8005ec0 <_dtoa_r+0x6d8>
 8006174:	2600      	movs	r6, #0
 8006176:	4637      	mov	r7, r6
 8006178:	e7e1      	b.n	800613e <_dtoa_r+0x956>
 800617a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800617c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006180:	4637      	mov	r7, r6
 8006182:	e599      	b.n	8005cb8 <_dtoa_r+0x4d0>
 8006184:	9b08      	ldr	r3, [sp, #32]
 8006186:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 80fd 	beq.w	800638a <_dtoa_r+0xba2>
 8006190:	2d00      	cmp	r5, #0
 8006192:	dd05      	ble.n	80061a0 <_dtoa_r+0x9b8>
 8006194:	4639      	mov	r1, r7
 8006196:	462a      	mov	r2, r5
 8006198:	4620      	mov	r0, r4
 800619a:	f000 fb3d 	bl	8006818 <__lshift>
 800619e:	4607      	mov	r7, r0
 80061a0:	9b06      	ldr	r3, [sp, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d05c      	beq.n	8006260 <_dtoa_r+0xa78>
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 f923 	bl	80063f4 <_Balloc>
 80061ae:	4605      	mov	r5, r0
 80061b0:	b928      	cbnz	r0, 80061be <_dtoa_r+0x9d6>
 80061b2:	4b80      	ldr	r3, [pc, #512]	; (80063b4 <_dtoa_r+0xbcc>)
 80061b4:	4602      	mov	r2, r0
 80061b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80061ba:	f7ff bb2e 	b.w	800581a <_dtoa_r+0x32>
 80061be:	693a      	ldr	r2, [r7, #16]
 80061c0:	3202      	adds	r2, #2
 80061c2:	0092      	lsls	r2, r2, #2
 80061c4:	f107 010c 	add.w	r1, r7, #12
 80061c8:	300c      	adds	r0, #12
 80061ca:	f000 f905 	bl	80063d8 <memcpy>
 80061ce:	2201      	movs	r2, #1
 80061d0:	4629      	mov	r1, r5
 80061d2:	4620      	mov	r0, r4
 80061d4:	f000 fb20 	bl	8006818 <__lshift>
 80061d8:	9b00      	ldr	r3, [sp, #0]
 80061da:	3301      	adds	r3, #1
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	9b00      	ldr	r3, [sp, #0]
 80061e0:	444b      	add	r3, r9
 80061e2:	9307      	str	r3, [sp, #28]
 80061e4:	9b02      	ldr	r3, [sp, #8]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	46b8      	mov	r8, r7
 80061ec:	9306      	str	r3, [sp, #24]
 80061ee:	4607      	mov	r7, r0
 80061f0:	9b01      	ldr	r3, [sp, #4]
 80061f2:	4631      	mov	r1, r6
 80061f4:	3b01      	subs	r3, #1
 80061f6:	4658      	mov	r0, fp
 80061f8:	9302      	str	r3, [sp, #8]
 80061fa:	f7ff fa67 	bl	80056cc <quorem>
 80061fe:	4603      	mov	r3, r0
 8006200:	3330      	adds	r3, #48	; 0x30
 8006202:	9004      	str	r0, [sp, #16]
 8006204:	4641      	mov	r1, r8
 8006206:	4658      	mov	r0, fp
 8006208:	9308      	str	r3, [sp, #32]
 800620a:	f000 fb71 	bl	80068f0 <__mcmp>
 800620e:	463a      	mov	r2, r7
 8006210:	4681      	mov	r9, r0
 8006212:	4631      	mov	r1, r6
 8006214:	4620      	mov	r0, r4
 8006216:	f000 fb87 	bl	8006928 <__mdiff>
 800621a:	68c2      	ldr	r2, [r0, #12]
 800621c:	9b08      	ldr	r3, [sp, #32]
 800621e:	4605      	mov	r5, r0
 8006220:	bb02      	cbnz	r2, 8006264 <_dtoa_r+0xa7c>
 8006222:	4601      	mov	r1, r0
 8006224:	4658      	mov	r0, fp
 8006226:	f000 fb63 	bl	80068f0 <__mcmp>
 800622a:	9b08      	ldr	r3, [sp, #32]
 800622c:	4602      	mov	r2, r0
 800622e:	4629      	mov	r1, r5
 8006230:	4620      	mov	r0, r4
 8006232:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006236:	f000 f91d 	bl	8006474 <_Bfree>
 800623a:	9b05      	ldr	r3, [sp, #20]
 800623c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800623e:	9d01      	ldr	r5, [sp, #4]
 8006240:	ea43 0102 	orr.w	r1, r3, r2
 8006244:	9b06      	ldr	r3, [sp, #24]
 8006246:	430b      	orrs	r3, r1
 8006248:	9b08      	ldr	r3, [sp, #32]
 800624a:	d10d      	bne.n	8006268 <_dtoa_r+0xa80>
 800624c:	2b39      	cmp	r3, #57	; 0x39
 800624e:	d029      	beq.n	80062a4 <_dtoa_r+0xabc>
 8006250:	f1b9 0f00 	cmp.w	r9, #0
 8006254:	dd01      	ble.n	800625a <_dtoa_r+0xa72>
 8006256:	9b04      	ldr	r3, [sp, #16]
 8006258:	3331      	adds	r3, #49	; 0x31
 800625a:	9a02      	ldr	r2, [sp, #8]
 800625c:	7013      	strb	r3, [r2, #0]
 800625e:	e774      	b.n	800614a <_dtoa_r+0x962>
 8006260:	4638      	mov	r0, r7
 8006262:	e7b9      	b.n	80061d8 <_dtoa_r+0x9f0>
 8006264:	2201      	movs	r2, #1
 8006266:	e7e2      	b.n	800622e <_dtoa_r+0xa46>
 8006268:	f1b9 0f00 	cmp.w	r9, #0
 800626c:	db06      	blt.n	800627c <_dtoa_r+0xa94>
 800626e:	9905      	ldr	r1, [sp, #20]
 8006270:	ea41 0909 	orr.w	r9, r1, r9
 8006274:	9906      	ldr	r1, [sp, #24]
 8006276:	ea59 0101 	orrs.w	r1, r9, r1
 800627a:	d120      	bne.n	80062be <_dtoa_r+0xad6>
 800627c:	2a00      	cmp	r2, #0
 800627e:	ddec      	ble.n	800625a <_dtoa_r+0xa72>
 8006280:	4659      	mov	r1, fp
 8006282:	2201      	movs	r2, #1
 8006284:	4620      	mov	r0, r4
 8006286:	9301      	str	r3, [sp, #4]
 8006288:	f000 fac6 	bl	8006818 <__lshift>
 800628c:	4631      	mov	r1, r6
 800628e:	4683      	mov	fp, r0
 8006290:	f000 fb2e 	bl	80068f0 <__mcmp>
 8006294:	2800      	cmp	r0, #0
 8006296:	9b01      	ldr	r3, [sp, #4]
 8006298:	dc02      	bgt.n	80062a0 <_dtoa_r+0xab8>
 800629a:	d1de      	bne.n	800625a <_dtoa_r+0xa72>
 800629c:	07da      	lsls	r2, r3, #31
 800629e:	d5dc      	bpl.n	800625a <_dtoa_r+0xa72>
 80062a0:	2b39      	cmp	r3, #57	; 0x39
 80062a2:	d1d8      	bne.n	8006256 <_dtoa_r+0xa6e>
 80062a4:	9a02      	ldr	r2, [sp, #8]
 80062a6:	2339      	movs	r3, #57	; 0x39
 80062a8:	7013      	strb	r3, [r2, #0]
 80062aa:	462b      	mov	r3, r5
 80062ac:	461d      	mov	r5, r3
 80062ae:	3b01      	subs	r3, #1
 80062b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80062b4:	2a39      	cmp	r2, #57	; 0x39
 80062b6:	d050      	beq.n	800635a <_dtoa_r+0xb72>
 80062b8:	3201      	adds	r2, #1
 80062ba:	701a      	strb	r2, [r3, #0]
 80062bc:	e745      	b.n	800614a <_dtoa_r+0x962>
 80062be:	2a00      	cmp	r2, #0
 80062c0:	dd03      	ble.n	80062ca <_dtoa_r+0xae2>
 80062c2:	2b39      	cmp	r3, #57	; 0x39
 80062c4:	d0ee      	beq.n	80062a4 <_dtoa_r+0xabc>
 80062c6:	3301      	adds	r3, #1
 80062c8:	e7c7      	b.n	800625a <_dtoa_r+0xa72>
 80062ca:	9a01      	ldr	r2, [sp, #4]
 80062cc:	9907      	ldr	r1, [sp, #28]
 80062ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80062d2:	428a      	cmp	r2, r1
 80062d4:	d02a      	beq.n	800632c <_dtoa_r+0xb44>
 80062d6:	4659      	mov	r1, fp
 80062d8:	2300      	movs	r3, #0
 80062da:	220a      	movs	r2, #10
 80062dc:	4620      	mov	r0, r4
 80062de:	f000 f8eb 	bl	80064b8 <__multadd>
 80062e2:	45b8      	cmp	r8, r7
 80062e4:	4683      	mov	fp, r0
 80062e6:	f04f 0300 	mov.w	r3, #0
 80062ea:	f04f 020a 	mov.w	r2, #10
 80062ee:	4641      	mov	r1, r8
 80062f0:	4620      	mov	r0, r4
 80062f2:	d107      	bne.n	8006304 <_dtoa_r+0xb1c>
 80062f4:	f000 f8e0 	bl	80064b8 <__multadd>
 80062f8:	4680      	mov	r8, r0
 80062fa:	4607      	mov	r7, r0
 80062fc:	9b01      	ldr	r3, [sp, #4]
 80062fe:	3301      	adds	r3, #1
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	e775      	b.n	80061f0 <_dtoa_r+0xa08>
 8006304:	f000 f8d8 	bl	80064b8 <__multadd>
 8006308:	4639      	mov	r1, r7
 800630a:	4680      	mov	r8, r0
 800630c:	2300      	movs	r3, #0
 800630e:	220a      	movs	r2, #10
 8006310:	4620      	mov	r0, r4
 8006312:	f000 f8d1 	bl	80064b8 <__multadd>
 8006316:	4607      	mov	r7, r0
 8006318:	e7f0      	b.n	80062fc <_dtoa_r+0xb14>
 800631a:	f1b9 0f00 	cmp.w	r9, #0
 800631e:	9a00      	ldr	r2, [sp, #0]
 8006320:	bfcc      	ite	gt
 8006322:	464d      	movgt	r5, r9
 8006324:	2501      	movle	r5, #1
 8006326:	4415      	add	r5, r2
 8006328:	f04f 0800 	mov.w	r8, #0
 800632c:	4659      	mov	r1, fp
 800632e:	2201      	movs	r2, #1
 8006330:	4620      	mov	r0, r4
 8006332:	9301      	str	r3, [sp, #4]
 8006334:	f000 fa70 	bl	8006818 <__lshift>
 8006338:	4631      	mov	r1, r6
 800633a:	4683      	mov	fp, r0
 800633c:	f000 fad8 	bl	80068f0 <__mcmp>
 8006340:	2800      	cmp	r0, #0
 8006342:	dcb2      	bgt.n	80062aa <_dtoa_r+0xac2>
 8006344:	d102      	bne.n	800634c <_dtoa_r+0xb64>
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	07db      	lsls	r3, r3, #31
 800634a:	d4ae      	bmi.n	80062aa <_dtoa_r+0xac2>
 800634c:	462b      	mov	r3, r5
 800634e:	461d      	mov	r5, r3
 8006350:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006354:	2a30      	cmp	r2, #48	; 0x30
 8006356:	d0fa      	beq.n	800634e <_dtoa_r+0xb66>
 8006358:	e6f7      	b.n	800614a <_dtoa_r+0x962>
 800635a:	9a00      	ldr	r2, [sp, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d1a5      	bne.n	80062ac <_dtoa_r+0xac4>
 8006360:	f10a 0a01 	add.w	sl, sl, #1
 8006364:	2331      	movs	r3, #49	; 0x31
 8006366:	e779      	b.n	800625c <_dtoa_r+0xa74>
 8006368:	4b13      	ldr	r3, [pc, #76]	; (80063b8 <_dtoa_r+0xbd0>)
 800636a:	f7ff baaf 	b.w	80058cc <_dtoa_r+0xe4>
 800636e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006370:	2b00      	cmp	r3, #0
 8006372:	f47f aa86 	bne.w	8005882 <_dtoa_r+0x9a>
 8006376:	4b11      	ldr	r3, [pc, #68]	; (80063bc <_dtoa_r+0xbd4>)
 8006378:	f7ff baa8 	b.w	80058cc <_dtoa_r+0xe4>
 800637c:	f1b9 0f00 	cmp.w	r9, #0
 8006380:	dc03      	bgt.n	800638a <_dtoa_r+0xba2>
 8006382:	9b05      	ldr	r3, [sp, #20]
 8006384:	2b02      	cmp	r3, #2
 8006386:	f73f aec9 	bgt.w	800611c <_dtoa_r+0x934>
 800638a:	9d00      	ldr	r5, [sp, #0]
 800638c:	4631      	mov	r1, r6
 800638e:	4658      	mov	r0, fp
 8006390:	f7ff f99c 	bl	80056cc <quorem>
 8006394:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006398:	f805 3b01 	strb.w	r3, [r5], #1
 800639c:	9a00      	ldr	r2, [sp, #0]
 800639e:	1aaa      	subs	r2, r5, r2
 80063a0:	4591      	cmp	r9, r2
 80063a2:	ddba      	ble.n	800631a <_dtoa_r+0xb32>
 80063a4:	4659      	mov	r1, fp
 80063a6:	2300      	movs	r3, #0
 80063a8:	220a      	movs	r2, #10
 80063aa:	4620      	mov	r0, r4
 80063ac:	f000 f884 	bl	80064b8 <__multadd>
 80063b0:	4683      	mov	fp, r0
 80063b2:	e7eb      	b.n	800638c <_dtoa_r+0xba4>
 80063b4:	08007bdf 	.word	0x08007bdf
 80063b8:	08007b38 	.word	0x08007b38
 80063bc:	08007b5c 	.word	0x08007b5c

080063c0 <_localeconv_r>:
 80063c0:	4800      	ldr	r0, [pc, #0]	; (80063c4 <_localeconv_r+0x4>)
 80063c2:	4770      	bx	lr
 80063c4:	20000160 	.word	0x20000160

080063c8 <malloc>:
 80063c8:	4b02      	ldr	r3, [pc, #8]	; (80063d4 <malloc+0xc>)
 80063ca:	4601      	mov	r1, r0
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	f000 bbef 	b.w	8006bb0 <_malloc_r>
 80063d2:	bf00      	nop
 80063d4:	2000000c 	.word	0x2000000c

080063d8 <memcpy>:
 80063d8:	440a      	add	r2, r1
 80063da:	4291      	cmp	r1, r2
 80063dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80063e0:	d100      	bne.n	80063e4 <memcpy+0xc>
 80063e2:	4770      	bx	lr
 80063e4:	b510      	push	{r4, lr}
 80063e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ee:	4291      	cmp	r1, r2
 80063f0:	d1f9      	bne.n	80063e6 <memcpy+0xe>
 80063f2:	bd10      	pop	{r4, pc}

080063f4 <_Balloc>:
 80063f4:	b570      	push	{r4, r5, r6, lr}
 80063f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063f8:	4604      	mov	r4, r0
 80063fa:	460d      	mov	r5, r1
 80063fc:	b976      	cbnz	r6, 800641c <_Balloc+0x28>
 80063fe:	2010      	movs	r0, #16
 8006400:	f7ff ffe2 	bl	80063c8 <malloc>
 8006404:	4602      	mov	r2, r0
 8006406:	6260      	str	r0, [r4, #36]	; 0x24
 8006408:	b920      	cbnz	r0, 8006414 <_Balloc+0x20>
 800640a:	4b18      	ldr	r3, [pc, #96]	; (800646c <_Balloc+0x78>)
 800640c:	4818      	ldr	r0, [pc, #96]	; (8006470 <_Balloc+0x7c>)
 800640e:	2166      	movs	r1, #102	; 0x66
 8006410:	f000 fd94 	bl	8006f3c <__assert_func>
 8006414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006418:	6006      	str	r6, [r0, #0]
 800641a:	60c6      	str	r6, [r0, #12]
 800641c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800641e:	68f3      	ldr	r3, [r6, #12]
 8006420:	b183      	cbz	r3, 8006444 <_Balloc+0x50>
 8006422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800642a:	b9b8      	cbnz	r0, 800645c <_Balloc+0x68>
 800642c:	2101      	movs	r1, #1
 800642e:	fa01 f605 	lsl.w	r6, r1, r5
 8006432:	1d72      	adds	r2, r6, #5
 8006434:	0092      	lsls	r2, r2, #2
 8006436:	4620      	mov	r0, r4
 8006438:	f000 fb5a 	bl	8006af0 <_calloc_r>
 800643c:	b160      	cbz	r0, 8006458 <_Balloc+0x64>
 800643e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006442:	e00e      	b.n	8006462 <_Balloc+0x6e>
 8006444:	2221      	movs	r2, #33	; 0x21
 8006446:	2104      	movs	r1, #4
 8006448:	4620      	mov	r0, r4
 800644a:	f000 fb51 	bl	8006af0 <_calloc_r>
 800644e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006450:	60f0      	str	r0, [r6, #12]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1e4      	bne.n	8006422 <_Balloc+0x2e>
 8006458:	2000      	movs	r0, #0
 800645a:	bd70      	pop	{r4, r5, r6, pc}
 800645c:	6802      	ldr	r2, [r0, #0]
 800645e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006462:	2300      	movs	r3, #0
 8006464:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006468:	e7f7      	b.n	800645a <_Balloc+0x66>
 800646a:	bf00      	nop
 800646c:	08007b69 	.word	0x08007b69
 8006470:	08007bf0 	.word	0x08007bf0

08006474 <_Bfree>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006478:	4605      	mov	r5, r0
 800647a:	460c      	mov	r4, r1
 800647c:	b976      	cbnz	r6, 800649c <_Bfree+0x28>
 800647e:	2010      	movs	r0, #16
 8006480:	f7ff ffa2 	bl	80063c8 <malloc>
 8006484:	4602      	mov	r2, r0
 8006486:	6268      	str	r0, [r5, #36]	; 0x24
 8006488:	b920      	cbnz	r0, 8006494 <_Bfree+0x20>
 800648a:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <_Bfree+0x3c>)
 800648c:	4809      	ldr	r0, [pc, #36]	; (80064b4 <_Bfree+0x40>)
 800648e:	218a      	movs	r1, #138	; 0x8a
 8006490:	f000 fd54 	bl	8006f3c <__assert_func>
 8006494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006498:	6006      	str	r6, [r0, #0]
 800649a:	60c6      	str	r6, [r0, #12]
 800649c:	b13c      	cbz	r4, 80064ae <_Bfree+0x3a>
 800649e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80064a0:	6862      	ldr	r2, [r4, #4]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064a8:	6021      	str	r1, [r4, #0]
 80064aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
 80064b0:	08007b69 	.word	0x08007b69
 80064b4:	08007bf0 	.word	0x08007bf0

080064b8 <__multadd>:
 80064b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064bc:	690e      	ldr	r6, [r1, #16]
 80064be:	4607      	mov	r7, r0
 80064c0:	4698      	mov	r8, r3
 80064c2:	460c      	mov	r4, r1
 80064c4:	f101 0014 	add.w	r0, r1, #20
 80064c8:	2300      	movs	r3, #0
 80064ca:	6805      	ldr	r5, [r0, #0]
 80064cc:	b2a9      	uxth	r1, r5
 80064ce:	fb02 8101 	mla	r1, r2, r1, r8
 80064d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80064d6:	0c2d      	lsrs	r5, r5, #16
 80064d8:	fb02 c505 	mla	r5, r2, r5, ip
 80064dc:	b289      	uxth	r1, r1
 80064de:	3301      	adds	r3, #1
 80064e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80064e4:	429e      	cmp	r6, r3
 80064e6:	f840 1b04 	str.w	r1, [r0], #4
 80064ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80064ee:	dcec      	bgt.n	80064ca <__multadd+0x12>
 80064f0:	f1b8 0f00 	cmp.w	r8, #0
 80064f4:	d022      	beq.n	800653c <__multadd+0x84>
 80064f6:	68a3      	ldr	r3, [r4, #8]
 80064f8:	42b3      	cmp	r3, r6
 80064fa:	dc19      	bgt.n	8006530 <__multadd+0x78>
 80064fc:	6861      	ldr	r1, [r4, #4]
 80064fe:	4638      	mov	r0, r7
 8006500:	3101      	adds	r1, #1
 8006502:	f7ff ff77 	bl	80063f4 <_Balloc>
 8006506:	4605      	mov	r5, r0
 8006508:	b928      	cbnz	r0, 8006516 <__multadd+0x5e>
 800650a:	4602      	mov	r2, r0
 800650c:	4b0d      	ldr	r3, [pc, #52]	; (8006544 <__multadd+0x8c>)
 800650e:	480e      	ldr	r0, [pc, #56]	; (8006548 <__multadd+0x90>)
 8006510:	21b5      	movs	r1, #181	; 0xb5
 8006512:	f000 fd13 	bl	8006f3c <__assert_func>
 8006516:	6922      	ldr	r2, [r4, #16]
 8006518:	3202      	adds	r2, #2
 800651a:	f104 010c 	add.w	r1, r4, #12
 800651e:	0092      	lsls	r2, r2, #2
 8006520:	300c      	adds	r0, #12
 8006522:	f7ff ff59 	bl	80063d8 <memcpy>
 8006526:	4621      	mov	r1, r4
 8006528:	4638      	mov	r0, r7
 800652a:	f7ff ffa3 	bl	8006474 <_Bfree>
 800652e:	462c      	mov	r4, r5
 8006530:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006534:	3601      	adds	r6, #1
 8006536:	f8c3 8014 	str.w	r8, [r3, #20]
 800653a:	6126      	str	r6, [r4, #16]
 800653c:	4620      	mov	r0, r4
 800653e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006542:	bf00      	nop
 8006544:	08007bdf 	.word	0x08007bdf
 8006548:	08007bf0 	.word	0x08007bf0

0800654c <__hi0bits>:
 800654c:	0c03      	lsrs	r3, r0, #16
 800654e:	041b      	lsls	r3, r3, #16
 8006550:	b9d3      	cbnz	r3, 8006588 <__hi0bits+0x3c>
 8006552:	0400      	lsls	r0, r0, #16
 8006554:	2310      	movs	r3, #16
 8006556:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800655a:	bf04      	itt	eq
 800655c:	0200      	lsleq	r0, r0, #8
 800655e:	3308      	addeq	r3, #8
 8006560:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006564:	bf04      	itt	eq
 8006566:	0100      	lsleq	r0, r0, #4
 8006568:	3304      	addeq	r3, #4
 800656a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800656e:	bf04      	itt	eq
 8006570:	0080      	lsleq	r0, r0, #2
 8006572:	3302      	addeq	r3, #2
 8006574:	2800      	cmp	r0, #0
 8006576:	db05      	blt.n	8006584 <__hi0bits+0x38>
 8006578:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800657c:	f103 0301 	add.w	r3, r3, #1
 8006580:	bf08      	it	eq
 8006582:	2320      	moveq	r3, #32
 8006584:	4618      	mov	r0, r3
 8006586:	4770      	bx	lr
 8006588:	2300      	movs	r3, #0
 800658a:	e7e4      	b.n	8006556 <__hi0bits+0xa>

0800658c <__lo0bits>:
 800658c:	6803      	ldr	r3, [r0, #0]
 800658e:	f013 0207 	ands.w	r2, r3, #7
 8006592:	4601      	mov	r1, r0
 8006594:	d00b      	beq.n	80065ae <__lo0bits+0x22>
 8006596:	07da      	lsls	r2, r3, #31
 8006598:	d424      	bmi.n	80065e4 <__lo0bits+0x58>
 800659a:	0798      	lsls	r0, r3, #30
 800659c:	bf49      	itett	mi
 800659e:	085b      	lsrmi	r3, r3, #1
 80065a0:	089b      	lsrpl	r3, r3, #2
 80065a2:	2001      	movmi	r0, #1
 80065a4:	600b      	strmi	r3, [r1, #0]
 80065a6:	bf5c      	itt	pl
 80065a8:	600b      	strpl	r3, [r1, #0]
 80065aa:	2002      	movpl	r0, #2
 80065ac:	4770      	bx	lr
 80065ae:	b298      	uxth	r0, r3
 80065b0:	b9b0      	cbnz	r0, 80065e0 <__lo0bits+0x54>
 80065b2:	0c1b      	lsrs	r3, r3, #16
 80065b4:	2010      	movs	r0, #16
 80065b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80065ba:	bf04      	itt	eq
 80065bc:	0a1b      	lsreq	r3, r3, #8
 80065be:	3008      	addeq	r0, #8
 80065c0:	071a      	lsls	r2, r3, #28
 80065c2:	bf04      	itt	eq
 80065c4:	091b      	lsreq	r3, r3, #4
 80065c6:	3004      	addeq	r0, #4
 80065c8:	079a      	lsls	r2, r3, #30
 80065ca:	bf04      	itt	eq
 80065cc:	089b      	lsreq	r3, r3, #2
 80065ce:	3002      	addeq	r0, #2
 80065d0:	07da      	lsls	r2, r3, #31
 80065d2:	d403      	bmi.n	80065dc <__lo0bits+0x50>
 80065d4:	085b      	lsrs	r3, r3, #1
 80065d6:	f100 0001 	add.w	r0, r0, #1
 80065da:	d005      	beq.n	80065e8 <__lo0bits+0x5c>
 80065dc:	600b      	str	r3, [r1, #0]
 80065de:	4770      	bx	lr
 80065e0:	4610      	mov	r0, r2
 80065e2:	e7e8      	b.n	80065b6 <__lo0bits+0x2a>
 80065e4:	2000      	movs	r0, #0
 80065e6:	4770      	bx	lr
 80065e8:	2020      	movs	r0, #32
 80065ea:	4770      	bx	lr

080065ec <__i2b>:
 80065ec:	b510      	push	{r4, lr}
 80065ee:	460c      	mov	r4, r1
 80065f0:	2101      	movs	r1, #1
 80065f2:	f7ff feff 	bl	80063f4 <_Balloc>
 80065f6:	4602      	mov	r2, r0
 80065f8:	b928      	cbnz	r0, 8006606 <__i2b+0x1a>
 80065fa:	4b05      	ldr	r3, [pc, #20]	; (8006610 <__i2b+0x24>)
 80065fc:	4805      	ldr	r0, [pc, #20]	; (8006614 <__i2b+0x28>)
 80065fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006602:	f000 fc9b 	bl	8006f3c <__assert_func>
 8006606:	2301      	movs	r3, #1
 8006608:	6144      	str	r4, [r0, #20]
 800660a:	6103      	str	r3, [r0, #16]
 800660c:	bd10      	pop	{r4, pc}
 800660e:	bf00      	nop
 8006610:	08007bdf 	.word	0x08007bdf
 8006614:	08007bf0 	.word	0x08007bf0

08006618 <__multiply>:
 8006618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661c:	4614      	mov	r4, r2
 800661e:	690a      	ldr	r2, [r1, #16]
 8006620:	6923      	ldr	r3, [r4, #16]
 8006622:	429a      	cmp	r2, r3
 8006624:	bfb8      	it	lt
 8006626:	460b      	movlt	r3, r1
 8006628:	460d      	mov	r5, r1
 800662a:	bfbc      	itt	lt
 800662c:	4625      	movlt	r5, r4
 800662e:	461c      	movlt	r4, r3
 8006630:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006634:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006638:	68ab      	ldr	r3, [r5, #8]
 800663a:	6869      	ldr	r1, [r5, #4]
 800663c:	eb0a 0709 	add.w	r7, sl, r9
 8006640:	42bb      	cmp	r3, r7
 8006642:	b085      	sub	sp, #20
 8006644:	bfb8      	it	lt
 8006646:	3101      	addlt	r1, #1
 8006648:	f7ff fed4 	bl	80063f4 <_Balloc>
 800664c:	b930      	cbnz	r0, 800665c <__multiply+0x44>
 800664e:	4602      	mov	r2, r0
 8006650:	4b42      	ldr	r3, [pc, #264]	; (800675c <__multiply+0x144>)
 8006652:	4843      	ldr	r0, [pc, #268]	; (8006760 <__multiply+0x148>)
 8006654:	f240 115d 	movw	r1, #349	; 0x15d
 8006658:	f000 fc70 	bl	8006f3c <__assert_func>
 800665c:	f100 0614 	add.w	r6, r0, #20
 8006660:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006664:	4633      	mov	r3, r6
 8006666:	2200      	movs	r2, #0
 8006668:	4543      	cmp	r3, r8
 800666a:	d31e      	bcc.n	80066aa <__multiply+0x92>
 800666c:	f105 0c14 	add.w	ip, r5, #20
 8006670:	f104 0314 	add.w	r3, r4, #20
 8006674:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006678:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800667c:	9202      	str	r2, [sp, #8]
 800667e:	ebac 0205 	sub.w	r2, ip, r5
 8006682:	3a15      	subs	r2, #21
 8006684:	f022 0203 	bic.w	r2, r2, #3
 8006688:	3204      	adds	r2, #4
 800668a:	f105 0115 	add.w	r1, r5, #21
 800668e:	458c      	cmp	ip, r1
 8006690:	bf38      	it	cc
 8006692:	2204      	movcc	r2, #4
 8006694:	9201      	str	r2, [sp, #4]
 8006696:	9a02      	ldr	r2, [sp, #8]
 8006698:	9303      	str	r3, [sp, #12]
 800669a:	429a      	cmp	r2, r3
 800669c:	d808      	bhi.n	80066b0 <__multiply+0x98>
 800669e:	2f00      	cmp	r7, #0
 80066a0:	dc55      	bgt.n	800674e <__multiply+0x136>
 80066a2:	6107      	str	r7, [r0, #16]
 80066a4:	b005      	add	sp, #20
 80066a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066aa:	f843 2b04 	str.w	r2, [r3], #4
 80066ae:	e7db      	b.n	8006668 <__multiply+0x50>
 80066b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80066b4:	f1ba 0f00 	cmp.w	sl, #0
 80066b8:	d020      	beq.n	80066fc <__multiply+0xe4>
 80066ba:	f105 0e14 	add.w	lr, r5, #20
 80066be:	46b1      	mov	r9, r6
 80066c0:	2200      	movs	r2, #0
 80066c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80066c6:	f8d9 b000 	ldr.w	fp, [r9]
 80066ca:	b2a1      	uxth	r1, r4
 80066cc:	fa1f fb8b 	uxth.w	fp, fp
 80066d0:	fb0a b101 	mla	r1, sl, r1, fp
 80066d4:	4411      	add	r1, r2
 80066d6:	f8d9 2000 	ldr.w	r2, [r9]
 80066da:	0c24      	lsrs	r4, r4, #16
 80066dc:	0c12      	lsrs	r2, r2, #16
 80066de:	fb0a 2404 	mla	r4, sl, r4, r2
 80066e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80066e6:	b289      	uxth	r1, r1
 80066e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80066ec:	45f4      	cmp	ip, lr
 80066ee:	f849 1b04 	str.w	r1, [r9], #4
 80066f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80066f6:	d8e4      	bhi.n	80066c2 <__multiply+0xaa>
 80066f8:	9901      	ldr	r1, [sp, #4]
 80066fa:	5072      	str	r2, [r6, r1]
 80066fc:	9a03      	ldr	r2, [sp, #12]
 80066fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006702:	3304      	adds	r3, #4
 8006704:	f1b9 0f00 	cmp.w	r9, #0
 8006708:	d01f      	beq.n	800674a <__multiply+0x132>
 800670a:	6834      	ldr	r4, [r6, #0]
 800670c:	f105 0114 	add.w	r1, r5, #20
 8006710:	46b6      	mov	lr, r6
 8006712:	f04f 0a00 	mov.w	sl, #0
 8006716:	880a      	ldrh	r2, [r1, #0]
 8006718:	f8be b002 	ldrh.w	fp, [lr, #2]
 800671c:	fb09 b202 	mla	r2, r9, r2, fp
 8006720:	4492      	add	sl, r2
 8006722:	b2a4      	uxth	r4, r4
 8006724:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006728:	f84e 4b04 	str.w	r4, [lr], #4
 800672c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006730:	f8be 2000 	ldrh.w	r2, [lr]
 8006734:	0c24      	lsrs	r4, r4, #16
 8006736:	fb09 2404 	mla	r4, r9, r4, r2
 800673a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800673e:	458c      	cmp	ip, r1
 8006740:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006744:	d8e7      	bhi.n	8006716 <__multiply+0xfe>
 8006746:	9a01      	ldr	r2, [sp, #4]
 8006748:	50b4      	str	r4, [r6, r2]
 800674a:	3604      	adds	r6, #4
 800674c:	e7a3      	b.n	8006696 <__multiply+0x7e>
 800674e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1a5      	bne.n	80066a2 <__multiply+0x8a>
 8006756:	3f01      	subs	r7, #1
 8006758:	e7a1      	b.n	800669e <__multiply+0x86>
 800675a:	bf00      	nop
 800675c:	08007bdf 	.word	0x08007bdf
 8006760:	08007bf0 	.word	0x08007bf0

08006764 <__pow5mult>:
 8006764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006768:	4615      	mov	r5, r2
 800676a:	f012 0203 	ands.w	r2, r2, #3
 800676e:	4606      	mov	r6, r0
 8006770:	460f      	mov	r7, r1
 8006772:	d007      	beq.n	8006784 <__pow5mult+0x20>
 8006774:	4c25      	ldr	r4, [pc, #148]	; (800680c <__pow5mult+0xa8>)
 8006776:	3a01      	subs	r2, #1
 8006778:	2300      	movs	r3, #0
 800677a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800677e:	f7ff fe9b 	bl	80064b8 <__multadd>
 8006782:	4607      	mov	r7, r0
 8006784:	10ad      	asrs	r5, r5, #2
 8006786:	d03d      	beq.n	8006804 <__pow5mult+0xa0>
 8006788:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800678a:	b97c      	cbnz	r4, 80067ac <__pow5mult+0x48>
 800678c:	2010      	movs	r0, #16
 800678e:	f7ff fe1b 	bl	80063c8 <malloc>
 8006792:	4602      	mov	r2, r0
 8006794:	6270      	str	r0, [r6, #36]	; 0x24
 8006796:	b928      	cbnz	r0, 80067a4 <__pow5mult+0x40>
 8006798:	4b1d      	ldr	r3, [pc, #116]	; (8006810 <__pow5mult+0xac>)
 800679a:	481e      	ldr	r0, [pc, #120]	; (8006814 <__pow5mult+0xb0>)
 800679c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80067a0:	f000 fbcc 	bl	8006f3c <__assert_func>
 80067a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067a8:	6004      	str	r4, [r0, #0]
 80067aa:	60c4      	str	r4, [r0, #12]
 80067ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067b4:	b94c      	cbnz	r4, 80067ca <__pow5mult+0x66>
 80067b6:	f240 2171 	movw	r1, #625	; 0x271
 80067ba:	4630      	mov	r0, r6
 80067bc:	f7ff ff16 	bl	80065ec <__i2b>
 80067c0:	2300      	movs	r3, #0
 80067c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80067c6:	4604      	mov	r4, r0
 80067c8:	6003      	str	r3, [r0, #0]
 80067ca:	f04f 0900 	mov.w	r9, #0
 80067ce:	07eb      	lsls	r3, r5, #31
 80067d0:	d50a      	bpl.n	80067e8 <__pow5mult+0x84>
 80067d2:	4639      	mov	r1, r7
 80067d4:	4622      	mov	r2, r4
 80067d6:	4630      	mov	r0, r6
 80067d8:	f7ff ff1e 	bl	8006618 <__multiply>
 80067dc:	4639      	mov	r1, r7
 80067de:	4680      	mov	r8, r0
 80067e0:	4630      	mov	r0, r6
 80067e2:	f7ff fe47 	bl	8006474 <_Bfree>
 80067e6:	4647      	mov	r7, r8
 80067e8:	106d      	asrs	r5, r5, #1
 80067ea:	d00b      	beq.n	8006804 <__pow5mult+0xa0>
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	b938      	cbnz	r0, 8006800 <__pow5mult+0x9c>
 80067f0:	4622      	mov	r2, r4
 80067f2:	4621      	mov	r1, r4
 80067f4:	4630      	mov	r0, r6
 80067f6:	f7ff ff0f 	bl	8006618 <__multiply>
 80067fa:	6020      	str	r0, [r4, #0]
 80067fc:	f8c0 9000 	str.w	r9, [r0]
 8006800:	4604      	mov	r4, r0
 8006802:	e7e4      	b.n	80067ce <__pow5mult+0x6a>
 8006804:	4638      	mov	r0, r7
 8006806:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800680a:	bf00      	nop
 800680c:	08007d40 	.word	0x08007d40
 8006810:	08007b69 	.word	0x08007b69
 8006814:	08007bf0 	.word	0x08007bf0

08006818 <__lshift>:
 8006818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800681c:	460c      	mov	r4, r1
 800681e:	6849      	ldr	r1, [r1, #4]
 8006820:	6923      	ldr	r3, [r4, #16]
 8006822:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006826:	68a3      	ldr	r3, [r4, #8]
 8006828:	4607      	mov	r7, r0
 800682a:	4691      	mov	r9, r2
 800682c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006830:	f108 0601 	add.w	r6, r8, #1
 8006834:	42b3      	cmp	r3, r6
 8006836:	db0b      	blt.n	8006850 <__lshift+0x38>
 8006838:	4638      	mov	r0, r7
 800683a:	f7ff fddb 	bl	80063f4 <_Balloc>
 800683e:	4605      	mov	r5, r0
 8006840:	b948      	cbnz	r0, 8006856 <__lshift+0x3e>
 8006842:	4602      	mov	r2, r0
 8006844:	4b28      	ldr	r3, [pc, #160]	; (80068e8 <__lshift+0xd0>)
 8006846:	4829      	ldr	r0, [pc, #164]	; (80068ec <__lshift+0xd4>)
 8006848:	f240 11d9 	movw	r1, #473	; 0x1d9
 800684c:	f000 fb76 	bl	8006f3c <__assert_func>
 8006850:	3101      	adds	r1, #1
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	e7ee      	b.n	8006834 <__lshift+0x1c>
 8006856:	2300      	movs	r3, #0
 8006858:	f100 0114 	add.w	r1, r0, #20
 800685c:	f100 0210 	add.w	r2, r0, #16
 8006860:	4618      	mov	r0, r3
 8006862:	4553      	cmp	r3, sl
 8006864:	db33      	blt.n	80068ce <__lshift+0xb6>
 8006866:	6920      	ldr	r0, [r4, #16]
 8006868:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800686c:	f104 0314 	add.w	r3, r4, #20
 8006870:	f019 091f 	ands.w	r9, r9, #31
 8006874:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006878:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800687c:	d02b      	beq.n	80068d6 <__lshift+0xbe>
 800687e:	f1c9 0e20 	rsb	lr, r9, #32
 8006882:	468a      	mov	sl, r1
 8006884:	2200      	movs	r2, #0
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	fa00 f009 	lsl.w	r0, r0, r9
 800688c:	4302      	orrs	r2, r0
 800688e:	f84a 2b04 	str.w	r2, [sl], #4
 8006892:	f853 2b04 	ldr.w	r2, [r3], #4
 8006896:	459c      	cmp	ip, r3
 8006898:	fa22 f20e 	lsr.w	r2, r2, lr
 800689c:	d8f3      	bhi.n	8006886 <__lshift+0x6e>
 800689e:	ebac 0304 	sub.w	r3, ip, r4
 80068a2:	3b15      	subs	r3, #21
 80068a4:	f023 0303 	bic.w	r3, r3, #3
 80068a8:	3304      	adds	r3, #4
 80068aa:	f104 0015 	add.w	r0, r4, #21
 80068ae:	4584      	cmp	ip, r0
 80068b0:	bf38      	it	cc
 80068b2:	2304      	movcc	r3, #4
 80068b4:	50ca      	str	r2, [r1, r3]
 80068b6:	b10a      	cbz	r2, 80068bc <__lshift+0xa4>
 80068b8:	f108 0602 	add.w	r6, r8, #2
 80068bc:	3e01      	subs	r6, #1
 80068be:	4638      	mov	r0, r7
 80068c0:	612e      	str	r6, [r5, #16]
 80068c2:	4621      	mov	r1, r4
 80068c4:	f7ff fdd6 	bl	8006474 <_Bfree>
 80068c8:	4628      	mov	r0, r5
 80068ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80068d2:	3301      	adds	r3, #1
 80068d4:	e7c5      	b.n	8006862 <__lshift+0x4a>
 80068d6:	3904      	subs	r1, #4
 80068d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80068e0:	459c      	cmp	ip, r3
 80068e2:	d8f9      	bhi.n	80068d8 <__lshift+0xc0>
 80068e4:	e7ea      	b.n	80068bc <__lshift+0xa4>
 80068e6:	bf00      	nop
 80068e8:	08007bdf 	.word	0x08007bdf
 80068ec:	08007bf0 	.word	0x08007bf0

080068f0 <__mcmp>:
 80068f0:	b530      	push	{r4, r5, lr}
 80068f2:	6902      	ldr	r2, [r0, #16]
 80068f4:	690c      	ldr	r4, [r1, #16]
 80068f6:	1b12      	subs	r2, r2, r4
 80068f8:	d10e      	bne.n	8006918 <__mcmp+0x28>
 80068fa:	f100 0314 	add.w	r3, r0, #20
 80068fe:	3114      	adds	r1, #20
 8006900:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006904:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006908:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800690c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006910:	42a5      	cmp	r5, r4
 8006912:	d003      	beq.n	800691c <__mcmp+0x2c>
 8006914:	d305      	bcc.n	8006922 <__mcmp+0x32>
 8006916:	2201      	movs	r2, #1
 8006918:	4610      	mov	r0, r2
 800691a:	bd30      	pop	{r4, r5, pc}
 800691c:	4283      	cmp	r3, r0
 800691e:	d3f3      	bcc.n	8006908 <__mcmp+0x18>
 8006920:	e7fa      	b.n	8006918 <__mcmp+0x28>
 8006922:	f04f 32ff 	mov.w	r2, #4294967295
 8006926:	e7f7      	b.n	8006918 <__mcmp+0x28>

08006928 <__mdiff>:
 8006928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	460c      	mov	r4, r1
 800692e:	4606      	mov	r6, r0
 8006930:	4611      	mov	r1, r2
 8006932:	4620      	mov	r0, r4
 8006934:	4617      	mov	r7, r2
 8006936:	f7ff ffdb 	bl	80068f0 <__mcmp>
 800693a:	1e05      	subs	r5, r0, #0
 800693c:	d110      	bne.n	8006960 <__mdiff+0x38>
 800693e:	4629      	mov	r1, r5
 8006940:	4630      	mov	r0, r6
 8006942:	f7ff fd57 	bl	80063f4 <_Balloc>
 8006946:	b930      	cbnz	r0, 8006956 <__mdiff+0x2e>
 8006948:	4b39      	ldr	r3, [pc, #228]	; (8006a30 <__mdiff+0x108>)
 800694a:	4602      	mov	r2, r0
 800694c:	f240 2132 	movw	r1, #562	; 0x232
 8006950:	4838      	ldr	r0, [pc, #224]	; (8006a34 <__mdiff+0x10c>)
 8006952:	f000 faf3 	bl	8006f3c <__assert_func>
 8006956:	2301      	movs	r3, #1
 8006958:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800695c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006960:	bfa4      	itt	ge
 8006962:	463b      	movge	r3, r7
 8006964:	4627      	movge	r7, r4
 8006966:	4630      	mov	r0, r6
 8006968:	6879      	ldr	r1, [r7, #4]
 800696a:	bfa6      	itte	ge
 800696c:	461c      	movge	r4, r3
 800696e:	2500      	movge	r5, #0
 8006970:	2501      	movlt	r5, #1
 8006972:	f7ff fd3f 	bl	80063f4 <_Balloc>
 8006976:	b920      	cbnz	r0, 8006982 <__mdiff+0x5a>
 8006978:	4b2d      	ldr	r3, [pc, #180]	; (8006a30 <__mdiff+0x108>)
 800697a:	4602      	mov	r2, r0
 800697c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006980:	e7e6      	b.n	8006950 <__mdiff+0x28>
 8006982:	693e      	ldr	r6, [r7, #16]
 8006984:	60c5      	str	r5, [r0, #12]
 8006986:	6925      	ldr	r5, [r4, #16]
 8006988:	f107 0114 	add.w	r1, r7, #20
 800698c:	f104 0914 	add.w	r9, r4, #20
 8006990:	f100 0e14 	add.w	lr, r0, #20
 8006994:	f107 0210 	add.w	r2, r7, #16
 8006998:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800699c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80069a0:	46f2      	mov	sl, lr
 80069a2:	2700      	movs	r7, #0
 80069a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80069a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80069ac:	fa1f f883 	uxth.w	r8, r3
 80069b0:	fa17 f78b 	uxtah	r7, r7, fp
 80069b4:	0c1b      	lsrs	r3, r3, #16
 80069b6:	eba7 0808 	sub.w	r8, r7, r8
 80069ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80069be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80069c2:	fa1f f888 	uxth.w	r8, r8
 80069c6:	141f      	asrs	r7, r3, #16
 80069c8:	454d      	cmp	r5, r9
 80069ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80069ce:	f84a 3b04 	str.w	r3, [sl], #4
 80069d2:	d8e7      	bhi.n	80069a4 <__mdiff+0x7c>
 80069d4:	1b2b      	subs	r3, r5, r4
 80069d6:	3b15      	subs	r3, #21
 80069d8:	f023 0303 	bic.w	r3, r3, #3
 80069dc:	3304      	adds	r3, #4
 80069de:	3415      	adds	r4, #21
 80069e0:	42a5      	cmp	r5, r4
 80069e2:	bf38      	it	cc
 80069e4:	2304      	movcc	r3, #4
 80069e6:	4419      	add	r1, r3
 80069e8:	4473      	add	r3, lr
 80069ea:	469e      	mov	lr, r3
 80069ec:	460d      	mov	r5, r1
 80069ee:	4565      	cmp	r5, ip
 80069f0:	d30e      	bcc.n	8006a10 <__mdiff+0xe8>
 80069f2:	f10c 0203 	add.w	r2, ip, #3
 80069f6:	1a52      	subs	r2, r2, r1
 80069f8:	f022 0203 	bic.w	r2, r2, #3
 80069fc:	3903      	subs	r1, #3
 80069fe:	458c      	cmp	ip, r1
 8006a00:	bf38      	it	cc
 8006a02:	2200      	movcc	r2, #0
 8006a04:	441a      	add	r2, r3
 8006a06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006a0a:	b17b      	cbz	r3, 8006a2c <__mdiff+0x104>
 8006a0c:	6106      	str	r6, [r0, #16]
 8006a0e:	e7a5      	b.n	800695c <__mdiff+0x34>
 8006a10:	f855 8b04 	ldr.w	r8, [r5], #4
 8006a14:	fa17 f488 	uxtah	r4, r7, r8
 8006a18:	1422      	asrs	r2, r4, #16
 8006a1a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006a1e:	b2a4      	uxth	r4, r4
 8006a20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006a24:	f84e 4b04 	str.w	r4, [lr], #4
 8006a28:	1417      	asrs	r7, r2, #16
 8006a2a:	e7e0      	b.n	80069ee <__mdiff+0xc6>
 8006a2c:	3e01      	subs	r6, #1
 8006a2e:	e7ea      	b.n	8006a06 <__mdiff+0xde>
 8006a30:	08007bdf 	.word	0x08007bdf
 8006a34:	08007bf0 	.word	0x08007bf0

08006a38 <__d2b>:
 8006a38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a3c:	4689      	mov	r9, r1
 8006a3e:	2101      	movs	r1, #1
 8006a40:	ec57 6b10 	vmov	r6, r7, d0
 8006a44:	4690      	mov	r8, r2
 8006a46:	f7ff fcd5 	bl	80063f4 <_Balloc>
 8006a4a:	4604      	mov	r4, r0
 8006a4c:	b930      	cbnz	r0, 8006a5c <__d2b+0x24>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	4b25      	ldr	r3, [pc, #148]	; (8006ae8 <__d2b+0xb0>)
 8006a52:	4826      	ldr	r0, [pc, #152]	; (8006aec <__d2b+0xb4>)
 8006a54:	f240 310a 	movw	r1, #778	; 0x30a
 8006a58:	f000 fa70 	bl	8006f3c <__assert_func>
 8006a5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006a60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a64:	bb35      	cbnz	r5, 8006ab4 <__d2b+0x7c>
 8006a66:	2e00      	cmp	r6, #0
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	d028      	beq.n	8006abe <__d2b+0x86>
 8006a6c:	4668      	mov	r0, sp
 8006a6e:	9600      	str	r6, [sp, #0]
 8006a70:	f7ff fd8c 	bl	800658c <__lo0bits>
 8006a74:	9900      	ldr	r1, [sp, #0]
 8006a76:	b300      	cbz	r0, 8006aba <__d2b+0x82>
 8006a78:	9a01      	ldr	r2, [sp, #4]
 8006a7a:	f1c0 0320 	rsb	r3, r0, #32
 8006a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a82:	430b      	orrs	r3, r1
 8006a84:	40c2      	lsrs	r2, r0
 8006a86:	6163      	str	r3, [r4, #20]
 8006a88:	9201      	str	r2, [sp, #4]
 8006a8a:	9b01      	ldr	r3, [sp, #4]
 8006a8c:	61a3      	str	r3, [r4, #24]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	bf14      	ite	ne
 8006a92:	2202      	movne	r2, #2
 8006a94:	2201      	moveq	r2, #1
 8006a96:	6122      	str	r2, [r4, #16]
 8006a98:	b1d5      	cbz	r5, 8006ad0 <__d2b+0x98>
 8006a9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006a9e:	4405      	add	r5, r0
 8006aa0:	f8c9 5000 	str.w	r5, [r9]
 8006aa4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006aa8:	f8c8 0000 	str.w	r0, [r8]
 8006aac:	4620      	mov	r0, r4
 8006aae:	b003      	add	sp, #12
 8006ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ab4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ab8:	e7d5      	b.n	8006a66 <__d2b+0x2e>
 8006aba:	6161      	str	r1, [r4, #20]
 8006abc:	e7e5      	b.n	8006a8a <__d2b+0x52>
 8006abe:	a801      	add	r0, sp, #4
 8006ac0:	f7ff fd64 	bl	800658c <__lo0bits>
 8006ac4:	9b01      	ldr	r3, [sp, #4]
 8006ac6:	6163      	str	r3, [r4, #20]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	6122      	str	r2, [r4, #16]
 8006acc:	3020      	adds	r0, #32
 8006ace:	e7e3      	b.n	8006a98 <__d2b+0x60>
 8006ad0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ad4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006ad8:	f8c9 0000 	str.w	r0, [r9]
 8006adc:	6918      	ldr	r0, [r3, #16]
 8006ade:	f7ff fd35 	bl	800654c <__hi0bits>
 8006ae2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ae6:	e7df      	b.n	8006aa8 <__d2b+0x70>
 8006ae8:	08007bdf 	.word	0x08007bdf
 8006aec:	08007bf0 	.word	0x08007bf0

08006af0 <_calloc_r>:
 8006af0:	b513      	push	{r0, r1, r4, lr}
 8006af2:	434a      	muls	r2, r1
 8006af4:	4611      	mov	r1, r2
 8006af6:	9201      	str	r2, [sp, #4]
 8006af8:	f000 f85a 	bl	8006bb0 <_malloc_r>
 8006afc:	4604      	mov	r4, r0
 8006afe:	b118      	cbz	r0, 8006b08 <_calloc_r+0x18>
 8006b00:	9a01      	ldr	r2, [sp, #4]
 8006b02:	2100      	movs	r1, #0
 8006b04:	f7fe f950 	bl	8004da8 <memset>
 8006b08:	4620      	mov	r0, r4
 8006b0a:	b002      	add	sp, #8
 8006b0c:	bd10      	pop	{r4, pc}
	...

08006b10 <_free_r>:
 8006b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b12:	2900      	cmp	r1, #0
 8006b14:	d048      	beq.n	8006ba8 <_free_r+0x98>
 8006b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b1a:	9001      	str	r0, [sp, #4]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b22:	bfb8      	it	lt
 8006b24:	18e4      	addlt	r4, r4, r3
 8006b26:	f000 fa65 	bl	8006ff4 <__malloc_lock>
 8006b2a:	4a20      	ldr	r2, [pc, #128]	; (8006bac <_free_r+0x9c>)
 8006b2c:	9801      	ldr	r0, [sp, #4]
 8006b2e:	6813      	ldr	r3, [r2, #0]
 8006b30:	4615      	mov	r5, r2
 8006b32:	b933      	cbnz	r3, 8006b42 <_free_r+0x32>
 8006b34:	6063      	str	r3, [r4, #4]
 8006b36:	6014      	str	r4, [r2, #0]
 8006b38:	b003      	add	sp, #12
 8006b3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b3e:	f000 ba5f 	b.w	8007000 <__malloc_unlock>
 8006b42:	42a3      	cmp	r3, r4
 8006b44:	d90b      	bls.n	8006b5e <_free_r+0x4e>
 8006b46:	6821      	ldr	r1, [r4, #0]
 8006b48:	1862      	adds	r2, r4, r1
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	bf04      	itt	eq
 8006b4e:	681a      	ldreq	r2, [r3, #0]
 8006b50:	685b      	ldreq	r3, [r3, #4]
 8006b52:	6063      	str	r3, [r4, #4]
 8006b54:	bf04      	itt	eq
 8006b56:	1852      	addeq	r2, r2, r1
 8006b58:	6022      	streq	r2, [r4, #0]
 8006b5a:	602c      	str	r4, [r5, #0]
 8006b5c:	e7ec      	b.n	8006b38 <_free_r+0x28>
 8006b5e:	461a      	mov	r2, r3
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	b10b      	cbz	r3, 8006b68 <_free_r+0x58>
 8006b64:	42a3      	cmp	r3, r4
 8006b66:	d9fa      	bls.n	8006b5e <_free_r+0x4e>
 8006b68:	6811      	ldr	r1, [r2, #0]
 8006b6a:	1855      	adds	r5, r2, r1
 8006b6c:	42a5      	cmp	r5, r4
 8006b6e:	d10b      	bne.n	8006b88 <_free_r+0x78>
 8006b70:	6824      	ldr	r4, [r4, #0]
 8006b72:	4421      	add	r1, r4
 8006b74:	1854      	adds	r4, r2, r1
 8006b76:	42a3      	cmp	r3, r4
 8006b78:	6011      	str	r1, [r2, #0]
 8006b7a:	d1dd      	bne.n	8006b38 <_free_r+0x28>
 8006b7c:	681c      	ldr	r4, [r3, #0]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	6053      	str	r3, [r2, #4]
 8006b82:	4421      	add	r1, r4
 8006b84:	6011      	str	r1, [r2, #0]
 8006b86:	e7d7      	b.n	8006b38 <_free_r+0x28>
 8006b88:	d902      	bls.n	8006b90 <_free_r+0x80>
 8006b8a:	230c      	movs	r3, #12
 8006b8c:	6003      	str	r3, [r0, #0]
 8006b8e:	e7d3      	b.n	8006b38 <_free_r+0x28>
 8006b90:	6825      	ldr	r5, [r4, #0]
 8006b92:	1961      	adds	r1, r4, r5
 8006b94:	428b      	cmp	r3, r1
 8006b96:	bf04      	itt	eq
 8006b98:	6819      	ldreq	r1, [r3, #0]
 8006b9a:	685b      	ldreq	r3, [r3, #4]
 8006b9c:	6063      	str	r3, [r4, #4]
 8006b9e:	bf04      	itt	eq
 8006ba0:	1949      	addeq	r1, r1, r5
 8006ba2:	6021      	streq	r1, [r4, #0]
 8006ba4:	6054      	str	r4, [r2, #4]
 8006ba6:	e7c7      	b.n	8006b38 <_free_r+0x28>
 8006ba8:	b003      	add	sp, #12
 8006baa:	bd30      	pop	{r4, r5, pc}
 8006bac:	20000204 	.word	0x20000204

08006bb0 <_malloc_r>:
 8006bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bb2:	1ccd      	adds	r5, r1, #3
 8006bb4:	f025 0503 	bic.w	r5, r5, #3
 8006bb8:	3508      	adds	r5, #8
 8006bba:	2d0c      	cmp	r5, #12
 8006bbc:	bf38      	it	cc
 8006bbe:	250c      	movcc	r5, #12
 8006bc0:	2d00      	cmp	r5, #0
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	db01      	blt.n	8006bca <_malloc_r+0x1a>
 8006bc6:	42a9      	cmp	r1, r5
 8006bc8:	d903      	bls.n	8006bd2 <_malloc_r+0x22>
 8006bca:	230c      	movs	r3, #12
 8006bcc:	6033      	str	r3, [r6, #0]
 8006bce:	2000      	movs	r0, #0
 8006bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bd2:	f000 fa0f 	bl	8006ff4 <__malloc_lock>
 8006bd6:	4921      	ldr	r1, [pc, #132]	; (8006c5c <_malloc_r+0xac>)
 8006bd8:	680a      	ldr	r2, [r1, #0]
 8006bda:	4614      	mov	r4, r2
 8006bdc:	b99c      	cbnz	r4, 8006c06 <_malloc_r+0x56>
 8006bde:	4f20      	ldr	r7, [pc, #128]	; (8006c60 <_malloc_r+0xb0>)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	b923      	cbnz	r3, 8006bee <_malloc_r+0x3e>
 8006be4:	4621      	mov	r1, r4
 8006be6:	4630      	mov	r0, r6
 8006be8:	f000 f998 	bl	8006f1c <_sbrk_r>
 8006bec:	6038      	str	r0, [r7, #0]
 8006bee:	4629      	mov	r1, r5
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f000 f993 	bl	8006f1c <_sbrk_r>
 8006bf6:	1c43      	adds	r3, r0, #1
 8006bf8:	d123      	bne.n	8006c42 <_malloc_r+0x92>
 8006bfa:	230c      	movs	r3, #12
 8006bfc:	6033      	str	r3, [r6, #0]
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f000 f9fe 	bl	8007000 <__malloc_unlock>
 8006c04:	e7e3      	b.n	8006bce <_malloc_r+0x1e>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	1b5b      	subs	r3, r3, r5
 8006c0a:	d417      	bmi.n	8006c3c <_malloc_r+0x8c>
 8006c0c:	2b0b      	cmp	r3, #11
 8006c0e:	d903      	bls.n	8006c18 <_malloc_r+0x68>
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	441c      	add	r4, r3
 8006c14:	6025      	str	r5, [r4, #0]
 8006c16:	e004      	b.n	8006c22 <_malloc_r+0x72>
 8006c18:	6863      	ldr	r3, [r4, #4]
 8006c1a:	42a2      	cmp	r2, r4
 8006c1c:	bf0c      	ite	eq
 8006c1e:	600b      	streq	r3, [r1, #0]
 8006c20:	6053      	strne	r3, [r2, #4]
 8006c22:	4630      	mov	r0, r6
 8006c24:	f000 f9ec 	bl	8007000 <__malloc_unlock>
 8006c28:	f104 000b 	add.w	r0, r4, #11
 8006c2c:	1d23      	adds	r3, r4, #4
 8006c2e:	f020 0007 	bic.w	r0, r0, #7
 8006c32:	1ac2      	subs	r2, r0, r3
 8006c34:	d0cc      	beq.n	8006bd0 <_malloc_r+0x20>
 8006c36:	1a1b      	subs	r3, r3, r0
 8006c38:	50a3      	str	r3, [r4, r2]
 8006c3a:	e7c9      	b.n	8006bd0 <_malloc_r+0x20>
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	6864      	ldr	r4, [r4, #4]
 8006c40:	e7cc      	b.n	8006bdc <_malloc_r+0x2c>
 8006c42:	1cc4      	adds	r4, r0, #3
 8006c44:	f024 0403 	bic.w	r4, r4, #3
 8006c48:	42a0      	cmp	r0, r4
 8006c4a:	d0e3      	beq.n	8006c14 <_malloc_r+0x64>
 8006c4c:	1a21      	subs	r1, r4, r0
 8006c4e:	4630      	mov	r0, r6
 8006c50:	f000 f964 	bl	8006f1c <_sbrk_r>
 8006c54:	3001      	adds	r0, #1
 8006c56:	d1dd      	bne.n	8006c14 <_malloc_r+0x64>
 8006c58:	e7cf      	b.n	8006bfa <_malloc_r+0x4a>
 8006c5a:	bf00      	nop
 8006c5c:	20000204 	.word	0x20000204
 8006c60:	20000208 	.word	0x20000208

08006c64 <__ssputs_r>:
 8006c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c68:	688e      	ldr	r6, [r1, #8]
 8006c6a:	429e      	cmp	r6, r3
 8006c6c:	4682      	mov	sl, r0
 8006c6e:	460c      	mov	r4, r1
 8006c70:	4690      	mov	r8, r2
 8006c72:	461f      	mov	r7, r3
 8006c74:	d838      	bhi.n	8006ce8 <__ssputs_r+0x84>
 8006c76:	898a      	ldrh	r2, [r1, #12]
 8006c78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c7c:	d032      	beq.n	8006ce4 <__ssputs_r+0x80>
 8006c7e:	6825      	ldr	r5, [r4, #0]
 8006c80:	6909      	ldr	r1, [r1, #16]
 8006c82:	eba5 0901 	sub.w	r9, r5, r1
 8006c86:	6965      	ldr	r5, [r4, #20]
 8006c88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c90:	3301      	adds	r3, #1
 8006c92:	444b      	add	r3, r9
 8006c94:	106d      	asrs	r5, r5, #1
 8006c96:	429d      	cmp	r5, r3
 8006c98:	bf38      	it	cc
 8006c9a:	461d      	movcc	r5, r3
 8006c9c:	0553      	lsls	r3, r2, #21
 8006c9e:	d531      	bpl.n	8006d04 <__ssputs_r+0xa0>
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7ff ff85 	bl	8006bb0 <_malloc_r>
 8006ca6:	4606      	mov	r6, r0
 8006ca8:	b950      	cbnz	r0, 8006cc0 <__ssputs_r+0x5c>
 8006caa:	230c      	movs	r3, #12
 8006cac:	f8ca 3000 	str.w	r3, [sl]
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb6:	81a3      	strh	r3, [r4, #12]
 8006cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cc0:	6921      	ldr	r1, [r4, #16]
 8006cc2:	464a      	mov	r2, r9
 8006cc4:	f7ff fb88 	bl	80063d8 <memcpy>
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cd2:	81a3      	strh	r3, [r4, #12]
 8006cd4:	6126      	str	r6, [r4, #16]
 8006cd6:	6165      	str	r5, [r4, #20]
 8006cd8:	444e      	add	r6, r9
 8006cda:	eba5 0509 	sub.w	r5, r5, r9
 8006cde:	6026      	str	r6, [r4, #0]
 8006ce0:	60a5      	str	r5, [r4, #8]
 8006ce2:	463e      	mov	r6, r7
 8006ce4:	42be      	cmp	r6, r7
 8006ce6:	d900      	bls.n	8006cea <__ssputs_r+0x86>
 8006ce8:	463e      	mov	r6, r7
 8006cea:	4632      	mov	r2, r6
 8006cec:	6820      	ldr	r0, [r4, #0]
 8006cee:	4641      	mov	r1, r8
 8006cf0:	f000 f966 	bl	8006fc0 <memmove>
 8006cf4:	68a3      	ldr	r3, [r4, #8]
 8006cf6:	6822      	ldr	r2, [r4, #0]
 8006cf8:	1b9b      	subs	r3, r3, r6
 8006cfa:	4432      	add	r2, r6
 8006cfc:	60a3      	str	r3, [r4, #8]
 8006cfe:	6022      	str	r2, [r4, #0]
 8006d00:	2000      	movs	r0, #0
 8006d02:	e7db      	b.n	8006cbc <__ssputs_r+0x58>
 8006d04:	462a      	mov	r2, r5
 8006d06:	f000 f981 	bl	800700c <_realloc_r>
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	2800      	cmp	r0, #0
 8006d0e:	d1e1      	bne.n	8006cd4 <__ssputs_r+0x70>
 8006d10:	6921      	ldr	r1, [r4, #16]
 8006d12:	4650      	mov	r0, sl
 8006d14:	f7ff fefc 	bl	8006b10 <_free_r>
 8006d18:	e7c7      	b.n	8006caa <__ssputs_r+0x46>
	...

08006d1c <_svfiprintf_r>:
 8006d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d20:	4698      	mov	r8, r3
 8006d22:	898b      	ldrh	r3, [r1, #12]
 8006d24:	061b      	lsls	r3, r3, #24
 8006d26:	b09d      	sub	sp, #116	; 0x74
 8006d28:	4607      	mov	r7, r0
 8006d2a:	460d      	mov	r5, r1
 8006d2c:	4614      	mov	r4, r2
 8006d2e:	d50e      	bpl.n	8006d4e <_svfiprintf_r+0x32>
 8006d30:	690b      	ldr	r3, [r1, #16]
 8006d32:	b963      	cbnz	r3, 8006d4e <_svfiprintf_r+0x32>
 8006d34:	2140      	movs	r1, #64	; 0x40
 8006d36:	f7ff ff3b 	bl	8006bb0 <_malloc_r>
 8006d3a:	6028      	str	r0, [r5, #0]
 8006d3c:	6128      	str	r0, [r5, #16]
 8006d3e:	b920      	cbnz	r0, 8006d4a <_svfiprintf_r+0x2e>
 8006d40:	230c      	movs	r3, #12
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	f04f 30ff 	mov.w	r0, #4294967295
 8006d48:	e0d1      	b.n	8006eee <_svfiprintf_r+0x1d2>
 8006d4a:	2340      	movs	r3, #64	; 0x40
 8006d4c:	616b      	str	r3, [r5, #20]
 8006d4e:	2300      	movs	r3, #0
 8006d50:	9309      	str	r3, [sp, #36]	; 0x24
 8006d52:	2320      	movs	r3, #32
 8006d54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d5c:	2330      	movs	r3, #48	; 0x30
 8006d5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f08 <_svfiprintf_r+0x1ec>
 8006d62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d66:	f04f 0901 	mov.w	r9, #1
 8006d6a:	4623      	mov	r3, r4
 8006d6c:	469a      	mov	sl, r3
 8006d6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d72:	b10a      	cbz	r2, 8006d78 <_svfiprintf_r+0x5c>
 8006d74:	2a25      	cmp	r2, #37	; 0x25
 8006d76:	d1f9      	bne.n	8006d6c <_svfiprintf_r+0x50>
 8006d78:	ebba 0b04 	subs.w	fp, sl, r4
 8006d7c:	d00b      	beq.n	8006d96 <_svfiprintf_r+0x7a>
 8006d7e:	465b      	mov	r3, fp
 8006d80:	4622      	mov	r2, r4
 8006d82:	4629      	mov	r1, r5
 8006d84:	4638      	mov	r0, r7
 8006d86:	f7ff ff6d 	bl	8006c64 <__ssputs_r>
 8006d8a:	3001      	adds	r0, #1
 8006d8c:	f000 80aa 	beq.w	8006ee4 <_svfiprintf_r+0x1c8>
 8006d90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d92:	445a      	add	r2, fp
 8006d94:	9209      	str	r2, [sp, #36]	; 0x24
 8006d96:	f89a 3000 	ldrb.w	r3, [sl]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80a2 	beq.w	8006ee4 <_svfiprintf_r+0x1c8>
 8006da0:	2300      	movs	r3, #0
 8006da2:	f04f 32ff 	mov.w	r2, #4294967295
 8006da6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006daa:	f10a 0a01 	add.w	sl, sl, #1
 8006dae:	9304      	str	r3, [sp, #16]
 8006db0:	9307      	str	r3, [sp, #28]
 8006db2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006db6:	931a      	str	r3, [sp, #104]	; 0x68
 8006db8:	4654      	mov	r4, sl
 8006dba:	2205      	movs	r2, #5
 8006dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc0:	4851      	ldr	r0, [pc, #324]	; (8006f08 <_svfiprintf_r+0x1ec>)
 8006dc2:	f7f9 fa2d 	bl	8000220 <memchr>
 8006dc6:	9a04      	ldr	r2, [sp, #16]
 8006dc8:	b9d8      	cbnz	r0, 8006e02 <_svfiprintf_r+0xe6>
 8006dca:	06d0      	lsls	r0, r2, #27
 8006dcc:	bf44      	itt	mi
 8006dce:	2320      	movmi	r3, #32
 8006dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dd4:	0711      	lsls	r1, r2, #28
 8006dd6:	bf44      	itt	mi
 8006dd8:	232b      	movmi	r3, #43	; 0x2b
 8006dda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dde:	f89a 3000 	ldrb.w	r3, [sl]
 8006de2:	2b2a      	cmp	r3, #42	; 0x2a
 8006de4:	d015      	beq.n	8006e12 <_svfiprintf_r+0xf6>
 8006de6:	9a07      	ldr	r2, [sp, #28]
 8006de8:	4654      	mov	r4, sl
 8006dea:	2000      	movs	r0, #0
 8006dec:	f04f 0c0a 	mov.w	ip, #10
 8006df0:	4621      	mov	r1, r4
 8006df2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df6:	3b30      	subs	r3, #48	; 0x30
 8006df8:	2b09      	cmp	r3, #9
 8006dfa:	d94e      	bls.n	8006e9a <_svfiprintf_r+0x17e>
 8006dfc:	b1b0      	cbz	r0, 8006e2c <_svfiprintf_r+0x110>
 8006dfe:	9207      	str	r2, [sp, #28]
 8006e00:	e014      	b.n	8006e2c <_svfiprintf_r+0x110>
 8006e02:	eba0 0308 	sub.w	r3, r0, r8
 8006e06:	fa09 f303 	lsl.w	r3, r9, r3
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	9304      	str	r3, [sp, #16]
 8006e0e:	46a2      	mov	sl, r4
 8006e10:	e7d2      	b.n	8006db8 <_svfiprintf_r+0x9c>
 8006e12:	9b03      	ldr	r3, [sp, #12]
 8006e14:	1d19      	adds	r1, r3, #4
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	9103      	str	r1, [sp, #12]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	bfbb      	ittet	lt
 8006e1e:	425b      	neglt	r3, r3
 8006e20:	f042 0202 	orrlt.w	r2, r2, #2
 8006e24:	9307      	strge	r3, [sp, #28]
 8006e26:	9307      	strlt	r3, [sp, #28]
 8006e28:	bfb8      	it	lt
 8006e2a:	9204      	strlt	r2, [sp, #16]
 8006e2c:	7823      	ldrb	r3, [r4, #0]
 8006e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e30:	d10c      	bne.n	8006e4c <_svfiprintf_r+0x130>
 8006e32:	7863      	ldrb	r3, [r4, #1]
 8006e34:	2b2a      	cmp	r3, #42	; 0x2a
 8006e36:	d135      	bne.n	8006ea4 <_svfiprintf_r+0x188>
 8006e38:	9b03      	ldr	r3, [sp, #12]
 8006e3a:	1d1a      	adds	r2, r3, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	9203      	str	r2, [sp, #12]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bfb8      	it	lt
 8006e44:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e48:	3402      	adds	r4, #2
 8006e4a:	9305      	str	r3, [sp, #20]
 8006e4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f18 <_svfiprintf_r+0x1fc>
 8006e50:	7821      	ldrb	r1, [r4, #0]
 8006e52:	2203      	movs	r2, #3
 8006e54:	4650      	mov	r0, sl
 8006e56:	f7f9 f9e3 	bl	8000220 <memchr>
 8006e5a:	b140      	cbz	r0, 8006e6e <_svfiprintf_r+0x152>
 8006e5c:	2340      	movs	r3, #64	; 0x40
 8006e5e:	eba0 000a 	sub.w	r0, r0, sl
 8006e62:	fa03 f000 	lsl.w	r0, r3, r0
 8006e66:	9b04      	ldr	r3, [sp, #16]
 8006e68:	4303      	orrs	r3, r0
 8006e6a:	3401      	adds	r4, #1
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e72:	4826      	ldr	r0, [pc, #152]	; (8006f0c <_svfiprintf_r+0x1f0>)
 8006e74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e78:	2206      	movs	r2, #6
 8006e7a:	f7f9 f9d1 	bl	8000220 <memchr>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d038      	beq.n	8006ef4 <_svfiprintf_r+0x1d8>
 8006e82:	4b23      	ldr	r3, [pc, #140]	; (8006f10 <_svfiprintf_r+0x1f4>)
 8006e84:	bb1b      	cbnz	r3, 8006ece <_svfiprintf_r+0x1b2>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	3307      	adds	r3, #7
 8006e8a:	f023 0307 	bic.w	r3, r3, #7
 8006e8e:	3308      	adds	r3, #8
 8006e90:	9303      	str	r3, [sp, #12]
 8006e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e94:	4433      	add	r3, r6
 8006e96:	9309      	str	r3, [sp, #36]	; 0x24
 8006e98:	e767      	b.n	8006d6a <_svfiprintf_r+0x4e>
 8006e9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e9e:	460c      	mov	r4, r1
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	e7a5      	b.n	8006df0 <_svfiprintf_r+0xd4>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	3401      	adds	r4, #1
 8006ea8:	9305      	str	r3, [sp, #20]
 8006eaa:	4619      	mov	r1, r3
 8006eac:	f04f 0c0a 	mov.w	ip, #10
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eb6:	3a30      	subs	r2, #48	; 0x30
 8006eb8:	2a09      	cmp	r2, #9
 8006eba:	d903      	bls.n	8006ec4 <_svfiprintf_r+0x1a8>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0c5      	beq.n	8006e4c <_svfiprintf_r+0x130>
 8006ec0:	9105      	str	r1, [sp, #20]
 8006ec2:	e7c3      	b.n	8006e4c <_svfiprintf_r+0x130>
 8006ec4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ec8:	4604      	mov	r4, r0
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e7f0      	b.n	8006eb0 <_svfiprintf_r+0x194>
 8006ece:	ab03      	add	r3, sp, #12
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	462a      	mov	r2, r5
 8006ed4:	4b0f      	ldr	r3, [pc, #60]	; (8006f14 <_svfiprintf_r+0x1f8>)
 8006ed6:	a904      	add	r1, sp, #16
 8006ed8:	4638      	mov	r0, r7
 8006eda:	f7fe f80d 	bl	8004ef8 <_printf_float>
 8006ede:	1c42      	adds	r2, r0, #1
 8006ee0:	4606      	mov	r6, r0
 8006ee2:	d1d6      	bne.n	8006e92 <_svfiprintf_r+0x176>
 8006ee4:	89ab      	ldrh	r3, [r5, #12]
 8006ee6:	065b      	lsls	r3, r3, #25
 8006ee8:	f53f af2c 	bmi.w	8006d44 <_svfiprintf_r+0x28>
 8006eec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eee:	b01d      	add	sp, #116	; 0x74
 8006ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ef4:	ab03      	add	r3, sp, #12
 8006ef6:	9300      	str	r3, [sp, #0]
 8006ef8:	462a      	mov	r2, r5
 8006efa:	4b06      	ldr	r3, [pc, #24]	; (8006f14 <_svfiprintf_r+0x1f8>)
 8006efc:	a904      	add	r1, sp, #16
 8006efe:	4638      	mov	r0, r7
 8006f00:	f7fe fa9e 	bl	8005440 <_printf_i>
 8006f04:	e7eb      	b.n	8006ede <_svfiprintf_r+0x1c2>
 8006f06:	bf00      	nop
 8006f08:	08007d4c 	.word	0x08007d4c
 8006f0c:	08007d56 	.word	0x08007d56
 8006f10:	08004ef9 	.word	0x08004ef9
 8006f14:	08006c65 	.word	0x08006c65
 8006f18:	08007d52 	.word	0x08007d52

08006f1c <_sbrk_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4d06      	ldr	r5, [pc, #24]	; (8006f38 <_sbrk_r+0x1c>)
 8006f20:	2300      	movs	r3, #0
 8006f22:	4604      	mov	r4, r0
 8006f24:	4608      	mov	r0, r1
 8006f26:	602b      	str	r3, [r5, #0]
 8006f28:	f7fa fcc8 	bl	80018bc <_sbrk>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d102      	bne.n	8006f36 <_sbrk_r+0x1a>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b103      	cbz	r3, 8006f36 <_sbrk_r+0x1a>
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	200006e4 	.word	0x200006e4

08006f3c <__assert_func>:
 8006f3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f3e:	4614      	mov	r4, r2
 8006f40:	461a      	mov	r2, r3
 8006f42:	4b09      	ldr	r3, [pc, #36]	; (8006f68 <__assert_func+0x2c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4605      	mov	r5, r0
 8006f48:	68d8      	ldr	r0, [r3, #12]
 8006f4a:	b14c      	cbz	r4, 8006f60 <__assert_func+0x24>
 8006f4c:	4b07      	ldr	r3, [pc, #28]	; (8006f6c <__assert_func+0x30>)
 8006f4e:	9100      	str	r1, [sp, #0]
 8006f50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f54:	4906      	ldr	r1, [pc, #24]	; (8006f70 <__assert_func+0x34>)
 8006f56:	462b      	mov	r3, r5
 8006f58:	f000 f80e 	bl	8006f78 <fiprintf>
 8006f5c:	f000 faa4 	bl	80074a8 <abort>
 8006f60:	4b04      	ldr	r3, [pc, #16]	; (8006f74 <__assert_func+0x38>)
 8006f62:	461c      	mov	r4, r3
 8006f64:	e7f3      	b.n	8006f4e <__assert_func+0x12>
 8006f66:	bf00      	nop
 8006f68:	2000000c 	.word	0x2000000c
 8006f6c:	08007d5d 	.word	0x08007d5d
 8006f70:	08007d6a 	.word	0x08007d6a
 8006f74:	08007d98 	.word	0x08007d98

08006f78 <fiprintf>:
 8006f78:	b40e      	push	{r1, r2, r3}
 8006f7a:	b503      	push	{r0, r1, lr}
 8006f7c:	4601      	mov	r1, r0
 8006f7e:	ab03      	add	r3, sp, #12
 8006f80:	4805      	ldr	r0, [pc, #20]	; (8006f98 <fiprintf+0x20>)
 8006f82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f86:	6800      	ldr	r0, [r0, #0]
 8006f88:	9301      	str	r3, [sp, #4]
 8006f8a:	f000 f88f 	bl	80070ac <_vfiprintf_r>
 8006f8e:	b002      	add	sp, #8
 8006f90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f94:	b003      	add	sp, #12
 8006f96:	4770      	bx	lr
 8006f98:	2000000c 	.word	0x2000000c

08006f9c <__ascii_mbtowc>:
 8006f9c:	b082      	sub	sp, #8
 8006f9e:	b901      	cbnz	r1, 8006fa2 <__ascii_mbtowc+0x6>
 8006fa0:	a901      	add	r1, sp, #4
 8006fa2:	b142      	cbz	r2, 8006fb6 <__ascii_mbtowc+0x1a>
 8006fa4:	b14b      	cbz	r3, 8006fba <__ascii_mbtowc+0x1e>
 8006fa6:	7813      	ldrb	r3, [r2, #0]
 8006fa8:	600b      	str	r3, [r1, #0]
 8006faa:	7812      	ldrb	r2, [r2, #0]
 8006fac:	1e10      	subs	r0, r2, #0
 8006fae:	bf18      	it	ne
 8006fb0:	2001      	movne	r0, #1
 8006fb2:	b002      	add	sp, #8
 8006fb4:	4770      	bx	lr
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	e7fb      	b.n	8006fb2 <__ascii_mbtowc+0x16>
 8006fba:	f06f 0001 	mvn.w	r0, #1
 8006fbe:	e7f8      	b.n	8006fb2 <__ascii_mbtowc+0x16>

08006fc0 <memmove>:
 8006fc0:	4288      	cmp	r0, r1
 8006fc2:	b510      	push	{r4, lr}
 8006fc4:	eb01 0402 	add.w	r4, r1, r2
 8006fc8:	d902      	bls.n	8006fd0 <memmove+0x10>
 8006fca:	4284      	cmp	r4, r0
 8006fcc:	4623      	mov	r3, r4
 8006fce:	d807      	bhi.n	8006fe0 <memmove+0x20>
 8006fd0:	1e43      	subs	r3, r0, #1
 8006fd2:	42a1      	cmp	r1, r4
 8006fd4:	d008      	beq.n	8006fe8 <memmove+0x28>
 8006fd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fda:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fde:	e7f8      	b.n	8006fd2 <memmove+0x12>
 8006fe0:	4402      	add	r2, r0
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	428a      	cmp	r2, r1
 8006fe6:	d100      	bne.n	8006fea <memmove+0x2a>
 8006fe8:	bd10      	pop	{r4, pc}
 8006fea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ff2:	e7f7      	b.n	8006fe4 <memmove+0x24>

08006ff4 <__malloc_lock>:
 8006ff4:	4801      	ldr	r0, [pc, #4]	; (8006ffc <__malloc_lock+0x8>)
 8006ff6:	f000 bc17 	b.w	8007828 <__retarget_lock_acquire_recursive>
 8006ffa:	bf00      	nop
 8006ffc:	200006ec 	.word	0x200006ec

08007000 <__malloc_unlock>:
 8007000:	4801      	ldr	r0, [pc, #4]	; (8007008 <__malloc_unlock+0x8>)
 8007002:	f000 bc12 	b.w	800782a <__retarget_lock_release_recursive>
 8007006:	bf00      	nop
 8007008:	200006ec 	.word	0x200006ec

0800700c <_realloc_r>:
 800700c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800700e:	4607      	mov	r7, r0
 8007010:	4614      	mov	r4, r2
 8007012:	460e      	mov	r6, r1
 8007014:	b921      	cbnz	r1, 8007020 <_realloc_r+0x14>
 8007016:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800701a:	4611      	mov	r1, r2
 800701c:	f7ff bdc8 	b.w	8006bb0 <_malloc_r>
 8007020:	b922      	cbnz	r2, 800702c <_realloc_r+0x20>
 8007022:	f7ff fd75 	bl	8006b10 <_free_r>
 8007026:	4625      	mov	r5, r4
 8007028:	4628      	mov	r0, r5
 800702a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800702c:	f000 fc62 	bl	80078f4 <_malloc_usable_size_r>
 8007030:	42a0      	cmp	r0, r4
 8007032:	d20f      	bcs.n	8007054 <_realloc_r+0x48>
 8007034:	4621      	mov	r1, r4
 8007036:	4638      	mov	r0, r7
 8007038:	f7ff fdba 	bl	8006bb0 <_malloc_r>
 800703c:	4605      	mov	r5, r0
 800703e:	2800      	cmp	r0, #0
 8007040:	d0f2      	beq.n	8007028 <_realloc_r+0x1c>
 8007042:	4631      	mov	r1, r6
 8007044:	4622      	mov	r2, r4
 8007046:	f7ff f9c7 	bl	80063d8 <memcpy>
 800704a:	4631      	mov	r1, r6
 800704c:	4638      	mov	r0, r7
 800704e:	f7ff fd5f 	bl	8006b10 <_free_r>
 8007052:	e7e9      	b.n	8007028 <_realloc_r+0x1c>
 8007054:	4635      	mov	r5, r6
 8007056:	e7e7      	b.n	8007028 <_realloc_r+0x1c>

08007058 <__sfputc_r>:
 8007058:	6893      	ldr	r3, [r2, #8]
 800705a:	3b01      	subs	r3, #1
 800705c:	2b00      	cmp	r3, #0
 800705e:	b410      	push	{r4}
 8007060:	6093      	str	r3, [r2, #8]
 8007062:	da08      	bge.n	8007076 <__sfputc_r+0x1e>
 8007064:	6994      	ldr	r4, [r2, #24]
 8007066:	42a3      	cmp	r3, r4
 8007068:	db01      	blt.n	800706e <__sfputc_r+0x16>
 800706a:	290a      	cmp	r1, #10
 800706c:	d103      	bne.n	8007076 <__sfputc_r+0x1e>
 800706e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007072:	f000 b94b 	b.w	800730c <__swbuf_r>
 8007076:	6813      	ldr	r3, [r2, #0]
 8007078:	1c58      	adds	r0, r3, #1
 800707a:	6010      	str	r0, [r2, #0]
 800707c:	7019      	strb	r1, [r3, #0]
 800707e:	4608      	mov	r0, r1
 8007080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007084:	4770      	bx	lr

08007086 <__sfputs_r>:
 8007086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007088:	4606      	mov	r6, r0
 800708a:	460f      	mov	r7, r1
 800708c:	4614      	mov	r4, r2
 800708e:	18d5      	adds	r5, r2, r3
 8007090:	42ac      	cmp	r4, r5
 8007092:	d101      	bne.n	8007098 <__sfputs_r+0x12>
 8007094:	2000      	movs	r0, #0
 8007096:	e007      	b.n	80070a8 <__sfputs_r+0x22>
 8007098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800709c:	463a      	mov	r2, r7
 800709e:	4630      	mov	r0, r6
 80070a0:	f7ff ffda 	bl	8007058 <__sfputc_r>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d1f3      	bne.n	8007090 <__sfputs_r+0xa>
 80070a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070ac <_vfiprintf_r>:
 80070ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b0:	460d      	mov	r5, r1
 80070b2:	b09d      	sub	sp, #116	; 0x74
 80070b4:	4614      	mov	r4, r2
 80070b6:	4698      	mov	r8, r3
 80070b8:	4606      	mov	r6, r0
 80070ba:	b118      	cbz	r0, 80070c4 <_vfiprintf_r+0x18>
 80070bc:	6983      	ldr	r3, [r0, #24]
 80070be:	b90b      	cbnz	r3, 80070c4 <_vfiprintf_r+0x18>
 80070c0:	f000 fb14 	bl	80076ec <__sinit>
 80070c4:	4b89      	ldr	r3, [pc, #548]	; (80072ec <_vfiprintf_r+0x240>)
 80070c6:	429d      	cmp	r5, r3
 80070c8:	d11b      	bne.n	8007102 <_vfiprintf_r+0x56>
 80070ca:	6875      	ldr	r5, [r6, #4]
 80070cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ce:	07d9      	lsls	r1, r3, #31
 80070d0:	d405      	bmi.n	80070de <_vfiprintf_r+0x32>
 80070d2:	89ab      	ldrh	r3, [r5, #12]
 80070d4:	059a      	lsls	r2, r3, #22
 80070d6:	d402      	bmi.n	80070de <_vfiprintf_r+0x32>
 80070d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070da:	f000 fba5 	bl	8007828 <__retarget_lock_acquire_recursive>
 80070de:	89ab      	ldrh	r3, [r5, #12]
 80070e0:	071b      	lsls	r3, r3, #28
 80070e2:	d501      	bpl.n	80070e8 <_vfiprintf_r+0x3c>
 80070e4:	692b      	ldr	r3, [r5, #16]
 80070e6:	b9eb      	cbnz	r3, 8007124 <_vfiprintf_r+0x78>
 80070e8:	4629      	mov	r1, r5
 80070ea:	4630      	mov	r0, r6
 80070ec:	f000 f96e 	bl	80073cc <__swsetup_r>
 80070f0:	b1c0      	cbz	r0, 8007124 <_vfiprintf_r+0x78>
 80070f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070f4:	07dc      	lsls	r4, r3, #31
 80070f6:	d50e      	bpl.n	8007116 <_vfiprintf_r+0x6a>
 80070f8:	f04f 30ff 	mov.w	r0, #4294967295
 80070fc:	b01d      	add	sp, #116	; 0x74
 80070fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007102:	4b7b      	ldr	r3, [pc, #492]	; (80072f0 <_vfiprintf_r+0x244>)
 8007104:	429d      	cmp	r5, r3
 8007106:	d101      	bne.n	800710c <_vfiprintf_r+0x60>
 8007108:	68b5      	ldr	r5, [r6, #8]
 800710a:	e7df      	b.n	80070cc <_vfiprintf_r+0x20>
 800710c:	4b79      	ldr	r3, [pc, #484]	; (80072f4 <_vfiprintf_r+0x248>)
 800710e:	429d      	cmp	r5, r3
 8007110:	bf08      	it	eq
 8007112:	68f5      	ldreq	r5, [r6, #12]
 8007114:	e7da      	b.n	80070cc <_vfiprintf_r+0x20>
 8007116:	89ab      	ldrh	r3, [r5, #12]
 8007118:	0598      	lsls	r0, r3, #22
 800711a:	d4ed      	bmi.n	80070f8 <_vfiprintf_r+0x4c>
 800711c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800711e:	f000 fb84 	bl	800782a <__retarget_lock_release_recursive>
 8007122:	e7e9      	b.n	80070f8 <_vfiprintf_r+0x4c>
 8007124:	2300      	movs	r3, #0
 8007126:	9309      	str	r3, [sp, #36]	; 0x24
 8007128:	2320      	movs	r3, #32
 800712a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800712e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007132:	2330      	movs	r3, #48	; 0x30
 8007134:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072f8 <_vfiprintf_r+0x24c>
 8007138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800713c:	f04f 0901 	mov.w	r9, #1
 8007140:	4623      	mov	r3, r4
 8007142:	469a      	mov	sl, r3
 8007144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007148:	b10a      	cbz	r2, 800714e <_vfiprintf_r+0xa2>
 800714a:	2a25      	cmp	r2, #37	; 0x25
 800714c:	d1f9      	bne.n	8007142 <_vfiprintf_r+0x96>
 800714e:	ebba 0b04 	subs.w	fp, sl, r4
 8007152:	d00b      	beq.n	800716c <_vfiprintf_r+0xc0>
 8007154:	465b      	mov	r3, fp
 8007156:	4622      	mov	r2, r4
 8007158:	4629      	mov	r1, r5
 800715a:	4630      	mov	r0, r6
 800715c:	f7ff ff93 	bl	8007086 <__sfputs_r>
 8007160:	3001      	adds	r0, #1
 8007162:	f000 80aa 	beq.w	80072ba <_vfiprintf_r+0x20e>
 8007166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007168:	445a      	add	r2, fp
 800716a:	9209      	str	r2, [sp, #36]	; 0x24
 800716c:	f89a 3000 	ldrb.w	r3, [sl]
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 80a2 	beq.w	80072ba <_vfiprintf_r+0x20e>
 8007176:	2300      	movs	r3, #0
 8007178:	f04f 32ff 	mov.w	r2, #4294967295
 800717c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007180:	f10a 0a01 	add.w	sl, sl, #1
 8007184:	9304      	str	r3, [sp, #16]
 8007186:	9307      	str	r3, [sp, #28]
 8007188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800718c:	931a      	str	r3, [sp, #104]	; 0x68
 800718e:	4654      	mov	r4, sl
 8007190:	2205      	movs	r2, #5
 8007192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007196:	4858      	ldr	r0, [pc, #352]	; (80072f8 <_vfiprintf_r+0x24c>)
 8007198:	f7f9 f842 	bl	8000220 <memchr>
 800719c:	9a04      	ldr	r2, [sp, #16]
 800719e:	b9d8      	cbnz	r0, 80071d8 <_vfiprintf_r+0x12c>
 80071a0:	06d1      	lsls	r1, r2, #27
 80071a2:	bf44      	itt	mi
 80071a4:	2320      	movmi	r3, #32
 80071a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071aa:	0713      	lsls	r3, r2, #28
 80071ac:	bf44      	itt	mi
 80071ae:	232b      	movmi	r3, #43	; 0x2b
 80071b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071b4:	f89a 3000 	ldrb.w	r3, [sl]
 80071b8:	2b2a      	cmp	r3, #42	; 0x2a
 80071ba:	d015      	beq.n	80071e8 <_vfiprintf_r+0x13c>
 80071bc:	9a07      	ldr	r2, [sp, #28]
 80071be:	4654      	mov	r4, sl
 80071c0:	2000      	movs	r0, #0
 80071c2:	f04f 0c0a 	mov.w	ip, #10
 80071c6:	4621      	mov	r1, r4
 80071c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071cc:	3b30      	subs	r3, #48	; 0x30
 80071ce:	2b09      	cmp	r3, #9
 80071d0:	d94e      	bls.n	8007270 <_vfiprintf_r+0x1c4>
 80071d2:	b1b0      	cbz	r0, 8007202 <_vfiprintf_r+0x156>
 80071d4:	9207      	str	r2, [sp, #28]
 80071d6:	e014      	b.n	8007202 <_vfiprintf_r+0x156>
 80071d8:	eba0 0308 	sub.w	r3, r0, r8
 80071dc:	fa09 f303 	lsl.w	r3, r9, r3
 80071e0:	4313      	orrs	r3, r2
 80071e2:	9304      	str	r3, [sp, #16]
 80071e4:	46a2      	mov	sl, r4
 80071e6:	e7d2      	b.n	800718e <_vfiprintf_r+0xe2>
 80071e8:	9b03      	ldr	r3, [sp, #12]
 80071ea:	1d19      	adds	r1, r3, #4
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	9103      	str	r1, [sp, #12]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	bfbb      	ittet	lt
 80071f4:	425b      	neglt	r3, r3
 80071f6:	f042 0202 	orrlt.w	r2, r2, #2
 80071fa:	9307      	strge	r3, [sp, #28]
 80071fc:	9307      	strlt	r3, [sp, #28]
 80071fe:	bfb8      	it	lt
 8007200:	9204      	strlt	r2, [sp, #16]
 8007202:	7823      	ldrb	r3, [r4, #0]
 8007204:	2b2e      	cmp	r3, #46	; 0x2e
 8007206:	d10c      	bne.n	8007222 <_vfiprintf_r+0x176>
 8007208:	7863      	ldrb	r3, [r4, #1]
 800720a:	2b2a      	cmp	r3, #42	; 0x2a
 800720c:	d135      	bne.n	800727a <_vfiprintf_r+0x1ce>
 800720e:	9b03      	ldr	r3, [sp, #12]
 8007210:	1d1a      	adds	r2, r3, #4
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	9203      	str	r2, [sp, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	bfb8      	it	lt
 800721a:	f04f 33ff 	movlt.w	r3, #4294967295
 800721e:	3402      	adds	r4, #2
 8007220:	9305      	str	r3, [sp, #20]
 8007222:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007308 <_vfiprintf_r+0x25c>
 8007226:	7821      	ldrb	r1, [r4, #0]
 8007228:	2203      	movs	r2, #3
 800722a:	4650      	mov	r0, sl
 800722c:	f7f8 fff8 	bl	8000220 <memchr>
 8007230:	b140      	cbz	r0, 8007244 <_vfiprintf_r+0x198>
 8007232:	2340      	movs	r3, #64	; 0x40
 8007234:	eba0 000a 	sub.w	r0, r0, sl
 8007238:	fa03 f000 	lsl.w	r0, r3, r0
 800723c:	9b04      	ldr	r3, [sp, #16]
 800723e:	4303      	orrs	r3, r0
 8007240:	3401      	adds	r4, #1
 8007242:	9304      	str	r3, [sp, #16]
 8007244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007248:	482c      	ldr	r0, [pc, #176]	; (80072fc <_vfiprintf_r+0x250>)
 800724a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800724e:	2206      	movs	r2, #6
 8007250:	f7f8 ffe6 	bl	8000220 <memchr>
 8007254:	2800      	cmp	r0, #0
 8007256:	d03f      	beq.n	80072d8 <_vfiprintf_r+0x22c>
 8007258:	4b29      	ldr	r3, [pc, #164]	; (8007300 <_vfiprintf_r+0x254>)
 800725a:	bb1b      	cbnz	r3, 80072a4 <_vfiprintf_r+0x1f8>
 800725c:	9b03      	ldr	r3, [sp, #12]
 800725e:	3307      	adds	r3, #7
 8007260:	f023 0307 	bic.w	r3, r3, #7
 8007264:	3308      	adds	r3, #8
 8007266:	9303      	str	r3, [sp, #12]
 8007268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726a:	443b      	add	r3, r7
 800726c:	9309      	str	r3, [sp, #36]	; 0x24
 800726e:	e767      	b.n	8007140 <_vfiprintf_r+0x94>
 8007270:	fb0c 3202 	mla	r2, ip, r2, r3
 8007274:	460c      	mov	r4, r1
 8007276:	2001      	movs	r0, #1
 8007278:	e7a5      	b.n	80071c6 <_vfiprintf_r+0x11a>
 800727a:	2300      	movs	r3, #0
 800727c:	3401      	adds	r4, #1
 800727e:	9305      	str	r3, [sp, #20]
 8007280:	4619      	mov	r1, r3
 8007282:	f04f 0c0a 	mov.w	ip, #10
 8007286:	4620      	mov	r0, r4
 8007288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800728c:	3a30      	subs	r2, #48	; 0x30
 800728e:	2a09      	cmp	r2, #9
 8007290:	d903      	bls.n	800729a <_vfiprintf_r+0x1ee>
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0c5      	beq.n	8007222 <_vfiprintf_r+0x176>
 8007296:	9105      	str	r1, [sp, #20]
 8007298:	e7c3      	b.n	8007222 <_vfiprintf_r+0x176>
 800729a:	fb0c 2101 	mla	r1, ip, r1, r2
 800729e:	4604      	mov	r4, r0
 80072a0:	2301      	movs	r3, #1
 80072a2:	e7f0      	b.n	8007286 <_vfiprintf_r+0x1da>
 80072a4:	ab03      	add	r3, sp, #12
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	462a      	mov	r2, r5
 80072aa:	4b16      	ldr	r3, [pc, #88]	; (8007304 <_vfiprintf_r+0x258>)
 80072ac:	a904      	add	r1, sp, #16
 80072ae:	4630      	mov	r0, r6
 80072b0:	f7fd fe22 	bl	8004ef8 <_printf_float>
 80072b4:	4607      	mov	r7, r0
 80072b6:	1c78      	adds	r0, r7, #1
 80072b8:	d1d6      	bne.n	8007268 <_vfiprintf_r+0x1bc>
 80072ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072bc:	07d9      	lsls	r1, r3, #31
 80072be:	d405      	bmi.n	80072cc <_vfiprintf_r+0x220>
 80072c0:	89ab      	ldrh	r3, [r5, #12]
 80072c2:	059a      	lsls	r2, r3, #22
 80072c4:	d402      	bmi.n	80072cc <_vfiprintf_r+0x220>
 80072c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072c8:	f000 faaf 	bl	800782a <__retarget_lock_release_recursive>
 80072cc:	89ab      	ldrh	r3, [r5, #12]
 80072ce:	065b      	lsls	r3, r3, #25
 80072d0:	f53f af12 	bmi.w	80070f8 <_vfiprintf_r+0x4c>
 80072d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072d6:	e711      	b.n	80070fc <_vfiprintf_r+0x50>
 80072d8:	ab03      	add	r3, sp, #12
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	462a      	mov	r2, r5
 80072de:	4b09      	ldr	r3, [pc, #36]	; (8007304 <_vfiprintf_r+0x258>)
 80072e0:	a904      	add	r1, sp, #16
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7fe f8ac 	bl	8005440 <_printf_i>
 80072e8:	e7e4      	b.n	80072b4 <_vfiprintf_r+0x208>
 80072ea:	bf00      	nop
 80072ec:	08007ec4 	.word	0x08007ec4
 80072f0:	08007ee4 	.word	0x08007ee4
 80072f4:	08007ea4 	.word	0x08007ea4
 80072f8:	08007d4c 	.word	0x08007d4c
 80072fc:	08007d56 	.word	0x08007d56
 8007300:	08004ef9 	.word	0x08004ef9
 8007304:	08007087 	.word	0x08007087
 8007308:	08007d52 	.word	0x08007d52

0800730c <__swbuf_r>:
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	460e      	mov	r6, r1
 8007310:	4614      	mov	r4, r2
 8007312:	4605      	mov	r5, r0
 8007314:	b118      	cbz	r0, 800731e <__swbuf_r+0x12>
 8007316:	6983      	ldr	r3, [r0, #24]
 8007318:	b90b      	cbnz	r3, 800731e <__swbuf_r+0x12>
 800731a:	f000 f9e7 	bl	80076ec <__sinit>
 800731e:	4b21      	ldr	r3, [pc, #132]	; (80073a4 <__swbuf_r+0x98>)
 8007320:	429c      	cmp	r4, r3
 8007322:	d12b      	bne.n	800737c <__swbuf_r+0x70>
 8007324:	686c      	ldr	r4, [r5, #4]
 8007326:	69a3      	ldr	r3, [r4, #24]
 8007328:	60a3      	str	r3, [r4, #8]
 800732a:	89a3      	ldrh	r3, [r4, #12]
 800732c:	071a      	lsls	r2, r3, #28
 800732e:	d52f      	bpl.n	8007390 <__swbuf_r+0x84>
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	b36b      	cbz	r3, 8007390 <__swbuf_r+0x84>
 8007334:	6923      	ldr	r3, [r4, #16]
 8007336:	6820      	ldr	r0, [r4, #0]
 8007338:	1ac0      	subs	r0, r0, r3
 800733a:	6963      	ldr	r3, [r4, #20]
 800733c:	b2f6      	uxtb	r6, r6
 800733e:	4283      	cmp	r3, r0
 8007340:	4637      	mov	r7, r6
 8007342:	dc04      	bgt.n	800734e <__swbuf_r+0x42>
 8007344:	4621      	mov	r1, r4
 8007346:	4628      	mov	r0, r5
 8007348:	f000 f93c 	bl	80075c4 <_fflush_r>
 800734c:	bb30      	cbnz	r0, 800739c <__swbuf_r+0x90>
 800734e:	68a3      	ldr	r3, [r4, #8]
 8007350:	3b01      	subs	r3, #1
 8007352:	60a3      	str	r3, [r4, #8]
 8007354:	6823      	ldr	r3, [r4, #0]
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	6022      	str	r2, [r4, #0]
 800735a:	701e      	strb	r6, [r3, #0]
 800735c:	6963      	ldr	r3, [r4, #20]
 800735e:	3001      	adds	r0, #1
 8007360:	4283      	cmp	r3, r0
 8007362:	d004      	beq.n	800736e <__swbuf_r+0x62>
 8007364:	89a3      	ldrh	r3, [r4, #12]
 8007366:	07db      	lsls	r3, r3, #31
 8007368:	d506      	bpl.n	8007378 <__swbuf_r+0x6c>
 800736a:	2e0a      	cmp	r6, #10
 800736c:	d104      	bne.n	8007378 <__swbuf_r+0x6c>
 800736e:	4621      	mov	r1, r4
 8007370:	4628      	mov	r0, r5
 8007372:	f000 f927 	bl	80075c4 <_fflush_r>
 8007376:	b988      	cbnz	r0, 800739c <__swbuf_r+0x90>
 8007378:	4638      	mov	r0, r7
 800737a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800737c:	4b0a      	ldr	r3, [pc, #40]	; (80073a8 <__swbuf_r+0x9c>)
 800737e:	429c      	cmp	r4, r3
 8007380:	d101      	bne.n	8007386 <__swbuf_r+0x7a>
 8007382:	68ac      	ldr	r4, [r5, #8]
 8007384:	e7cf      	b.n	8007326 <__swbuf_r+0x1a>
 8007386:	4b09      	ldr	r3, [pc, #36]	; (80073ac <__swbuf_r+0xa0>)
 8007388:	429c      	cmp	r4, r3
 800738a:	bf08      	it	eq
 800738c:	68ec      	ldreq	r4, [r5, #12]
 800738e:	e7ca      	b.n	8007326 <__swbuf_r+0x1a>
 8007390:	4621      	mov	r1, r4
 8007392:	4628      	mov	r0, r5
 8007394:	f000 f81a 	bl	80073cc <__swsetup_r>
 8007398:	2800      	cmp	r0, #0
 800739a:	d0cb      	beq.n	8007334 <__swbuf_r+0x28>
 800739c:	f04f 37ff 	mov.w	r7, #4294967295
 80073a0:	e7ea      	b.n	8007378 <__swbuf_r+0x6c>
 80073a2:	bf00      	nop
 80073a4:	08007ec4 	.word	0x08007ec4
 80073a8:	08007ee4 	.word	0x08007ee4
 80073ac:	08007ea4 	.word	0x08007ea4

080073b0 <__ascii_wctomb>:
 80073b0:	b149      	cbz	r1, 80073c6 <__ascii_wctomb+0x16>
 80073b2:	2aff      	cmp	r2, #255	; 0xff
 80073b4:	bf85      	ittet	hi
 80073b6:	238a      	movhi	r3, #138	; 0x8a
 80073b8:	6003      	strhi	r3, [r0, #0]
 80073ba:	700a      	strbls	r2, [r1, #0]
 80073bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80073c0:	bf98      	it	ls
 80073c2:	2001      	movls	r0, #1
 80073c4:	4770      	bx	lr
 80073c6:	4608      	mov	r0, r1
 80073c8:	4770      	bx	lr
	...

080073cc <__swsetup_r>:
 80073cc:	4b32      	ldr	r3, [pc, #200]	; (8007498 <__swsetup_r+0xcc>)
 80073ce:	b570      	push	{r4, r5, r6, lr}
 80073d0:	681d      	ldr	r5, [r3, #0]
 80073d2:	4606      	mov	r6, r0
 80073d4:	460c      	mov	r4, r1
 80073d6:	b125      	cbz	r5, 80073e2 <__swsetup_r+0x16>
 80073d8:	69ab      	ldr	r3, [r5, #24]
 80073da:	b913      	cbnz	r3, 80073e2 <__swsetup_r+0x16>
 80073dc:	4628      	mov	r0, r5
 80073de:	f000 f985 	bl	80076ec <__sinit>
 80073e2:	4b2e      	ldr	r3, [pc, #184]	; (800749c <__swsetup_r+0xd0>)
 80073e4:	429c      	cmp	r4, r3
 80073e6:	d10f      	bne.n	8007408 <__swsetup_r+0x3c>
 80073e8:	686c      	ldr	r4, [r5, #4]
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f0:	0719      	lsls	r1, r3, #28
 80073f2:	d42c      	bmi.n	800744e <__swsetup_r+0x82>
 80073f4:	06dd      	lsls	r5, r3, #27
 80073f6:	d411      	bmi.n	800741c <__swsetup_r+0x50>
 80073f8:	2309      	movs	r3, #9
 80073fa:	6033      	str	r3, [r6, #0]
 80073fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007400:	81a3      	strh	r3, [r4, #12]
 8007402:	f04f 30ff 	mov.w	r0, #4294967295
 8007406:	e03e      	b.n	8007486 <__swsetup_r+0xba>
 8007408:	4b25      	ldr	r3, [pc, #148]	; (80074a0 <__swsetup_r+0xd4>)
 800740a:	429c      	cmp	r4, r3
 800740c:	d101      	bne.n	8007412 <__swsetup_r+0x46>
 800740e:	68ac      	ldr	r4, [r5, #8]
 8007410:	e7eb      	b.n	80073ea <__swsetup_r+0x1e>
 8007412:	4b24      	ldr	r3, [pc, #144]	; (80074a4 <__swsetup_r+0xd8>)
 8007414:	429c      	cmp	r4, r3
 8007416:	bf08      	it	eq
 8007418:	68ec      	ldreq	r4, [r5, #12]
 800741a:	e7e6      	b.n	80073ea <__swsetup_r+0x1e>
 800741c:	0758      	lsls	r0, r3, #29
 800741e:	d512      	bpl.n	8007446 <__swsetup_r+0x7a>
 8007420:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007422:	b141      	cbz	r1, 8007436 <__swsetup_r+0x6a>
 8007424:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007428:	4299      	cmp	r1, r3
 800742a:	d002      	beq.n	8007432 <__swsetup_r+0x66>
 800742c:	4630      	mov	r0, r6
 800742e:	f7ff fb6f 	bl	8006b10 <_free_r>
 8007432:	2300      	movs	r3, #0
 8007434:	6363      	str	r3, [r4, #52]	; 0x34
 8007436:	89a3      	ldrh	r3, [r4, #12]
 8007438:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800743c:	81a3      	strh	r3, [r4, #12]
 800743e:	2300      	movs	r3, #0
 8007440:	6063      	str	r3, [r4, #4]
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	6023      	str	r3, [r4, #0]
 8007446:	89a3      	ldrh	r3, [r4, #12]
 8007448:	f043 0308 	orr.w	r3, r3, #8
 800744c:	81a3      	strh	r3, [r4, #12]
 800744e:	6923      	ldr	r3, [r4, #16]
 8007450:	b94b      	cbnz	r3, 8007466 <__swsetup_r+0x9a>
 8007452:	89a3      	ldrh	r3, [r4, #12]
 8007454:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800745c:	d003      	beq.n	8007466 <__swsetup_r+0x9a>
 800745e:	4621      	mov	r1, r4
 8007460:	4630      	mov	r0, r6
 8007462:	f000 fa07 	bl	8007874 <__smakebuf_r>
 8007466:	89a0      	ldrh	r0, [r4, #12]
 8007468:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800746c:	f010 0301 	ands.w	r3, r0, #1
 8007470:	d00a      	beq.n	8007488 <__swsetup_r+0xbc>
 8007472:	2300      	movs	r3, #0
 8007474:	60a3      	str	r3, [r4, #8]
 8007476:	6963      	ldr	r3, [r4, #20]
 8007478:	425b      	negs	r3, r3
 800747a:	61a3      	str	r3, [r4, #24]
 800747c:	6923      	ldr	r3, [r4, #16]
 800747e:	b943      	cbnz	r3, 8007492 <__swsetup_r+0xc6>
 8007480:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007484:	d1ba      	bne.n	80073fc <__swsetup_r+0x30>
 8007486:	bd70      	pop	{r4, r5, r6, pc}
 8007488:	0781      	lsls	r1, r0, #30
 800748a:	bf58      	it	pl
 800748c:	6963      	ldrpl	r3, [r4, #20]
 800748e:	60a3      	str	r3, [r4, #8]
 8007490:	e7f4      	b.n	800747c <__swsetup_r+0xb0>
 8007492:	2000      	movs	r0, #0
 8007494:	e7f7      	b.n	8007486 <__swsetup_r+0xba>
 8007496:	bf00      	nop
 8007498:	2000000c 	.word	0x2000000c
 800749c:	08007ec4 	.word	0x08007ec4
 80074a0:	08007ee4 	.word	0x08007ee4
 80074a4:	08007ea4 	.word	0x08007ea4

080074a8 <abort>:
 80074a8:	b508      	push	{r3, lr}
 80074aa:	2006      	movs	r0, #6
 80074ac:	f000 fa52 	bl	8007954 <raise>
 80074b0:	2001      	movs	r0, #1
 80074b2:	f7fa f98b 	bl	80017cc <_exit>
	...

080074b8 <__sflush_r>:
 80074b8:	898a      	ldrh	r2, [r1, #12]
 80074ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074be:	4605      	mov	r5, r0
 80074c0:	0710      	lsls	r0, r2, #28
 80074c2:	460c      	mov	r4, r1
 80074c4:	d458      	bmi.n	8007578 <__sflush_r+0xc0>
 80074c6:	684b      	ldr	r3, [r1, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	dc05      	bgt.n	80074d8 <__sflush_r+0x20>
 80074cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	dc02      	bgt.n	80074d8 <__sflush_r+0x20>
 80074d2:	2000      	movs	r0, #0
 80074d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074da:	2e00      	cmp	r6, #0
 80074dc:	d0f9      	beq.n	80074d2 <__sflush_r+0x1a>
 80074de:	2300      	movs	r3, #0
 80074e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074e4:	682f      	ldr	r7, [r5, #0]
 80074e6:	602b      	str	r3, [r5, #0]
 80074e8:	d032      	beq.n	8007550 <__sflush_r+0x98>
 80074ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	075a      	lsls	r2, r3, #29
 80074f0:	d505      	bpl.n	80074fe <__sflush_r+0x46>
 80074f2:	6863      	ldr	r3, [r4, #4]
 80074f4:	1ac0      	subs	r0, r0, r3
 80074f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074f8:	b10b      	cbz	r3, 80074fe <__sflush_r+0x46>
 80074fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074fc:	1ac0      	subs	r0, r0, r3
 80074fe:	2300      	movs	r3, #0
 8007500:	4602      	mov	r2, r0
 8007502:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007504:	6a21      	ldr	r1, [r4, #32]
 8007506:	4628      	mov	r0, r5
 8007508:	47b0      	blx	r6
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	d106      	bne.n	800751e <__sflush_r+0x66>
 8007510:	6829      	ldr	r1, [r5, #0]
 8007512:	291d      	cmp	r1, #29
 8007514:	d82c      	bhi.n	8007570 <__sflush_r+0xb8>
 8007516:	4a2a      	ldr	r2, [pc, #168]	; (80075c0 <__sflush_r+0x108>)
 8007518:	40ca      	lsrs	r2, r1
 800751a:	07d6      	lsls	r6, r2, #31
 800751c:	d528      	bpl.n	8007570 <__sflush_r+0xb8>
 800751e:	2200      	movs	r2, #0
 8007520:	6062      	str	r2, [r4, #4]
 8007522:	04d9      	lsls	r1, r3, #19
 8007524:	6922      	ldr	r2, [r4, #16]
 8007526:	6022      	str	r2, [r4, #0]
 8007528:	d504      	bpl.n	8007534 <__sflush_r+0x7c>
 800752a:	1c42      	adds	r2, r0, #1
 800752c:	d101      	bne.n	8007532 <__sflush_r+0x7a>
 800752e:	682b      	ldr	r3, [r5, #0]
 8007530:	b903      	cbnz	r3, 8007534 <__sflush_r+0x7c>
 8007532:	6560      	str	r0, [r4, #84]	; 0x54
 8007534:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007536:	602f      	str	r7, [r5, #0]
 8007538:	2900      	cmp	r1, #0
 800753a:	d0ca      	beq.n	80074d2 <__sflush_r+0x1a>
 800753c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007540:	4299      	cmp	r1, r3
 8007542:	d002      	beq.n	800754a <__sflush_r+0x92>
 8007544:	4628      	mov	r0, r5
 8007546:	f7ff fae3 	bl	8006b10 <_free_r>
 800754a:	2000      	movs	r0, #0
 800754c:	6360      	str	r0, [r4, #52]	; 0x34
 800754e:	e7c1      	b.n	80074d4 <__sflush_r+0x1c>
 8007550:	6a21      	ldr	r1, [r4, #32]
 8007552:	2301      	movs	r3, #1
 8007554:	4628      	mov	r0, r5
 8007556:	47b0      	blx	r6
 8007558:	1c41      	adds	r1, r0, #1
 800755a:	d1c7      	bne.n	80074ec <__sflush_r+0x34>
 800755c:	682b      	ldr	r3, [r5, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0c4      	beq.n	80074ec <__sflush_r+0x34>
 8007562:	2b1d      	cmp	r3, #29
 8007564:	d001      	beq.n	800756a <__sflush_r+0xb2>
 8007566:	2b16      	cmp	r3, #22
 8007568:	d101      	bne.n	800756e <__sflush_r+0xb6>
 800756a:	602f      	str	r7, [r5, #0]
 800756c:	e7b1      	b.n	80074d2 <__sflush_r+0x1a>
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	e7ad      	b.n	80074d4 <__sflush_r+0x1c>
 8007578:	690f      	ldr	r7, [r1, #16]
 800757a:	2f00      	cmp	r7, #0
 800757c:	d0a9      	beq.n	80074d2 <__sflush_r+0x1a>
 800757e:	0793      	lsls	r3, r2, #30
 8007580:	680e      	ldr	r6, [r1, #0]
 8007582:	bf08      	it	eq
 8007584:	694b      	ldreq	r3, [r1, #20]
 8007586:	600f      	str	r7, [r1, #0]
 8007588:	bf18      	it	ne
 800758a:	2300      	movne	r3, #0
 800758c:	eba6 0807 	sub.w	r8, r6, r7
 8007590:	608b      	str	r3, [r1, #8]
 8007592:	f1b8 0f00 	cmp.w	r8, #0
 8007596:	dd9c      	ble.n	80074d2 <__sflush_r+0x1a>
 8007598:	6a21      	ldr	r1, [r4, #32]
 800759a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800759c:	4643      	mov	r3, r8
 800759e:	463a      	mov	r2, r7
 80075a0:	4628      	mov	r0, r5
 80075a2:	47b0      	blx	r6
 80075a4:	2800      	cmp	r0, #0
 80075a6:	dc06      	bgt.n	80075b6 <__sflush_r+0xfe>
 80075a8:	89a3      	ldrh	r3, [r4, #12]
 80075aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075ae:	81a3      	strh	r3, [r4, #12]
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295
 80075b4:	e78e      	b.n	80074d4 <__sflush_r+0x1c>
 80075b6:	4407      	add	r7, r0
 80075b8:	eba8 0800 	sub.w	r8, r8, r0
 80075bc:	e7e9      	b.n	8007592 <__sflush_r+0xda>
 80075be:	bf00      	nop
 80075c0:	20400001 	.word	0x20400001

080075c4 <_fflush_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	690b      	ldr	r3, [r1, #16]
 80075c8:	4605      	mov	r5, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	b913      	cbnz	r3, 80075d4 <_fflush_r+0x10>
 80075ce:	2500      	movs	r5, #0
 80075d0:	4628      	mov	r0, r5
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	b118      	cbz	r0, 80075de <_fflush_r+0x1a>
 80075d6:	6983      	ldr	r3, [r0, #24]
 80075d8:	b90b      	cbnz	r3, 80075de <_fflush_r+0x1a>
 80075da:	f000 f887 	bl	80076ec <__sinit>
 80075de:	4b14      	ldr	r3, [pc, #80]	; (8007630 <_fflush_r+0x6c>)
 80075e0:	429c      	cmp	r4, r3
 80075e2:	d11b      	bne.n	800761c <_fflush_r+0x58>
 80075e4:	686c      	ldr	r4, [r5, #4]
 80075e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d0ef      	beq.n	80075ce <_fflush_r+0xa>
 80075ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075f0:	07d0      	lsls	r0, r2, #31
 80075f2:	d404      	bmi.n	80075fe <_fflush_r+0x3a>
 80075f4:	0599      	lsls	r1, r3, #22
 80075f6:	d402      	bmi.n	80075fe <_fflush_r+0x3a>
 80075f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075fa:	f000 f915 	bl	8007828 <__retarget_lock_acquire_recursive>
 80075fe:	4628      	mov	r0, r5
 8007600:	4621      	mov	r1, r4
 8007602:	f7ff ff59 	bl	80074b8 <__sflush_r>
 8007606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007608:	07da      	lsls	r2, r3, #31
 800760a:	4605      	mov	r5, r0
 800760c:	d4e0      	bmi.n	80075d0 <_fflush_r+0xc>
 800760e:	89a3      	ldrh	r3, [r4, #12]
 8007610:	059b      	lsls	r3, r3, #22
 8007612:	d4dd      	bmi.n	80075d0 <_fflush_r+0xc>
 8007614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007616:	f000 f908 	bl	800782a <__retarget_lock_release_recursive>
 800761a:	e7d9      	b.n	80075d0 <_fflush_r+0xc>
 800761c:	4b05      	ldr	r3, [pc, #20]	; (8007634 <_fflush_r+0x70>)
 800761e:	429c      	cmp	r4, r3
 8007620:	d101      	bne.n	8007626 <_fflush_r+0x62>
 8007622:	68ac      	ldr	r4, [r5, #8]
 8007624:	e7df      	b.n	80075e6 <_fflush_r+0x22>
 8007626:	4b04      	ldr	r3, [pc, #16]	; (8007638 <_fflush_r+0x74>)
 8007628:	429c      	cmp	r4, r3
 800762a:	bf08      	it	eq
 800762c:	68ec      	ldreq	r4, [r5, #12]
 800762e:	e7da      	b.n	80075e6 <_fflush_r+0x22>
 8007630:	08007ec4 	.word	0x08007ec4
 8007634:	08007ee4 	.word	0x08007ee4
 8007638:	08007ea4 	.word	0x08007ea4

0800763c <std>:
 800763c:	2300      	movs	r3, #0
 800763e:	b510      	push	{r4, lr}
 8007640:	4604      	mov	r4, r0
 8007642:	e9c0 3300 	strd	r3, r3, [r0]
 8007646:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800764a:	6083      	str	r3, [r0, #8]
 800764c:	8181      	strh	r1, [r0, #12]
 800764e:	6643      	str	r3, [r0, #100]	; 0x64
 8007650:	81c2      	strh	r2, [r0, #14]
 8007652:	6183      	str	r3, [r0, #24]
 8007654:	4619      	mov	r1, r3
 8007656:	2208      	movs	r2, #8
 8007658:	305c      	adds	r0, #92	; 0x5c
 800765a:	f7fd fba5 	bl	8004da8 <memset>
 800765e:	4b05      	ldr	r3, [pc, #20]	; (8007674 <std+0x38>)
 8007660:	6263      	str	r3, [r4, #36]	; 0x24
 8007662:	4b05      	ldr	r3, [pc, #20]	; (8007678 <std+0x3c>)
 8007664:	62a3      	str	r3, [r4, #40]	; 0x28
 8007666:	4b05      	ldr	r3, [pc, #20]	; (800767c <std+0x40>)
 8007668:	62e3      	str	r3, [r4, #44]	; 0x2c
 800766a:	4b05      	ldr	r3, [pc, #20]	; (8007680 <std+0x44>)
 800766c:	6224      	str	r4, [r4, #32]
 800766e:	6323      	str	r3, [r4, #48]	; 0x30
 8007670:	bd10      	pop	{r4, pc}
 8007672:	bf00      	nop
 8007674:	0800798d 	.word	0x0800798d
 8007678:	080079af 	.word	0x080079af
 800767c:	080079e7 	.word	0x080079e7
 8007680:	08007a0b 	.word	0x08007a0b

08007684 <_cleanup_r>:
 8007684:	4901      	ldr	r1, [pc, #4]	; (800768c <_cleanup_r+0x8>)
 8007686:	f000 b8af 	b.w	80077e8 <_fwalk_reent>
 800768a:	bf00      	nop
 800768c:	080075c5 	.word	0x080075c5

08007690 <__sfmoreglue>:
 8007690:	b570      	push	{r4, r5, r6, lr}
 8007692:	1e4a      	subs	r2, r1, #1
 8007694:	2568      	movs	r5, #104	; 0x68
 8007696:	4355      	muls	r5, r2
 8007698:	460e      	mov	r6, r1
 800769a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800769e:	f7ff fa87 	bl	8006bb0 <_malloc_r>
 80076a2:	4604      	mov	r4, r0
 80076a4:	b140      	cbz	r0, 80076b8 <__sfmoreglue+0x28>
 80076a6:	2100      	movs	r1, #0
 80076a8:	e9c0 1600 	strd	r1, r6, [r0]
 80076ac:	300c      	adds	r0, #12
 80076ae:	60a0      	str	r0, [r4, #8]
 80076b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076b4:	f7fd fb78 	bl	8004da8 <memset>
 80076b8:	4620      	mov	r0, r4
 80076ba:	bd70      	pop	{r4, r5, r6, pc}

080076bc <__sfp_lock_acquire>:
 80076bc:	4801      	ldr	r0, [pc, #4]	; (80076c4 <__sfp_lock_acquire+0x8>)
 80076be:	f000 b8b3 	b.w	8007828 <__retarget_lock_acquire_recursive>
 80076c2:	bf00      	nop
 80076c4:	200006f0 	.word	0x200006f0

080076c8 <__sfp_lock_release>:
 80076c8:	4801      	ldr	r0, [pc, #4]	; (80076d0 <__sfp_lock_release+0x8>)
 80076ca:	f000 b8ae 	b.w	800782a <__retarget_lock_release_recursive>
 80076ce:	bf00      	nop
 80076d0:	200006f0 	.word	0x200006f0

080076d4 <__sinit_lock_acquire>:
 80076d4:	4801      	ldr	r0, [pc, #4]	; (80076dc <__sinit_lock_acquire+0x8>)
 80076d6:	f000 b8a7 	b.w	8007828 <__retarget_lock_acquire_recursive>
 80076da:	bf00      	nop
 80076dc:	200006eb 	.word	0x200006eb

080076e0 <__sinit_lock_release>:
 80076e0:	4801      	ldr	r0, [pc, #4]	; (80076e8 <__sinit_lock_release+0x8>)
 80076e2:	f000 b8a2 	b.w	800782a <__retarget_lock_release_recursive>
 80076e6:	bf00      	nop
 80076e8:	200006eb 	.word	0x200006eb

080076ec <__sinit>:
 80076ec:	b510      	push	{r4, lr}
 80076ee:	4604      	mov	r4, r0
 80076f0:	f7ff fff0 	bl	80076d4 <__sinit_lock_acquire>
 80076f4:	69a3      	ldr	r3, [r4, #24]
 80076f6:	b11b      	cbz	r3, 8007700 <__sinit+0x14>
 80076f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076fc:	f7ff bff0 	b.w	80076e0 <__sinit_lock_release>
 8007700:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007704:	6523      	str	r3, [r4, #80]	; 0x50
 8007706:	4b13      	ldr	r3, [pc, #76]	; (8007754 <__sinit+0x68>)
 8007708:	4a13      	ldr	r2, [pc, #76]	; (8007758 <__sinit+0x6c>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	62a2      	str	r2, [r4, #40]	; 0x28
 800770e:	42a3      	cmp	r3, r4
 8007710:	bf04      	itt	eq
 8007712:	2301      	moveq	r3, #1
 8007714:	61a3      	streq	r3, [r4, #24]
 8007716:	4620      	mov	r0, r4
 8007718:	f000 f820 	bl	800775c <__sfp>
 800771c:	6060      	str	r0, [r4, #4]
 800771e:	4620      	mov	r0, r4
 8007720:	f000 f81c 	bl	800775c <__sfp>
 8007724:	60a0      	str	r0, [r4, #8]
 8007726:	4620      	mov	r0, r4
 8007728:	f000 f818 	bl	800775c <__sfp>
 800772c:	2200      	movs	r2, #0
 800772e:	60e0      	str	r0, [r4, #12]
 8007730:	2104      	movs	r1, #4
 8007732:	6860      	ldr	r0, [r4, #4]
 8007734:	f7ff ff82 	bl	800763c <std>
 8007738:	68a0      	ldr	r0, [r4, #8]
 800773a:	2201      	movs	r2, #1
 800773c:	2109      	movs	r1, #9
 800773e:	f7ff ff7d 	bl	800763c <std>
 8007742:	68e0      	ldr	r0, [r4, #12]
 8007744:	2202      	movs	r2, #2
 8007746:	2112      	movs	r1, #18
 8007748:	f7ff ff78 	bl	800763c <std>
 800774c:	2301      	movs	r3, #1
 800774e:	61a3      	str	r3, [r4, #24]
 8007750:	e7d2      	b.n	80076f8 <__sinit+0xc>
 8007752:	bf00      	nop
 8007754:	08007b24 	.word	0x08007b24
 8007758:	08007685 	.word	0x08007685

0800775c <__sfp>:
 800775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775e:	4607      	mov	r7, r0
 8007760:	f7ff ffac 	bl	80076bc <__sfp_lock_acquire>
 8007764:	4b1e      	ldr	r3, [pc, #120]	; (80077e0 <__sfp+0x84>)
 8007766:	681e      	ldr	r6, [r3, #0]
 8007768:	69b3      	ldr	r3, [r6, #24]
 800776a:	b913      	cbnz	r3, 8007772 <__sfp+0x16>
 800776c:	4630      	mov	r0, r6
 800776e:	f7ff ffbd 	bl	80076ec <__sinit>
 8007772:	3648      	adds	r6, #72	; 0x48
 8007774:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007778:	3b01      	subs	r3, #1
 800777a:	d503      	bpl.n	8007784 <__sfp+0x28>
 800777c:	6833      	ldr	r3, [r6, #0]
 800777e:	b30b      	cbz	r3, 80077c4 <__sfp+0x68>
 8007780:	6836      	ldr	r6, [r6, #0]
 8007782:	e7f7      	b.n	8007774 <__sfp+0x18>
 8007784:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007788:	b9d5      	cbnz	r5, 80077c0 <__sfp+0x64>
 800778a:	4b16      	ldr	r3, [pc, #88]	; (80077e4 <__sfp+0x88>)
 800778c:	60e3      	str	r3, [r4, #12]
 800778e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007792:	6665      	str	r5, [r4, #100]	; 0x64
 8007794:	f000 f847 	bl	8007826 <__retarget_lock_init_recursive>
 8007798:	f7ff ff96 	bl	80076c8 <__sfp_lock_release>
 800779c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80077a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80077a4:	6025      	str	r5, [r4, #0]
 80077a6:	61a5      	str	r5, [r4, #24]
 80077a8:	2208      	movs	r2, #8
 80077aa:	4629      	mov	r1, r5
 80077ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80077b0:	f7fd fafa 	bl	8004da8 <memset>
 80077b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077bc:	4620      	mov	r0, r4
 80077be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c0:	3468      	adds	r4, #104	; 0x68
 80077c2:	e7d9      	b.n	8007778 <__sfp+0x1c>
 80077c4:	2104      	movs	r1, #4
 80077c6:	4638      	mov	r0, r7
 80077c8:	f7ff ff62 	bl	8007690 <__sfmoreglue>
 80077cc:	4604      	mov	r4, r0
 80077ce:	6030      	str	r0, [r6, #0]
 80077d0:	2800      	cmp	r0, #0
 80077d2:	d1d5      	bne.n	8007780 <__sfp+0x24>
 80077d4:	f7ff ff78 	bl	80076c8 <__sfp_lock_release>
 80077d8:	230c      	movs	r3, #12
 80077da:	603b      	str	r3, [r7, #0]
 80077dc:	e7ee      	b.n	80077bc <__sfp+0x60>
 80077de:	bf00      	nop
 80077e0:	08007b24 	.word	0x08007b24
 80077e4:	ffff0001 	.word	0xffff0001

080077e8 <_fwalk_reent>:
 80077e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077ec:	4606      	mov	r6, r0
 80077ee:	4688      	mov	r8, r1
 80077f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077f4:	2700      	movs	r7, #0
 80077f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077fa:	f1b9 0901 	subs.w	r9, r9, #1
 80077fe:	d505      	bpl.n	800780c <_fwalk_reent+0x24>
 8007800:	6824      	ldr	r4, [r4, #0]
 8007802:	2c00      	cmp	r4, #0
 8007804:	d1f7      	bne.n	80077f6 <_fwalk_reent+0xe>
 8007806:	4638      	mov	r0, r7
 8007808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800780c:	89ab      	ldrh	r3, [r5, #12]
 800780e:	2b01      	cmp	r3, #1
 8007810:	d907      	bls.n	8007822 <_fwalk_reent+0x3a>
 8007812:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007816:	3301      	adds	r3, #1
 8007818:	d003      	beq.n	8007822 <_fwalk_reent+0x3a>
 800781a:	4629      	mov	r1, r5
 800781c:	4630      	mov	r0, r6
 800781e:	47c0      	blx	r8
 8007820:	4307      	orrs	r7, r0
 8007822:	3568      	adds	r5, #104	; 0x68
 8007824:	e7e9      	b.n	80077fa <_fwalk_reent+0x12>

08007826 <__retarget_lock_init_recursive>:
 8007826:	4770      	bx	lr

08007828 <__retarget_lock_acquire_recursive>:
 8007828:	4770      	bx	lr

0800782a <__retarget_lock_release_recursive>:
 800782a:	4770      	bx	lr

0800782c <__swhatbuf_r>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	460e      	mov	r6, r1
 8007830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007834:	2900      	cmp	r1, #0
 8007836:	b096      	sub	sp, #88	; 0x58
 8007838:	4614      	mov	r4, r2
 800783a:	461d      	mov	r5, r3
 800783c:	da07      	bge.n	800784e <__swhatbuf_r+0x22>
 800783e:	2300      	movs	r3, #0
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	89b3      	ldrh	r3, [r6, #12]
 8007844:	061a      	lsls	r2, r3, #24
 8007846:	d410      	bmi.n	800786a <__swhatbuf_r+0x3e>
 8007848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800784c:	e00e      	b.n	800786c <__swhatbuf_r+0x40>
 800784e:	466a      	mov	r2, sp
 8007850:	f000 f902 	bl	8007a58 <_fstat_r>
 8007854:	2800      	cmp	r0, #0
 8007856:	dbf2      	blt.n	800783e <__swhatbuf_r+0x12>
 8007858:	9a01      	ldr	r2, [sp, #4]
 800785a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800785e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007862:	425a      	negs	r2, r3
 8007864:	415a      	adcs	r2, r3
 8007866:	602a      	str	r2, [r5, #0]
 8007868:	e7ee      	b.n	8007848 <__swhatbuf_r+0x1c>
 800786a:	2340      	movs	r3, #64	; 0x40
 800786c:	2000      	movs	r0, #0
 800786e:	6023      	str	r3, [r4, #0]
 8007870:	b016      	add	sp, #88	; 0x58
 8007872:	bd70      	pop	{r4, r5, r6, pc}

08007874 <__smakebuf_r>:
 8007874:	898b      	ldrh	r3, [r1, #12]
 8007876:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007878:	079d      	lsls	r5, r3, #30
 800787a:	4606      	mov	r6, r0
 800787c:	460c      	mov	r4, r1
 800787e:	d507      	bpl.n	8007890 <__smakebuf_r+0x1c>
 8007880:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007884:	6023      	str	r3, [r4, #0]
 8007886:	6123      	str	r3, [r4, #16]
 8007888:	2301      	movs	r3, #1
 800788a:	6163      	str	r3, [r4, #20]
 800788c:	b002      	add	sp, #8
 800788e:	bd70      	pop	{r4, r5, r6, pc}
 8007890:	ab01      	add	r3, sp, #4
 8007892:	466a      	mov	r2, sp
 8007894:	f7ff ffca 	bl	800782c <__swhatbuf_r>
 8007898:	9900      	ldr	r1, [sp, #0]
 800789a:	4605      	mov	r5, r0
 800789c:	4630      	mov	r0, r6
 800789e:	f7ff f987 	bl	8006bb0 <_malloc_r>
 80078a2:	b948      	cbnz	r0, 80078b8 <__smakebuf_r+0x44>
 80078a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a8:	059a      	lsls	r2, r3, #22
 80078aa:	d4ef      	bmi.n	800788c <__smakebuf_r+0x18>
 80078ac:	f023 0303 	bic.w	r3, r3, #3
 80078b0:	f043 0302 	orr.w	r3, r3, #2
 80078b4:	81a3      	strh	r3, [r4, #12]
 80078b6:	e7e3      	b.n	8007880 <__smakebuf_r+0xc>
 80078b8:	4b0d      	ldr	r3, [pc, #52]	; (80078f0 <__smakebuf_r+0x7c>)
 80078ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	6020      	str	r0, [r4, #0]
 80078c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078c4:	81a3      	strh	r3, [r4, #12]
 80078c6:	9b00      	ldr	r3, [sp, #0]
 80078c8:	6163      	str	r3, [r4, #20]
 80078ca:	9b01      	ldr	r3, [sp, #4]
 80078cc:	6120      	str	r0, [r4, #16]
 80078ce:	b15b      	cbz	r3, 80078e8 <__smakebuf_r+0x74>
 80078d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078d4:	4630      	mov	r0, r6
 80078d6:	f000 f8d1 	bl	8007a7c <_isatty_r>
 80078da:	b128      	cbz	r0, 80078e8 <__smakebuf_r+0x74>
 80078dc:	89a3      	ldrh	r3, [r4, #12]
 80078de:	f023 0303 	bic.w	r3, r3, #3
 80078e2:	f043 0301 	orr.w	r3, r3, #1
 80078e6:	81a3      	strh	r3, [r4, #12]
 80078e8:	89a0      	ldrh	r0, [r4, #12]
 80078ea:	4305      	orrs	r5, r0
 80078ec:	81a5      	strh	r5, [r4, #12]
 80078ee:	e7cd      	b.n	800788c <__smakebuf_r+0x18>
 80078f0:	08007685 	.word	0x08007685

080078f4 <_malloc_usable_size_r>:
 80078f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078f8:	1f18      	subs	r0, r3, #4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	bfbc      	itt	lt
 80078fe:	580b      	ldrlt	r3, [r1, r0]
 8007900:	18c0      	addlt	r0, r0, r3
 8007902:	4770      	bx	lr

08007904 <_raise_r>:
 8007904:	291f      	cmp	r1, #31
 8007906:	b538      	push	{r3, r4, r5, lr}
 8007908:	4604      	mov	r4, r0
 800790a:	460d      	mov	r5, r1
 800790c:	d904      	bls.n	8007918 <_raise_r+0x14>
 800790e:	2316      	movs	r3, #22
 8007910:	6003      	str	r3, [r0, #0]
 8007912:	f04f 30ff 	mov.w	r0, #4294967295
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800791a:	b112      	cbz	r2, 8007922 <_raise_r+0x1e>
 800791c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007920:	b94b      	cbnz	r3, 8007936 <_raise_r+0x32>
 8007922:	4620      	mov	r0, r4
 8007924:	f000 f830 	bl	8007988 <_getpid_r>
 8007928:	462a      	mov	r2, r5
 800792a:	4601      	mov	r1, r0
 800792c:	4620      	mov	r0, r4
 800792e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007932:	f000 b817 	b.w	8007964 <_kill_r>
 8007936:	2b01      	cmp	r3, #1
 8007938:	d00a      	beq.n	8007950 <_raise_r+0x4c>
 800793a:	1c59      	adds	r1, r3, #1
 800793c:	d103      	bne.n	8007946 <_raise_r+0x42>
 800793e:	2316      	movs	r3, #22
 8007940:	6003      	str	r3, [r0, #0]
 8007942:	2001      	movs	r0, #1
 8007944:	e7e7      	b.n	8007916 <_raise_r+0x12>
 8007946:	2400      	movs	r4, #0
 8007948:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800794c:	4628      	mov	r0, r5
 800794e:	4798      	blx	r3
 8007950:	2000      	movs	r0, #0
 8007952:	e7e0      	b.n	8007916 <_raise_r+0x12>

08007954 <raise>:
 8007954:	4b02      	ldr	r3, [pc, #8]	; (8007960 <raise+0xc>)
 8007956:	4601      	mov	r1, r0
 8007958:	6818      	ldr	r0, [r3, #0]
 800795a:	f7ff bfd3 	b.w	8007904 <_raise_r>
 800795e:	bf00      	nop
 8007960:	2000000c 	.word	0x2000000c

08007964 <_kill_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d07      	ldr	r5, [pc, #28]	; (8007984 <_kill_r+0x20>)
 8007968:	2300      	movs	r3, #0
 800796a:	4604      	mov	r4, r0
 800796c:	4608      	mov	r0, r1
 800796e:	4611      	mov	r1, r2
 8007970:	602b      	str	r3, [r5, #0]
 8007972:	f7f9 ff1b 	bl	80017ac <_kill>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	d102      	bne.n	8007980 <_kill_r+0x1c>
 800797a:	682b      	ldr	r3, [r5, #0]
 800797c:	b103      	cbz	r3, 8007980 <_kill_r+0x1c>
 800797e:	6023      	str	r3, [r4, #0]
 8007980:	bd38      	pop	{r3, r4, r5, pc}
 8007982:	bf00      	nop
 8007984:	200006e4 	.word	0x200006e4

08007988 <_getpid_r>:
 8007988:	f7f9 bf08 	b.w	800179c <_getpid>

0800798c <__sread>:
 800798c:	b510      	push	{r4, lr}
 800798e:	460c      	mov	r4, r1
 8007990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007994:	f000 f894 	bl	8007ac0 <_read_r>
 8007998:	2800      	cmp	r0, #0
 800799a:	bfab      	itete	ge
 800799c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800799e:	89a3      	ldrhlt	r3, [r4, #12]
 80079a0:	181b      	addge	r3, r3, r0
 80079a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079a6:	bfac      	ite	ge
 80079a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80079aa:	81a3      	strhlt	r3, [r4, #12]
 80079ac:	bd10      	pop	{r4, pc}

080079ae <__swrite>:
 80079ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b2:	461f      	mov	r7, r3
 80079b4:	898b      	ldrh	r3, [r1, #12]
 80079b6:	05db      	lsls	r3, r3, #23
 80079b8:	4605      	mov	r5, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	4616      	mov	r6, r2
 80079be:	d505      	bpl.n	80079cc <__swrite+0x1e>
 80079c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c4:	2302      	movs	r3, #2
 80079c6:	2200      	movs	r2, #0
 80079c8:	f000 f868 	bl	8007a9c <_lseek_r>
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079d6:	81a3      	strh	r3, [r4, #12]
 80079d8:	4632      	mov	r2, r6
 80079da:	463b      	mov	r3, r7
 80079dc:	4628      	mov	r0, r5
 80079de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079e2:	f000 b817 	b.w	8007a14 <_write_r>

080079e6 <__sseek>:
 80079e6:	b510      	push	{r4, lr}
 80079e8:	460c      	mov	r4, r1
 80079ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ee:	f000 f855 	bl	8007a9c <_lseek_r>
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	bf15      	itete	ne
 80079f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80079fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a02:	81a3      	strheq	r3, [r4, #12]
 8007a04:	bf18      	it	ne
 8007a06:	81a3      	strhne	r3, [r4, #12]
 8007a08:	bd10      	pop	{r4, pc}

08007a0a <__sclose>:
 8007a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a0e:	f000 b813 	b.w	8007a38 <_close_r>
	...

08007a14 <_write_r>:
 8007a14:	b538      	push	{r3, r4, r5, lr}
 8007a16:	4d07      	ldr	r5, [pc, #28]	; (8007a34 <_write_r+0x20>)
 8007a18:	4604      	mov	r4, r0
 8007a1a:	4608      	mov	r0, r1
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	2200      	movs	r2, #0
 8007a20:	602a      	str	r2, [r5, #0]
 8007a22:	461a      	mov	r2, r3
 8007a24:	f7f9 fef9 	bl	800181a <_write>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_write_r+0x1e>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_write_r+0x1e>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	200006e4 	.word	0x200006e4

08007a38 <_close_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4d06      	ldr	r5, [pc, #24]	; (8007a54 <_close_r+0x1c>)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	602b      	str	r3, [r5, #0]
 8007a44:	f7f9 ff05 	bl	8001852 <_close>
 8007a48:	1c43      	adds	r3, r0, #1
 8007a4a:	d102      	bne.n	8007a52 <_close_r+0x1a>
 8007a4c:	682b      	ldr	r3, [r5, #0]
 8007a4e:	b103      	cbz	r3, 8007a52 <_close_r+0x1a>
 8007a50:	6023      	str	r3, [r4, #0]
 8007a52:	bd38      	pop	{r3, r4, r5, pc}
 8007a54:	200006e4 	.word	0x200006e4

08007a58 <_fstat_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4d07      	ldr	r5, [pc, #28]	; (8007a78 <_fstat_r+0x20>)
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	4604      	mov	r4, r0
 8007a60:	4608      	mov	r0, r1
 8007a62:	4611      	mov	r1, r2
 8007a64:	602b      	str	r3, [r5, #0]
 8007a66:	f7f9 ff00 	bl	800186a <_fstat>
 8007a6a:	1c43      	adds	r3, r0, #1
 8007a6c:	d102      	bne.n	8007a74 <_fstat_r+0x1c>
 8007a6e:	682b      	ldr	r3, [r5, #0]
 8007a70:	b103      	cbz	r3, 8007a74 <_fstat_r+0x1c>
 8007a72:	6023      	str	r3, [r4, #0]
 8007a74:	bd38      	pop	{r3, r4, r5, pc}
 8007a76:	bf00      	nop
 8007a78:	200006e4 	.word	0x200006e4

08007a7c <_isatty_r>:
 8007a7c:	b538      	push	{r3, r4, r5, lr}
 8007a7e:	4d06      	ldr	r5, [pc, #24]	; (8007a98 <_isatty_r+0x1c>)
 8007a80:	2300      	movs	r3, #0
 8007a82:	4604      	mov	r4, r0
 8007a84:	4608      	mov	r0, r1
 8007a86:	602b      	str	r3, [r5, #0]
 8007a88:	f7f9 feff 	bl	800188a <_isatty>
 8007a8c:	1c43      	adds	r3, r0, #1
 8007a8e:	d102      	bne.n	8007a96 <_isatty_r+0x1a>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	b103      	cbz	r3, 8007a96 <_isatty_r+0x1a>
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	bd38      	pop	{r3, r4, r5, pc}
 8007a98:	200006e4 	.word	0x200006e4

08007a9c <_lseek_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4d07      	ldr	r5, [pc, #28]	; (8007abc <_lseek_r+0x20>)
 8007aa0:	4604      	mov	r4, r0
 8007aa2:	4608      	mov	r0, r1
 8007aa4:	4611      	mov	r1, r2
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	602a      	str	r2, [r5, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f7f9 fef8 	bl	80018a0 <_lseek>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_lseek_r+0x1e>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_lseek_r+0x1e>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	200006e4 	.word	0x200006e4

08007ac0 <_read_r>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4d07      	ldr	r5, [pc, #28]	; (8007ae0 <_read_r+0x20>)
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	4608      	mov	r0, r1
 8007ac8:	4611      	mov	r1, r2
 8007aca:	2200      	movs	r2, #0
 8007acc:	602a      	str	r2, [r5, #0]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f7f9 fe86 	bl	80017e0 <_read>
 8007ad4:	1c43      	adds	r3, r0, #1
 8007ad6:	d102      	bne.n	8007ade <_read_r+0x1e>
 8007ad8:	682b      	ldr	r3, [r5, #0]
 8007ada:	b103      	cbz	r3, 8007ade <_read_r+0x1e>
 8007adc:	6023      	str	r3, [r4, #0]
 8007ade:	bd38      	pop	{r3, r4, r5, pc}
 8007ae0:	200006e4 	.word	0x200006e4

08007ae4 <_init>:
 8007ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae6:	bf00      	nop
 8007ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aea:	bc08      	pop	{r3}
 8007aec:	469e      	mov	lr, r3
 8007aee:	4770      	bx	lr

08007af0 <_fini>:
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	bf00      	nop
 8007af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af6:	bc08      	pop	{r3}
 8007af8:	469e      	mov	lr, r3
 8007afa:	4770      	bx	lr
