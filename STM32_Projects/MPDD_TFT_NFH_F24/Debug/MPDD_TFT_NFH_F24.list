
MPDD_TFT_NFH_F24.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b84  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007bc  08003d54  08003d54  00004d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004510  08004510  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004510  08004510  00005510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004518  08004518  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004518  08004518  00005518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800451c  0800451c  0000551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004520  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a234  20000068  08004588  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000a29c  08004588  0000629c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087ac  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c12  00000000  00000000  0000e844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  00010458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000252f6  00000000  00000000  00010c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000a459  00000000  00000000  00035f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000e3e4b  00000000  00000000  000403cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0012421a  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000600  00000000  00000000  0012425d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002484  00000000  00000000  00124860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00126ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003d3c 	.word	0x08003d3c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003d3c 	.word	0x08003d3c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ILI9163_writeCommand>:
uint16_t frameBuffer[BUFSIZE] = {0};

extern SPI_HandleTypeDef DISP_SPI;
extern uint8_t SPI_DMA_FL;

void ILI9163_writeCommand(uint8_t address) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80005aa:	2200      	movs	r2, #0
 80005ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005b0:	480c      	ldr	r0, [pc, #48]	@ (80005e4 <ILI9163_writeCommand+0x44>)
 80005b2:	f001 fcdb 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80005bc:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <ILI9163_writeCommand+0x44>)
 80005be:	f001 fcd5 	bl	8001f6c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &address, 1, 0);
 80005c2:	1df9      	adds	r1, r7, #7
 80005c4:	2300      	movs	r3, #0
 80005c6:	2201      	movs	r2, #1
 80005c8:	4807      	ldr	r0, [pc, #28]	@ (80005e8 <ILI9163_writeCommand+0x48>)
 80005ca:	f002 fa3a 	bl	8002a42 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 80005ce:	2201      	movs	r2, #1
 80005d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005d4:	4803      	ldr	r0, [pc, #12]	@ (80005e4 <ILI9163_writeCommand+0x44>)
 80005d6:	f001 fcc9 	bl	8001f6c <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40020400 	.word	0x40020400
 80005e8:	2000a084 	.word	0x2000a084

080005ec <ILI9163_writeData>:

void ILI9163_writeData(uint8_t data) {
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005fc:	480c      	ldr	r0, [pc, #48]	@ (8000630 <ILI9163_writeData+0x44>)
 80005fe:	f001 fcb5 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000608:	4809      	ldr	r0, [pc, #36]	@ (8000630 <ILI9163_writeData+0x44>)
 800060a:	f001 fcaf 	bl	8001f6c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&DISP_SPI, &data, 1, 0);
 800060e:	1df9      	adds	r1, r7, #7
 8000610:	2300      	movs	r3, #0
 8000612:	2201      	movs	r2, #1
 8000614:	4807      	ldr	r0, [pc, #28]	@ (8000634 <ILI9163_writeData+0x48>)
 8000616:	f002 fa14 	bl	8002a42 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 800061a:	2201      	movs	r2, #1
 800061c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000620:	4803      	ldr	r0, [pc, #12]	@ (8000630 <ILI9163_writeData+0x44>)
 8000622:	f001 fca3 	bl	8001f6c <HAL_GPIO_WritePin>
}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40020400 	.word	0x40020400
 8000634:	2000a084 	.word	0x2000a084

08000638 <ILI9163_writeData16>:

void ILI9163_writeData16(uint16_t word) {
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	4603      	mov	r3, r0
 8000640:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000648:	4810      	ldr	r0, [pc, #64]	@ (800068c <ILI9163_writeData16+0x54>)
 800064a:	f001 fc8f 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 800064e:	2201      	movs	r2, #1
 8000650:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000654:	480d      	ldr	r0, [pc, #52]	@ (800068c <ILI9163_writeData16+0x54>)
 8000656:	f001 fc89 	bl	8001f6c <HAL_GPIO_WritePin>

	uint8_t data [2] = {(word >> 8) & 0x00FF, word & 0x00FF};
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	0a1b      	lsrs	r3, r3, #8
 800065e:	b29b      	uxth	r3, r3
 8000660:	b2db      	uxtb	r3, r3
 8000662:	733b      	strb	r3, [r7, #12]
 8000664:	88fb      	ldrh	r3, [r7, #6]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&DISP_SPI, data, 2, 0);
 800066a:	f107 010c 	add.w	r1, r7, #12
 800066e:	2300      	movs	r3, #0
 8000670:	2202      	movs	r2, #2
 8000672:	4807      	ldr	r0, [pc, #28]	@ (8000690 <ILI9163_writeData16+0x58>)
 8000674:	f002 f9e5 	bl	8002a42 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000678:	2201      	movs	r2, #1
 800067a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800067e:	4803      	ldr	r0, [pc, #12]	@ (800068c <ILI9163_writeData16+0x54>)
 8000680:	f001 fc74 	bl	8001f6c <HAL_GPIO_WritePin>
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40020400 	.word	0x40020400
 8000690:	2000a084 	.word	0x2000a084

08000694 <ILI9163_setAddress>:

void ILI9163_setAddress(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2) {
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4604      	mov	r4, r0
 800069c:	4608      	mov	r0, r1
 800069e:	4611      	mov	r1, r2
 80006a0:	461a      	mov	r2, r3
 80006a2:	4623      	mov	r3, r4
 80006a4:	80fb      	strh	r3, [r7, #6]
 80006a6:	4603      	mov	r3, r0
 80006a8:	80bb      	strh	r3, [r7, #4]
 80006aa:	460b      	mov	r3, r1
 80006ac:	807b      	strh	r3, [r7, #2]
 80006ae:	4613      	mov	r3, r2
 80006b0:	803b      	strh	r3, [r7, #0]
	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 80006b2:	202a      	movs	r0, #42	@ 0x2a
 80006b4:	f7ff ff74 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeData16(x1);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffbc 	bl	8000638 <ILI9163_writeData16>
	ILI9163_writeData16(x2);
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ffb8 	bl	8000638 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 80006c8:	202b      	movs	r0, #43	@ 0x2b
 80006ca:	f7ff ff69 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeData16(y1);
 80006ce:	88bb      	ldrh	r3, [r7, #4]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ffb1 	bl	8000638 <ILI9163_writeData16>
	ILI9163_writeData16(y2);
 80006d6:	883b      	ldrh	r3, [r7, #0]
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ffad 	bl	8000638 <ILI9163_writeData16>

	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80006de:	202c      	movs	r0, #44	@ 0x2c
 80006e0:	f7ff ff5e 	bl	80005a0 <ILI9163_writeCommand>
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd90      	pop	{r4, r7, pc}

080006ec <ILI9163_reset>:

void ILI9163_reset(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006f6:	4808      	ldr	r0, [pc, #32]	@ (8000718 <ILI9163_reset+0x2c>)
 80006f8:	f001 fc38 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80006fc:	2032      	movs	r0, #50	@ 0x32
 80006fe:	f000 fd6b 	bl	80011d8 <HAL_Delay>

	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000708:	4803      	ldr	r0, [pc, #12]	@ (8000718 <ILI9163_reset+0x2c>)
 800070a:	f001 fc2f 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800070e:	2064      	movs	r0, #100	@ 0x64
 8000710:	f000 fd62 	bl	80011d8 <HAL_Delay>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40020c00 	.word	0x40020c00

0800071c <ILI9163_init>:

void ILI9163_init(int rotation) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800072a:	486e      	ldr	r0, [pc, #440]	@ (80008e4 <ILI9163_init+0x1c8>)
 800072c:	f001 fc1e 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_RST_Port, DISP_RST_Pin, 1);
 8000730:	2201      	movs	r2, #1
 8000732:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000736:	486c      	ldr	r0, [pc, #432]	@ (80008e8 <ILI9163_init+0x1cc>)
 8000738:	f001 fc18 	bl	8001f6c <HAL_GPIO_WritePin>

	ILI9163_reset(); // Hardware reset the LCD
 800073c:	f7ff ffd6 	bl	80006ec <ILI9163_reset>

	ILI9163_writeCommand(ILI9163_CMD_EXIT_SLEEP_MODE);
 8000740:	2011      	movs	r0, #17
 8000742:	f7ff ff2d 	bl	80005a0 <ILI9163_writeCommand>
	HAL_Delay(5); // Wait for the screen to wake up
 8000746:	2005      	movs	r0, #5
 8000748:	f000 fd46 	bl	80011d8 <HAL_Delay>

	ILI9163_writeCommand(ILI9163_CMD_SET_PIXEL_FORMAT);
 800074c:	203a      	movs	r0, #58	@ 0x3a
 800074e:	f7ff ff27 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeData(0x05); // 16 bpp
 8000752:	2005      	movs	r0, #5
 8000754:	f7ff ff4a 	bl	80005ec <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_GAMMA_CURVE);
 8000758:	2026      	movs	r0, #38	@ 0x26
 800075a:	f7ff ff21 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeData(0x04); // Gamma curve 3
 800075e:	2004      	movs	r0, #4
 8000760:	f7ff ff44 	bl	80005ec <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_GAM_R_SEL);
 8000764:	20f2      	movs	r0, #242	@ 0xf2
 8000766:	f7ff ff1b 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeData(0x01); // Gamma curve enable
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff ff3e 	bl	80005ec <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_POSITIVE_GAMMA_CORRECT);
 8000770:	20e0      	movs	r0, #224	@ 0xe0
 8000772:	f7ff ff15 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeData(0x3f);
 8000776:	203f      	movs	r0, #63	@ 0x3f
 8000778:	f7ff ff38 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x25);
 800077c:	2025      	movs	r0, #37	@ 0x25
 800077e:	f7ff ff35 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x1c);
 8000782:	201c      	movs	r0, #28
 8000784:	f7ff ff32 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x1e);
 8000788:	201e      	movs	r0, #30
 800078a:	f7ff ff2f 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x20);
 800078e:	2020      	movs	r0, #32
 8000790:	f7ff ff2c 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x12);
 8000794:	2012      	movs	r0, #18
 8000796:	f7ff ff29 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 800079a:	202a      	movs	r0, #42	@ 0x2a
 800079c:	f7ff ff26 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x90);
 80007a0:	2090      	movs	r0, #144	@ 0x90
 80007a2:	f7ff ff23 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x24);
 80007a6:	2024      	movs	r0, #36	@ 0x24
 80007a8:	f7ff ff20 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x11);
 80007ac:	2011      	movs	r0, #17
 80007ae:	f7ff ff1d 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007b2:	2000      	movs	r0, #0
 80007b4:	f7ff ff1a 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007b8:	2000      	movs	r0, #0
 80007ba:	f7ff ff17 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff ff14 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff ff11 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007ca:	2000      	movs	r0, #0
 80007cc:	f7ff ff0e 	bl	80005ec <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_NEGATIVE_GAMMA_CORRECT);
 80007d0:	20e1      	movs	r0, #225	@ 0xe1
 80007d2:	f7ff fee5 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeData(0x20);
 80007d6:	2020      	movs	r0, #32
 80007d8:	f7ff ff08 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007dc:	2020      	movs	r0, #32
 80007de:	f7ff ff05 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007e2:	2020      	movs	r0, #32
 80007e4:	f7ff ff02 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x20);
 80007e8:	2020      	movs	r0, #32
 80007ea:	f7ff feff 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x05);
 80007ee:	2005      	movs	r0, #5
 80007f0:	f7ff fefc 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff fef9 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x15);
 80007fa:	2015      	movs	r0, #21
 80007fc:	f7ff fef6 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0xa7);
 8000800:	20a7      	movs	r0, #167	@ 0xa7
 8000802:	f7ff fef3 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x3d);
 8000806:	203d      	movs	r0, #61	@ 0x3d
 8000808:	f7ff fef0 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x18);
 800080c:	2018      	movs	r0, #24
 800080e:	f7ff feed 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x25);
 8000812:	2025      	movs	r0, #37	@ 0x25
 8000814:	f7ff feea 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x2a);
 8000818:	202a      	movs	r0, #42	@ 0x2a
 800081a:	f7ff fee7 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 800081e:	202b      	movs	r0, #43	@ 0x2b
 8000820:	f7ff fee4 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x2b);
 8000824:	202b      	movs	r0, #43	@ 0x2b
 8000826:	f7ff fee1 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x3a);
 800082a:	203a      	movs	r0, #58	@ 0x3a
 800082c:	f7ff fede 	bl	80005ec <ILI9163_writeData>


	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL1);
 8000830:	20b1      	movs	r0, #177	@ 0xb1
 8000832:	f7ff feb5 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000836:	2008      	movs	r0, #8
 8000838:	f7ff fed8 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800083c:	2002      	movs	r0, #2
 800083e:	f7ff fed5 	bl	80005ec <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL2);
 8000842:	20b2      	movs	r0, #178	@ 0xb2
 8000844:	f7ff feac 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 8000848:	2008      	movs	r0, #8
 800084a:	f7ff fecf 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 800084e:	2002      	movs	r0, #2
 8000850:	f7ff fecc 	bl	80005ec <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_FRAME_RATE_CONTROL3);
 8000854:	20b3      	movs	r0, #179	@ 0xb3
 8000856:	f7ff fea3 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeData(0x08); // DIVA = 8
 800085a:	2008      	movs	r0, #8
 800085c:	f7ff fec6 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x02); // VPA = 8
 8000860:	2002      	movs	r0, #2
 8000862:	f7ff fec3 	bl	80005ec <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_DISPLAY_INVERSION);
 8000866:	20b4      	movs	r0, #180	@ 0xb4
 8000868:	f7ff fe9a 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeData(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 800086c:	2007      	movs	r0, #7
 800086e:	f7ff febd 	bl	80005ec <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_VCOM_OFFSET_CONTROL);
	ILI9163_writeData(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
	*/

	ILI9163_writeCommand(ILI9163_CMD_SET_COLUMN_ADDRESS);
 8000872:	202a      	movs	r0, #42	@ 0x2a
 8000874:	f7ff fe94 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeData(0x00); // XSH
 8000878:	2000      	movs	r0, #0
 800087a:	f7ff feb7 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x00); // XSL
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff feb4 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x00); // XEH
 8000884:	2000      	movs	r0, #0
 8000886:	f7ff feb1 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(ILI9163_HEIGHT-1); // XEL (128 pixels x)
 800088a:	207f      	movs	r0, #127	@ 0x7f
 800088c:	f7ff feae 	bl	80005ec <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_PAGE_ADDRESS);
 8000890:	202b      	movs	r0, #43	@ 0x2b
 8000892:	f7ff fe85 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeData(0x00);
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fea8 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x00);
 800089c:	2000      	movs	r0, #0
 800089e:	f7ff fea5 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(0x00);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fea2 	bl	80005ec <ILI9163_writeData>
	ILI9163_writeData(ILI9163_WIDTH-1); // 160 pixels y
 80008a8:	209f      	movs	r0, #159	@ 0x9f
 80008aa:	f7ff fe9f 	bl	80005ec <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_SET_ADDRESS_MODE);
 80008ae:	2036      	movs	r0, #54	@ 0x36
 80008b0:	f7ff fe76 	bl	80005a0 <ILI9163_writeCommand>
	if(rotation)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d003      	beq.n	80008c2 <ILI9163_init+0x1a6>
		ILI9163_writeData(0x80 | 0x20 | 0x08);
 80008ba:	20a8      	movs	r0, #168	@ 0xa8
 80008bc:	f7ff fe96 	bl	80005ec <ILI9163_writeData>
 80008c0:	e002      	b.n	80008c8 <ILI9163_init+0x1ac>
	else
		ILI9163_writeData(0x40 | 0x20 | 0x08);
 80008c2:	2068      	movs	r0, #104	@ 0x68
 80008c4:	f7ff fe92 	bl	80005ec <ILI9163_writeData>

	ILI9163_writeCommand(ILI9163_CMD_ENTER_NORMAL_MODE);
 80008c8:	2013      	movs	r0, #19
 80008ca:	f7ff fe69 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_SET_DISPLAY_ON);
 80008ce:	2029      	movs	r0, #41	@ 0x29
 80008d0:	f7ff fe66 	bl	80005a0 <ILI9163_writeCommand>
	ILI9163_writeCommand(ILI9163_CMD_WRITE_MEMORY_START);
 80008d4:	202c      	movs	r0, #44	@ 0x2c
 80008d6:	f7ff fe63 	bl	80005a0 <ILI9163_writeCommand>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40020400 	.word	0x40020400
 80008e8:	40020c00 	.word	0x40020c00

080008ec <ILI9163_newFrame>:

void ILI9163_newFrame()
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	e008      	b.n	800090a <ILI9163_newFrame+0x1e>
		frameBuffer[i] = 0xFFFF;
 80008f8:	4a09      	ldr	r2, [pc, #36]	@ (8000920 <ILI9163_newFrame+0x34>)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000900:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(uint32_t i= 0; i < (ILI9163_WIDTH*ILI9163_HEIGHT); i++)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3301      	adds	r3, #1
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8000910:	d3f2      	bcc.n	80008f8 <ILI9163_newFrame+0xc>

	//HAL_SPI_Transmit(&DISP_SPI, (uint8_t*)frameBuffer, BUFSIZE*2, HAL_MAX_DELAY);

}
 8000912:	bf00      	nop
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	20000084 	.word	0x20000084

08000924 <ILI9163_render>:

void ILI9163_render()
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	ILI9163_setAddress(0, 0, ILI9163_WIDTH, ILI9163_HEIGHT);
 8000928:	2380      	movs	r3, #128	@ 0x80
 800092a:	22a0      	movs	r2, #160	@ 0xa0
 800092c:	2100      	movs	r1, #0
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff feb0 	bl	8000694 <ILI9163_setAddress>
	HAL_GPIO_WritePin(DISP_CS_Port, DISP_CS_Pin, 0);
 8000934:	2200      	movs	r2, #0
 8000936:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800093a:	480d      	ldr	r0, [pc, #52]	@ (8000970 <ILI9163_render+0x4c>)
 800093c:	f001 fb16 	bl	8001f6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DISP_DC_Port, DISP_DC_Pin, 1);
 8000940:	2201      	movs	r2, #1
 8000942:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000946:	480a      	ldr	r0, [pc, #40]	@ (8000970 <ILI9163_render+0x4c>)
 8000948:	f001 fb10 	bl	8001f6c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit_DMA(&DISP_SPI, (uint8_t*)frameBuffer, BUFSIZE*2);
 800094c:	f44f 4220 	mov.w	r2, #40960	@ 0xa000
 8000950:	4908      	ldr	r1, [pc, #32]	@ (8000974 <ILI9163_render+0x50>)
 8000952:	4809      	ldr	r0, [pc, #36]	@ (8000978 <ILI9163_render+0x54>)
 8000954:	f002 f9ea 	bl	8002d2c <HAL_SPI_Transmit_DMA>
//	HAL_SPI_Transmit(&DISP_SPI, (uint8_t*)frameBuffer, BUFSIZE*2, HAL_MAX_DELAY);

	SPI_DMA_FL=0;
 8000958:	4b08      	ldr	r3, [pc, #32]	@ (800097c <ILI9163_render+0x58>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
	while(!SPI_DMA_FL) {} // This can be commented out if your thread sends new frames slower than SPI transmits them. Otherwise, memory havoc. See README.md
 800095e:	bf00      	nop
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <ILI9163_render+0x58>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d0fb      	beq.n	8000960 <ILI9163_render+0x3c>
}
 8000968:	bf00      	nop
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40020400 	.word	0x40020400
 8000974:	20000084 	.word	0x20000084
 8000978:	2000a084 	.word	0x2000a084
 800097c:	2000a148 	.word	0x2000a148

08000980 <ILI9163_drawPixel>:

void ILI9163_drawPixel(uint8_t x, uint8_t y, uint16_t color) {
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
 800098a:	460b      	mov	r3, r1
 800098c:	71bb      	strb	r3, [r7, #6]
 800098e:	4613      	mov	r3, r2
 8000990:	80bb      	strh	r3, [r7, #4]
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 8000992:	79fb      	ldrb	r3, [r7, #7]
 8000994:	2b9f      	cmp	r3, #159	@ 0x9f
 8000996:	d81e      	bhi.n	80009d6 <ILI9163_drawPixel+0x56>
 8000998:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db1a      	blt.n	80009d6 <ILI9163_drawPixel+0x56>
	frameBuffer[((x)+(y*ILI9163_WIDTH))] = color;// >> 8;
 80009a0:	79f9      	ldrb	r1, [r7, #7]
 80009a2:	79ba      	ldrb	r2, [r7, #6]
 80009a4:	4613      	mov	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	015b      	lsls	r3, r3, #5
 80009ac:	440b      	add	r3, r1
 80009ae:	490d      	ldr	r1, [pc, #52]	@ (80009e4 <ILI9163_drawPixel+0x64>)
 80009b0:	88ba      	ldrh	r2, [r7, #4]
 80009b2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	frameBuffer[((x*2)+(y*2*ILI9163_WIDTH))+1] = color & 0xFF;
 80009b6:	79f9      	ldrb	r1, [r7, #7]
 80009b8:	79ba      	ldrb	r2, [r7, #6]
 80009ba:	4613      	mov	r3, r2
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	4413      	add	r3, r2
 80009c0:	015b      	lsls	r3, r3, #5
 80009c2:	440b      	add	r3, r1
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	3301      	adds	r3, #1
 80009c8:	88ba      	ldrh	r2, [r7, #4]
 80009ca:	b2d2      	uxtb	r2, r2
 80009cc:	b291      	uxth	r1, r2
 80009ce:	4a05      	ldr	r2, [pc, #20]	@ (80009e4 <ILI9163_drawPixel+0x64>)
 80009d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80009d4:	e000      	b.n	80009d8 <ILI9163_drawPixel+0x58>
	if ((x < 0) || (x >= ILI9163_WIDTH) || (y < 0) || (y >= ILI9163_HEIGHT)) return;
 80009d6:	bf00      	nop
//	HAL_SPI_Transmit(&DISP_SPI, (uint8_t*)frameBuffer, BUFSIZE*2, HAL_MAX_DELAY);
}
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	20000084 	.word	0x20000084

080009e8 <ILI9163_drawChar>:

void ILI9163_fillDisplay(uint16_t color) {
	ILI9163_fillRect(0,0, ILI9163_WIDTH, ILI9163_HEIGHT, color);
}

void ILI9163_drawChar(uint8_t x, uint8_t y, char ch, FontDef font, uint16_t color) {
 80009e8:	b082      	sub	sp, #8
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	61fb      	str	r3, [r7, #28]
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	460b      	mov	r3, r1
 80009f8:	71bb      	strb	r3, [r7, #6]
 80009fa:	4613      	mov	r3, r2
 80009fc:	717b      	strb	r3, [r7, #5]
	uint16_t i, b, j;
	for(i = 0; i < font.height; i++) {
 80009fe:	2300      	movs	r3, #0
 8000a00:	81fb      	strh	r3, [r7, #14]
 8000a02:	e02f      	b.n	8000a64 <ILI9163_drawChar+0x7c>
		b = font.data[(ch - 32) * font.height + i];
 8000a04:	6a3a      	ldr	r2, [r7, #32]
 8000a06:	797b      	ldrb	r3, [r7, #5]
 8000a08:	3b20      	subs	r3, #32
 8000a0a:	7f79      	ldrb	r1, [r7, #29]
 8000a0c:	fb03 f101 	mul.w	r1, r3, r1
 8000a10:	89fb      	ldrh	r3, [r7, #14]
 8000a12:	440b      	add	r3, r1
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	4413      	add	r3, r2
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	817b      	strh	r3, [r7, #10]
		for(j = 0; j < font.width; j++) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	81bb      	strh	r3, [r7, #12]
 8000a20:	e018      	b.n	8000a54 <ILI9163_drawChar+0x6c>
			if((b << j) & 0x8000)  {
 8000a22:	897a      	ldrh	r2, [r7, #10]
 8000a24:	89bb      	ldrh	r3, [r7, #12]
 8000a26:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d00d      	beq.n	8000a4e <ILI9163_drawChar+0x66>
				ILI9163_drawPixel(x + j, y + i, color);
 8000a32:	89bb      	ldrh	r3, [r7, #12]
 8000a34:	b2da      	uxtb	r2, r3
 8000a36:	79fb      	ldrb	r3, [r7, #7]
 8000a38:	4413      	add	r3, r2
 8000a3a:	b2d8      	uxtb	r0, r3
 8000a3c:	89fb      	ldrh	r3, [r7, #14]
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	79bb      	ldrb	r3, [r7, #6]
 8000a42:	4413      	add	r3, r2
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f7ff ff99 	bl	8000980 <ILI9163_drawPixel>
		for(j = 0; j < font.width; j++) {
 8000a4e:	89bb      	ldrh	r3, [r7, #12]
 8000a50:	3301      	adds	r3, #1
 8000a52:	81bb      	strh	r3, [r7, #12]
 8000a54:	7f3b      	ldrb	r3, [r7, #28]
 8000a56:	461a      	mov	r2, r3
 8000a58:	89bb      	ldrh	r3, [r7, #12]
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d3e1      	bcc.n	8000a22 <ILI9163_drawChar+0x3a>
	for(i = 0; i < font.height; i++) {
 8000a5e:	89fb      	ldrh	r3, [r7, #14]
 8000a60:	3301      	adds	r3, #1
 8000a62:	81fb      	strh	r3, [r7, #14]
 8000a64:	7f7b      	ldrb	r3, [r7, #29]
 8000a66:	461a      	mov	r2, r3
 8000a68:	89fb      	ldrh	r3, [r7, #14]
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d3ca      	bcc.n	8000a04 <ILI9163_drawChar+0x1c>
			}
		}
	}
}
 8000a6e:	bf00      	nop
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a7a:	b002      	add	sp, #8
 8000a7c:	4770      	bx	lr

08000a7e <ILI9163_drawString>:

void ILI9163_drawString(uint8_t x, uint8_t y, FontDef font, uint16_t color, const char *string) {
 8000a7e:	b590      	push	{r4, r7, lr}
 8000a80:	b087      	sub	sp, #28
 8000a82:	af02      	add	r7, sp, #8
 8000a84:	4604      	mov	r4, r0
 8000a86:	4608      	mov	r0, r1
 8000a88:	1d39      	adds	r1, r7, #4
 8000a8a:	e881 000c 	stmia.w	r1, {r2, r3}
 8000a8e:	4623      	mov	r3, r4
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	4603      	mov	r3, r0
 8000a94:	73bb      	strb	r3, [r7, #14]
	while(*string) {
 8000a96:	e029      	b.n	8000aec <ILI9163_drawString+0x6e>
		if(x + font.width >= ILI9163_WIDTH) {
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	793a      	ldrb	r2, [r7, #4]
 8000a9c:	4413      	add	r3, r2
 8000a9e:	2b9f      	cmp	r3, #159	@ 0x9f
 8000aa0:	dd12      	ble.n	8000ac8 <ILI9163_drawString+0x4a>
			x = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	73fb      	strb	r3, [r7, #15]
			y += font.height;
 8000aa6:	797a      	ldrb	r2, [r7, #5]
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	4413      	add	r3, r2
 8000aac:	73bb      	strb	r3, [r7, #14]
			if(y + font.height >= ILI9163_HEIGHT)
 8000aae:	7bbb      	ldrb	r3, [r7, #14]
 8000ab0:	797a      	ldrb	r2, [r7, #5]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ab6:	dc1e      	bgt.n	8000af6 <ILI9163_drawString+0x78>
				break;

			if(*string == ' ') {
 8000ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b20      	cmp	r3, #32
 8000abe:	d103      	bne.n	8000ac8 <ILI9163_drawString+0x4a>
				// skip spaces in the beginning of the new line
				string++;
 8000ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8000ac6:	e011      	b.n	8000aec <ILI9163_drawString+0x6e>
			}
		}

		ILI9163_drawChar(x, y, *string, font, color);
 8000ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	7bb9      	ldrb	r1, [r7, #14]
 8000ace:	7bf8      	ldrb	r0, [r7, #15]
 8000ad0:	8c3b      	ldrh	r3, [r7, #32]
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f7ff ff85 	bl	80009e8 <ILI9163_drawChar>

		x += font.width;
 8000ade:	793a      	ldrb	r2, [r7, #4]
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	73fb      	strb	r3, [r7, #15]
		string++;
 8000ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ae8:	3301      	adds	r3, #1
 8000aea:	627b      	str	r3, [r7, #36]	@ 0x24
	while(*string) {
 8000aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d1d1      	bne.n	8000a98 <ILI9163_drawString+0x1a>
	}
}
 8000af4:	e000      	b.n	8000af8 <ILI9163_drawString+0x7a>
				break;
 8000af6:	bf00      	nop
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd90      	pop	{r4, r7, pc}

08000b00 <ILI9163_drawStringF>:

void ILI9163_drawStringF(uint8_t x, uint8_t y, FontDef font, uint16_t color, char *szFormat, ...) {
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b099      	sub	sp, #100	@ 0x64
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	4604      	mov	r4, r0
 8000b08:	4608      	mov	r0, r1
 8000b0a:	1d39      	adds	r1, r7, #4
 8000b0c:	e881 000c 	stmia.w	r1, {r2, r3}
 8000b10:	4623      	mov	r3, r4
 8000b12:	73fb      	strb	r3, [r7, #15]
 8000b14:	4603      	mov	r3, r0
 8000b16:	73bb      	strb	r3, [r7, #14]
	char szBuffer[64];
	va_list pArgs;
	va_start(pArgs, szFormat);
 8000b18:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000b1c:	617b      	str	r3, [r7, #20]
	vsnprintf(szBuffer, 63, szFormat, pArgs);
 8000b1e:	f107 0018 	add.w	r0, r7, #24
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000b26:	213f      	movs	r1, #63	@ 0x3f
 8000b28:	f002 fc7a 	bl	8003420 <vsniprintf>
	va_end(pArgs);

	ILI9163_drawString(x, y, font, color, szBuffer);
 8000b2c:	7bb9      	ldrb	r1, [r7, #14]
 8000b2e:	7bf8      	ldrb	r0, [r7, #15]
 8000b30:	f107 0318 	add.w	r3, r7, #24
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	1d3b      	adds	r3, r7, #4
 8000b3e:	cb0c      	ldmia	r3, {r2, r3}
 8000b40:	f7ff ff9d 	bl	8000a7e <ILI9163_drawString>
}
 8000b44:	bf00      	nop
 8000b46:	375c      	adds	r7, #92	@ 0x5c
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd90      	pop	{r4, r7, pc}

08000b4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b52:	f000 fae4 	bl	800111e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b56:	f000 f841 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b5a:	f000 f903 	bl	8000d64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b5e:	f000 f8e3 	bl	8000d28 <MX_DMA_Init>
  MX_SPI1_Init();
 8000b62:	f000 f8a3 	bl	8000cac <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9163_init(1);
 8000b66:	2001      	movs	r0, #1
 8000b68:	f7ff fdd8 	bl	800071c <ILI9163_init>
  uint16_t test = 88;
 8000b6c:	2358      	movs	r3, #88	@ 0x58
 8000b6e:	80fb      	strh	r3, [r7, #6]
  HAL_Delay(100);
 8000b70:	2064      	movs	r0, #100	@ 0x64
 8000b72:	f000 fb31 	bl	80011d8 <HAL_Delay>
  /* USER CODE BEGIN WHILE */


  while (1)
  {
	  	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000b7c:	4814      	ldr	r0, [pc, #80]	@ (8000bd0 <main+0x84>)
 8000b7e:	f001 f9f5 	bl	8001f6c <HAL_GPIO_WritePin>
	  	HAL_Delay(1000);
 8000b82:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b86:	f000 fb27 	bl	80011d8 <HAL_Delay>

	  	ILI9163_newFrame();
 8000b8a:	f7ff feaf 	bl	80008ec <ILI9163_newFrame>

	  	test++;
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	3301      	adds	r3, #1
 8000b92:	80fb      	strh	r3, [r7, #6]

	  	ILI9163_drawStringF(5, 55, Font_7x10, BLACK, "%u", test); // The graphical functions don't cost a lot
 8000b94:	88fb      	ldrh	r3, [r7, #6]
 8000b96:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <main+0x88>)
 8000b98:	9302      	str	r3, [sp, #8]
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <main+0x8c>)
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	ca0c      	ldmia	r2, {r2, r3}
 8000ba4:	2137      	movs	r1, #55	@ 0x37
 8000ba6:	2005      	movs	r0, #5
 8000ba8:	f7ff ffaa 	bl	8000b00 <ILI9163_drawStringF>

	  	HAL_Delay(100);
 8000bac:	2064      	movs	r0, #100	@ 0x64
 8000bae:	f000 fb13 	bl	80011d8 <HAL_Delay>

	  	ILI9163_render();
 8000bb2:	f7ff feb7 	bl	8000924 <ILI9163_render>

	  	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000bbc:	4804      	ldr	r0, [pc, #16]	@ (8000bd0 <main+0x84>)
 8000bbe:	f001 f9d5 	bl	8001f6c <HAL_GPIO_WritePin>
	    HAL_Delay(1000);
 8000bc2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bc6:	f000 fb07 	bl	80011d8 <HAL_Delay>
	  	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bca:	bf00      	nop
 8000bcc:	e7d3      	b.n	8000b76 <main+0x2a>
 8000bce:	bf00      	nop
 8000bd0:	40020400 	.word	0x40020400
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	08003d54 	.word	0x08003d54

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b094      	sub	sp, #80	@ 0x50
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 0320 	add.w	r3, r7, #32
 8000be6:	2230      	movs	r2, #48	@ 0x30
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f002 fc26 	bl	800343c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c00:	f001 f9ce 	bl	8001fa0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c04:	4b27      	ldr	r3, [pc, #156]	@ (8000ca4 <SystemClock_Config+0xc8>)
 8000c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c08:	4a26      	ldr	r2, [pc, #152]	@ (8000ca4 <SystemClock_Config+0xc8>)
 8000c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c10:	4b24      	ldr	r3, [pc, #144]	@ (8000ca4 <SystemClock_Config+0xc8>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000c1c:	4b22      	ldr	r3, [pc, #136]	@ (8000ca8 <SystemClock_Config+0xcc>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c24:	4a20      	ldr	r2, [pc, #128]	@ (8000ca8 <SystemClock_Config+0xcc>)
 8000c26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca8 <SystemClock_Config+0xcc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c34:	607b      	str	r3, [r7, #4]
 8000c36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c3c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c42:	2302      	movs	r3, #2
 8000c44:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c46:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000c50:	2348      	movs	r3, #72	@ 0x48
 8000c52:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5c:	f107 0320 	add.w	r3, r7, #32
 8000c60:	4618      	mov	r0, r3
 8000c62:	f001 f9ad 	bl	8001fc0 <HAL_RCC_OscConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c6c:	f000 f902 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c70:	230f      	movs	r3, #15
 8000c72:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c74:	2302      	movs	r3, #2
 8000c76:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	2102      	movs	r1, #2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 fc3b 	bl	8002508 <HAL_RCC_ClockConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c98:	f000 f8ec 	bl	8000e74 <Error_Handler>
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	3750      	adds	r7, #80	@ 0x50
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40007000 	.word	0x40007000

08000cac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8000d24 <MX_SPI1_Init+0x78>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000cb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cbe:	4b18      	ldr	r3, [pc, #96]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cc4:	4b16      	ldr	r3, [pc, #88]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000cc6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000cca:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cd2:	4b13      	ldr	r3, [pc, #76]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000cda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000cde:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000ce0:	4b0f      	ldr	r3, [pc, #60]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000ce2:	2208      	movs	r2, #8
 8000ce4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cec:	4b0c      	ldr	r3, [pc, #48]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cf8:	4b09      	ldr	r3, [pc, #36]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000cfa:	2207      	movs	r2, #7
 8000cfc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d04:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000d06:	2208      	movs	r2, #8
 8000d08:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	@ (8000d20 <MX_SPI1_Init+0x74>)
 8000d0c:	f001 fdee 	bl	80028ec <HAL_SPI_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000d16:	f000 f8ad 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	2000a084 	.word	0x2000a084
 8000d24:	40013000 	.word	0x40013000

08000d28 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_DMA_Init+0x38>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <MX_DMA_Init+0x38>)
 8000d34:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_DMA_Init+0x38>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2100      	movs	r1, #0
 8000d4a:	203b      	movs	r0, #59	@ 0x3b
 8000d4c:	f000 fb43 	bl	80013d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000d50:	203b      	movs	r0, #59	@ 0x3b
 8000d52:	f000 fb5c 	bl	800140e <HAL_NVIC_EnableIRQ>

}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40023800 	.word	0x40023800

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08a      	sub	sp, #40	@ 0x28
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d86:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d92:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	4a24      	ldr	r2, [pc, #144]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000d98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9e:	4b22      	ldr	r3, [pc, #136]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	4b1f      	ldr	r3, [pc, #124]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a1e      	ldr	r2, [pc, #120]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b19      	ldr	r3, [pc, #100]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a18      	ldr	r2, [pc, #96]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b16      	ldr	r3, [pc, #88]	@ (8000e28 <MX_GPIO_Init+0xc4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 8000dda:	2200      	movs	r2, #0
 8000ddc:	f244 3181 	movw	r1, #17281	@ 0x4381
 8000de0:	4812      	ldr	r0, [pc, #72]	@ (8000e2c <MX_GPIO_Init+0xc8>)
 8000de2:	f001 f8c3 	bl	8001f6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000de6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000df6:	f107 0314 	add.w	r3, r7, #20
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <MX_GPIO_Init+0xcc>)
 8000dfe:	f000 ff09 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB8
                           PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_8
 8000e02:	f244 3381 	movw	r3, #17281	@ 0x4381
 8000e06:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4804      	ldr	r0, [pc, #16]	@ (8000e2c <MX_GPIO_Init+0xc8>)
 8000e1c:	f000 fefa 	bl	8001c14 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	@ 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40020800 	.word	0x40020800

08000e34 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) // Your TxCpltCallback
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	SPI_DMA_CNT--;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_SPI_TxCpltCallback+0x34>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	4a09      	ldr	r2, [pc, #36]	@ (8000e68 <HAL_SPI_TxCpltCallback+0x34>)
 8000e44:	6013      	str	r3, [r2, #0]
	if(SPI_DMA_CNT==0)
 8000e46:	4b08      	ldr	r3, [pc, #32]	@ (8000e68 <HAL_SPI_TxCpltCallback+0x34>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d108      	bne.n	8000e60 <HAL_SPI_TxCpltCallback+0x2c>
	{
		HAL_SPI_DMAStop(&hspi1);
 8000e4e:	4807      	ldr	r0, [pc, #28]	@ (8000e6c <HAL_SPI_TxCpltCallback+0x38>)
 8000e50:	f002 f85c 	bl	8002f0c <HAL_SPI_DMAStop>
		SPI_DMA_CNT=1;
 8000e54:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <HAL_SPI_TxCpltCallback+0x34>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
		SPI_DMA_FL=1;
 8000e5a:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <HAL_SPI_TxCpltCallback+0x3c>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	701a      	strb	r2, [r3, #0]
	}
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000008 	.word	0x20000008
 8000e6c:	2000a084 	.word	0x2000a084
 8000e70:	2000a148 	.word	0x2000a148

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <Error_Handler+0x8>

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	4a08      	ldr	r2, [pc, #32]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eaa:	4b06      	ldr	r3, [pc, #24]	@ (8000ec4 <HAL_MspInit+0x44>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000eb2:	603b      	str	r3, [r7, #0]
 8000eb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	40023800 	.word	0x40023800

08000ec8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b08a      	sub	sp, #40	@ 0x28
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a33      	ldr	r2, [pc, #204]	@ (8000fb4 <HAL_SPI_MspInit+0xec>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d160      	bne.n	8000fac <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eea:	4b33      	ldr	r3, [pc, #204]	@ (8000fb8 <HAL_SPI_MspInit+0xf0>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	4a32      	ldr	r2, [pc, #200]	@ (8000fb8 <HAL_SPI_MspInit+0xf0>)
 8000ef0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ef4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ef6:	4b30      	ldr	r3, [pc, #192]	@ (8000fb8 <HAL_SPI_MspInit+0xf0>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb8 <HAL_SPI_MspInit+0xf0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a2c      	ldr	r2, [pc, #176]	@ (8000fb8 <HAL_SPI_MspInit+0xf0>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb8 <HAL_SPI_MspInit+0xf0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	60fb      	str	r3, [r7, #12]
 8000f18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f1a:	23e0      	movs	r3, #224	@ 0xe0
 8000f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f26:	2303      	movs	r3, #3
 8000f28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	4821      	ldr	r0, [pc, #132]	@ (8000fbc <HAL_SPI_MspInit+0xf4>)
 8000f36:	f000 fe6d 	bl	8001c14 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f3a:	4b21      	ldr	r3, [pc, #132]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f3c:	4a21      	ldr	r2, [pc, #132]	@ (8000fc4 <HAL_SPI_MspInit+0xfc>)
 8000f3e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f42:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f46:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f48:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f4a:	2240      	movs	r2, #64	@ 0x40
 8000f4c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f54:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f5a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f5c:	4b18      	ldr	r3, [pc, #96]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f62:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f64:	4b16      	ldr	r3, [pc, #88]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f6a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f72:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000f84:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000f90:	480b      	ldr	r0, [pc, #44]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000f92:	f000 fa57 	bl	8001444 <HAL_DMA_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_SPI_MspInit+0xd8>
    {
      Error_Handler();
 8000f9c:	f7ff ff6a 	bl	8000e74 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a07      	ldr	r2, [pc, #28]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000fa4:	655a      	str	r2, [r3, #84]	@ 0x54
 8000fa6:	4a06      	ldr	r2, [pc, #24]	@ (8000fc0 <HAL_SPI_MspInit+0xf8>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	@ 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40013000 	.word	0x40013000
 8000fb8:	40023800 	.word	0x40023800
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	2000a0e8 	.word	0x2000a0e8
 8000fc4:	40026458 	.word	0x40026458

08000fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <NMI_Handler+0x4>

08000fd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <HardFault_Handler+0x4>

08000fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <MemManage_Handler+0x4>

08000fe0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <BusFault_Handler+0x4>

08000fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <UsageFault_Handler+0x4>

08000ff0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101e:	f000 f8bb 	bl	8001198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <DMA2_Stream3_IRQHandler+0x10>)
 800102e:	f000 fb87 	bl	8001740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	2000a0e8 	.word	0x2000a0e8

0800103c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001044:	4a14      	ldr	r2, [pc, #80]	@ (8001098 <_sbrk+0x5c>)
 8001046:	4b15      	ldr	r3, [pc, #84]	@ (800109c <_sbrk+0x60>)
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001050:	4b13      	ldr	r3, [pc, #76]	@ (80010a0 <_sbrk+0x64>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d102      	bne.n	800105e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001058:	4b11      	ldr	r3, [pc, #68]	@ (80010a0 <_sbrk+0x64>)
 800105a:	4a12      	ldr	r2, [pc, #72]	@ (80010a4 <_sbrk+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	429a      	cmp	r2, r3
 800106a:	d207      	bcs.n	800107c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800106c:	f002 f9ee 	bl	800344c <__errno>
 8001070:	4603      	mov	r3, r0
 8001072:	220c      	movs	r2, #12
 8001074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001076:	f04f 33ff 	mov.w	r3, #4294967295
 800107a:	e009      	b.n	8001090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800107c:	4b08      	ldr	r3, [pc, #32]	@ (80010a0 <_sbrk+0x64>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001082:	4b07      	ldr	r3, [pc, #28]	@ (80010a0 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	4a05      	ldr	r2, [pc, #20]	@ (80010a0 <_sbrk+0x64>)
 800108c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800108e:	68fb      	ldr	r3, [r7, #12]
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	20050000 	.word	0x20050000
 800109c:	00000400 	.word	0x00000400
 80010a0:	2000a14c 	.word	0x2000a14c
 80010a4:	2000a2a0 	.word	0x2000a2a0

080010a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <SystemInit+0x20>)
 80010ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <SystemInit+0x20>)
 80010b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001104 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010d0:	f7ff ffea 	bl	80010a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	@ (8001108 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	@ (800110c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001110 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001114 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001118 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80010fa:	f002 f9ad 	bl	8003458 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010fe:	f7ff fd25 	bl	8000b4c <main>
  bx  lr    
 8001102:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001104:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001110:	08004520 	.word	0x08004520
  ldr r2, =_sbss
 8001114:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001118:	2000a29c 	.word	0x2000a29c

0800111c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>

0800111e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001122:	2003      	movs	r0, #3
 8001124:	f000 f94c 	bl	80013c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001128:	2000      	movs	r0, #0
 800112a:	f000 f805 	bl	8001138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112e:	f7ff fea7 	bl	8000e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001132:	2300      	movs	r3, #0
}
 8001134:	4618      	mov	r0, r3
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001140:	4b12      	ldr	r3, [pc, #72]	@ (800118c <HAL_InitTick+0x54>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b12      	ldr	r3, [pc, #72]	@ (8001190 <HAL_InitTick+0x58>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	4619      	mov	r1, r3
 800114a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800114e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001152:	fbb2 f3f3 	udiv	r3, r2, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f967 	bl	800142a <HAL_SYSTICK_Config>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e00e      	b.n	8001184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2b0f      	cmp	r3, #15
 800116a:	d80a      	bhi.n	8001182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800116c:	2200      	movs	r2, #0
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	f000 f92f 	bl	80013d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001178:	4a06      	ldr	r2, [pc, #24]	@ (8001194 <HAL_InitTick+0x5c>)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800117e:	2300      	movs	r3, #0
 8001180:	e000      	b.n	8001184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000000c 	.word	0x2000000c
 8001190:	20000014 	.word	0x20000014
 8001194:	20000010 	.word	0x20000010

08001198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800119c:	4b06      	ldr	r3, [pc, #24]	@ (80011b8 <HAL_IncTick+0x20>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_IncTick+0x24>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4413      	add	r3, r2
 80011a8:	4a04      	ldr	r2, [pc, #16]	@ (80011bc <HAL_IncTick+0x24>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000014 	.word	0x20000014
 80011bc:	2000a150 	.word	0x2000a150

080011c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  return uwTick;
 80011c4:	4b03      	ldr	r3, [pc, #12]	@ (80011d4 <HAL_GetTick+0x14>)
 80011c6:	681b      	ldr	r3, [r3, #0]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	2000a150 	.word	0x2000a150

080011d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011e0:	f7ff ffee 	bl	80011c0 <HAL_GetTick>
 80011e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011f0:	d005      	beq.n	80011fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011f2:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_Delay+0x44>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	461a      	mov	r2, r3
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	4413      	add	r3, r2
 80011fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011fe:	bf00      	nop
 8001200:	f7ff ffde 	bl	80011c0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	429a      	cmp	r2, r3
 800120e:	d8f7      	bhi.n	8001200 <HAL_Delay+0x28>
  {
  }
}
 8001210:	bf00      	nop
 8001212:	bf00      	nop
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000014 	.word	0x20000014

08001220 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001230:	4b0b      	ldr	r3, [pc, #44]	@ (8001260 <__NVIC_SetPriorityGrouping+0x40>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001236:	68ba      	ldr	r2, [r7, #8]
 8001238:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800123c:	4013      	ands	r3, r2
 800123e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <__NVIC_SetPriorityGrouping+0x44>)
 800124a:	4313      	orrs	r3, r2
 800124c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124e:	4a04      	ldr	r2, [pc, #16]	@ (8001260 <__NVIC_SetPriorityGrouping+0x40>)
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	60d3      	str	r3, [r2, #12]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	e000ed00 	.word	0xe000ed00
 8001264:	05fa0000 	.word	0x05fa0000

08001268 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800126c:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <__NVIC_GetPriorityGrouping+0x18>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	f003 0307 	and.w	r3, r3, #7
}
 8001276:	4618      	mov	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	2b00      	cmp	r3, #0
 8001294:	db0b      	blt.n	80012ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	f003 021f 	and.w	r2, r3, #31
 800129c:	4907      	ldr	r1, [pc, #28]	@ (80012bc <__NVIC_EnableIRQ+0x38>)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	095b      	lsrs	r3, r3, #5
 80012a4:	2001      	movs	r0, #1
 80012a6:	fa00 f202 	lsl.w	r2, r0, r2
 80012aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000e100 	.word	0xe000e100

080012c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	6039      	str	r1, [r7, #0]
 80012ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db0a      	blt.n	80012ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	490c      	ldr	r1, [pc, #48]	@ (800130c <__NVIC_SetPriority+0x4c>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	0112      	lsls	r2, r2, #4
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	440b      	add	r3, r1
 80012e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e8:	e00a      	b.n	8001300 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4908      	ldr	r1, [pc, #32]	@ (8001310 <__NVIC_SetPriority+0x50>)
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	3b04      	subs	r3, #4
 80012f8:	0112      	lsls	r2, r2, #4
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	440b      	add	r3, r1
 80012fe:	761a      	strb	r2, [r3, #24]
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001314:	b480      	push	{r7}
 8001316:	b089      	sub	sp, #36	@ 0x24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	f1c3 0307 	rsb	r3, r3, #7
 800132e:	2b04      	cmp	r3, #4
 8001330:	bf28      	it	cs
 8001332:	2304      	movcs	r3, #4
 8001334:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3304      	adds	r3, #4
 800133a:	2b06      	cmp	r3, #6
 800133c:	d902      	bls.n	8001344 <NVIC_EncodePriority+0x30>
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	3b03      	subs	r3, #3
 8001342:	e000      	b.n	8001346 <NVIC_EncodePriority+0x32>
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	f04f 32ff 	mov.w	r2, #4294967295
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43da      	mvns	r2, r3
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	401a      	ands	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800135c:	f04f 31ff 	mov.w	r1, #4294967295
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	fa01 f303 	lsl.w	r3, r1, r3
 8001366:	43d9      	mvns	r1, r3
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	4313      	orrs	r3, r2
         );
}
 800136e:	4618      	mov	r0, r3
 8001370:	3724      	adds	r7, #36	@ 0x24
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800138c:	d301      	bcc.n	8001392 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800138e:	2301      	movs	r3, #1
 8001390:	e00f      	b.n	80013b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <SysTick_Config+0x40>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800139a:	210f      	movs	r1, #15
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	f7ff ff8e 	bl	80012c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013a4:	4b05      	ldr	r3, [pc, #20]	@ (80013bc <SysTick_Config+0x40>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013aa:	4b04      	ldr	r3, [pc, #16]	@ (80013bc <SysTick_Config+0x40>)
 80013ac:	2207      	movs	r2, #7
 80013ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	e000e010 	.word	0xe000e010

080013c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ff29 	bl	8001220 <__NVIC_SetPriorityGrouping>
}
 80013ce:	bf00      	nop
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b086      	sub	sp, #24
 80013da:	af00      	add	r7, sp, #0
 80013dc:	4603      	mov	r3, r0
 80013de:	60b9      	str	r1, [r7, #8]
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013e8:	f7ff ff3e 	bl	8001268 <__NVIC_GetPriorityGrouping>
 80013ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	68b9      	ldr	r1, [r7, #8]
 80013f2:	6978      	ldr	r0, [r7, #20]
 80013f4:	f7ff ff8e 	bl	8001314 <NVIC_EncodePriority>
 80013f8:	4602      	mov	r2, r0
 80013fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013fe:	4611      	mov	r1, r2
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff ff5d 	bl	80012c0 <__NVIC_SetPriority>
}
 8001406:	bf00      	nop
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff31 	bl	8001284 <__NVIC_EnableIRQ>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ffa2 	bl	800137c <SysTick_Config>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001450:	f7ff feb6 	bl	80011c0 <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e099      	b.n	8001594 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2202      	movs	r2, #2
 8001464:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f022 0201 	bic.w	r2, r2, #1
 800147e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001480:	e00f      	b.n	80014a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001482:	f7ff fe9d 	bl	80011c0 <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b05      	cmp	r3, #5
 800148e:	d908      	bls.n	80014a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2220      	movs	r2, #32
 8001494:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2203      	movs	r2, #3
 800149a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e078      	b.n	8001594 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1e8      	bne.n	8001482 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	4b38      	ldr	r3, [pc, #224]	@ (800159c <HAL_DMA_Init+0x158>)
 80014bc:	4013      	ands	r3, r2
 80014be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80014da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a1b      	ldr	r3, [r3, #32]
 80014ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	d107      	bne.n	800150c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001504:	4313      	orrs	r3, r2
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	4313      	orrs	r3, r2
 800150a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	f023 0307 	bic.w	r3, r3, #7
 8001522:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	4313      	orrs	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001532:	2b04      	cmp	r3, #4
 8001534:	d117      	bne.n	8001566 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4313      	orrs	r3, r2
 800153e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00e      	beq.n	8001566 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fae7 	bl	8001b1c <DMA_CheckFifoParam>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d008      	beq.n	8001566 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2240      	movs	r2, #64	@ 0x40
 8001558:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001562:	2301      	movs	r3, #1
 8001564:	e016      	b.n	8001594 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f000 fa9e 	bl	8001ab0 <DMA_CalcBaseAndBitshift>
 8001574:	4603      	mov	r3, r0
 8001576:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800157c:	223f      	movs	r2, #63	@ 0x3f
 800157e:	409a      	lsls	r2, r3
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	f010803f 	.word	0xf010803f

080015a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
 80015ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_DMA_Start_IT+0x26>
 80015c2:	2302      	movs	r3, #2
 80015c4:	e048      	b.n	8001658 <HAL_DMA_Start_IT+0xb8>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2201      	movs	r2, #1
 80015ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d137      	bne.n	800164a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2202      	movs	r2, #2
 80015de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f000 fa30 	bl	8001a54 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f8:	223f      	movs	r2, #63	@ 0x3f
 80015fa:	409a      	lsls	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 0216 	orr.w	r2, r2, #22
 800160e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800161e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001624:	2b00      	cmp	r3, #0
 8001626:	d007      	beq.n	8001638 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0208 	orr.w	r2, r2, #8
 8001636:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	e005      	b.n	8001656 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001652:	2302      	movs	r3, #2
 8001654:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001656:	7dfb      	ldrb	r3, [r7, #23]
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800166c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800166e:	f7ff fda7 	bl	80011c0 <HAL_GetTick>
 8001672:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d008      	beq.n	8001692 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2280      	movs	r2, #128	@ 0x80
 8001684:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e052      	b.n	8001738 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0216 	bic.w	r2, r2, #22
 80016a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	695a      	ldr	r2, [r3, #20]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d103      	bne.n	80016c2 <HAL_DMA_Abort+0x62>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d007      	beq.n	80016d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0208 	bic.w	r2, r2, #8
 80016d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0201 	bic.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016e2:	e013      	b.n	800170c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e4:	f7ff fd6c 	bl	80011c0 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b05      	cmp	r3, #5
 80016f0:	d90c      	bls.n	800170c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2220      	movs	r2, #32
 80016f6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2203      	movs	r2, #3
 80016fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001708:	2303      	movs	r3, #3
 800170a:	e015      	b.n	8001738 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1e4      	bne.n	80016e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800171e:	223f      	movs	r2, #63	@ 0x3f
 8001720:	409a      	lsls	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2201      	movs	r2, #1
 800172a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800174c:	4b8e      	ldr	r3, [pc, #568]	@ (8001988 <HAL_DMA_IRQHandler+0x248>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a8e      	ldr	r2, [pc, #568]	@ (800198c <HAL_DMA_IRQHandler+0x24c>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0a9b      	lsrs	r3, r3, #10
 8001758:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800176a:	2208      	movs	r2, #8
 800176c:	409a      	lsls	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4013      	ands	r3, r2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d01a      	beq.n	80017ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0204 	bic.w	r2, r2, #4
 8001792:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001798:	2208      	movs	r2, #8
 800179a:	409a      	lsls	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017a4:	f043 0201 	orr.w	r2, r3, #1
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b0:	2201      	movs	r2, #1
 80017b2:	409a      	lsls	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4013      	ands	r3, r2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d012      	beq.n	80017e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d00b      	beq.n	80017e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ce:	2201      	movs	r2, #1
 80017d0:	409a      	lsls	r2, r3
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017da:	f043 0202 	orr.w	r2, r3, #2
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e6:	2204      	movs	r2, #4
 80017e8:	409a      	lsls	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	4013      	ands	r3, r2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d012      	beq.n	8001818 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0302 	and.w	r3, r3, #2
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00b      	beq.n	8001818 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001804:	2204      	movs	r2, #4
 8001806:	409a      	lsls	r2, r3
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001810:	f043 0204 	orr.w	r2, r3, #4
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181c:	2210      	movs	r2, #16
 800181e:	409a      	lsls	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d043      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d03c      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800183a:	2210      	movs	r2, #16
 800183c:	409a      	lsls	r2, r3
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d018      	beq.n	8001882 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d108      	bne.n	8001870 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	2b00      	cmp	r3, #0
 8001864:	d024      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
 800186e:	e01f      	b.n	80018b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001874:	2b00      	cmp	r3, #0
 8001876:	d01b      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	4798      	blx	r3
 8001880:	e016      	b.n	80018b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d107      	bne.n	80018a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0208 	bic.w	r2, r2, #8
 800189e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d003      	beq.n	80018b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b4:	2220      	movs	r2, #32
 80018b6:	409a      	lsls	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 808f 	beq.w	80019e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0310 	and.w	r3, r3, #16
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	f000 8087 	beq.w	80019e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d6:	2220      	movs	r2, #32
 80018d8:	409a      	lsls	r2, r3
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d136      	bne.n	8001958 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 0216 	bic.w	r2, r2, #22
 80018f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	695a      	ldr	r2, [r3, #20]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001908:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	2b00      	cmp	r3, #0
 8001910:	d103      	bne.n	800191a <HAL_DMA_IRQHandler+0x1da>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001916:	2b00      	cmp	r3, #0
 8001918:	d007      	beq.n	800192a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0208 	bic.w	r2, r2, #8
 8001928:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800192e:	223f      	movs	r2, #63	@ 0x3f
 8001930:	409a      	lsls	r2, r3
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800194a:	2b00      	cmp	r3, #0
 800194c:	d07e      	beq.n	8001a4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	4798      	blx	r3
        }
        return;
 8001956:	e079      	b.n	8001a4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d01d      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d10d      	bne.n	8001990 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001978:	2b00      	cmp	r3, #0
 800197a:	d031      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001980:	6878      	ldr	r0, [r7, #4]
 8001982:	4798      	blx	r3
 8001984:	e02c      	b.n	80019e0 <HAL_DMA_IRQHandler+0x2a0>
 8001986:	bf00      	nop
 8001988:	2000000c 	.word	0x2000000c
 800198c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001994:	2b00      	cmp	r3, #0
 8001996:	d023      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	4798      	blx	r3
 80019a0:	e01e      	b.n	80019e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10f      	bne.n	80019d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 0210 	bic.w	r2, r2, #16
 80019be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d032      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d022      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2205      	movs	r2, #5
 80019f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0201 	bic.w	r2, r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d307      	bcc.n	8001a28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f2      	bne.n	8001a0c <HAL_DMA_IRQHandler+0x2cc>
 8001a26:	e000      	b.n	8001a2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	4798      	blx	r3
 8001a4a:	e000      	b.n	8001a4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a4c:	bf00      	nop
    }
  }
}
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001a70:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	683a      	ldr	r2, [r7, #0]
 8001a78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b40      	cmp	r3, #64	@ 0x40
 8001a80:	d108      	bne.n	8001a94 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68ba      	ldr	r2, [r7, #8]
 8001a90:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a92:	e007      	b.n	8001aa4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68ba      	ldr	r2, [r7, #8]
 8001a9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	60da      	str	r2, [r3, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	3b10      	subs	r3, #16
 8001ac0:	4a13      	ldr	r2, [pc, #76]	@ (8001b10 <DMA_CalcBaseAndBitshift+0x60>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aca:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <DMA_CalcBaseAndBitshift+0x64>)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4413      	add	r3, r2
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d908      	bls.n	8001af0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <DMA_CalcBaseAndBitshift+0x68>)
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	1d1a      	adds	r2, r3, #4
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	659a      	str	r2, [r3, #88]	@ 0x58
 8001aee:	e006      	b.n	8001afe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <DMA_CalcBaseAndBitshift+0x68>)
 8001af8:	4013      	ands	r3, r2
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	aaaaaaab 	.word	0xaaaaaaab
 8001b14:	080044d4 	.word	0x080044d4
 8001b18:	fffffc00 	.word	0xfffffc00

08001b1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d11f      	bne.n	8001b76 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d856      	bhi.n	8001bea <DMA_CheckFifoParam+0xce>
 8001b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b44 <DMA_CheckFifoParam+0x28>)
 8001b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b42:	bf00      	nop
 8001b44:	08001b55 	.word	0x08001b55
 8001b48:	08001b67 	.word	0x08001b67
 8001b4c:	08001b55 	.word	0x08001b55
 8001b50:	08001beb 	.word	0x08001beb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d046      	beq.n	8001bee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b64:	e043      	b.n	8001bee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b6e:	d140      	bne.n	8001bf2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b74:	e03d      	b.n	8001bf2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b7e:	d121      	bne.n	8001bc4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d837      	bhi.n	8001bf6 <DMA_CheckFifoParam+0xda>
 8001b86:	a201      	add	r2, pc, #4	@ (adr r2, 8001b8c <DMA_CheckFifoParam+0x70>)
 8001b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b8c:	08001b9d 	.word	0x08001b9d
 8001b90:	08001ba3 	.word	0x08001ba3
 8001b94:	08001b9d 	.word	0x08001b9d
 8001b98:	08001bb5 	.word	0x08001bb5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba0:	e030      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d025      	beq.n	8001bfa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bb2:	e022      	b.n	8001bfa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001bbc:	d11f      	bne.n	8001bfe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bc2:	e01c      	b.n	8001bfe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d903      	bls.n	8001bd2 <DMA_CheckFifoParam+0xb6>
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	2b03      	cmp	r3, #3
 8001bce:	d003      	beq.n	8001bd8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bd0:	e018      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd6:	e015      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bdc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d00e      	beq.n	8001c02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	73fb      	strb	r3, [r7, #15]
      break;
 8001be8:	e00b      	b.n	8001c02 <DMA_CheckFifoParam+0xe6>
      break;
 8001bea:	bf00      	nop
 8001bec:	e00a      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      break;
 8001bee:	bf00      	nop
 8001bf0:	e008      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      break;
 8001bf2:	bf00      	nop
 8001bf4:	e006      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      break;
 8001bf6:	bf00      	nop
 8001bf8:	e004      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      break;
 8001bfa:	bf00      	nop
 8001bfc:	e002      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      break;   
 8001bfe:	bf00      	nop
 8001c00:	e000      	b.n	8001c04 <DMA_CheckFifoParam+0xe8>
      break;
 8001c02:	bf00      	nop
    }
  } 
  
  return status; 
 8001c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	@ 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e175      	b.n	8001f20 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001c34:	2201      	movs	r2, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4013      	ands	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	f040 8164 	bne.w	8001f1a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d005      	beq.n	8001c6a <HAL_GPIO_Init+0x56>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d130      	bne.n	8001ccc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	091b      	lsrs	r3, r3, #4
 8001cb6:	f003 0201 	and.w	r2, r3, #1
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d017      	beq.n	8001d08 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	689a      	ldr	r2, [r3, #8]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d123      	bne.n	8001d5c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	08da      	lsrs	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3208      	adds	r2, #8
 8001d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	220f      	movs	r2, #15
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	08da      	lsrs	r2, r3, #3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3208      	adds	r2, #8
 8001d56:	69b9      	ldr	r1, [r7, #24]
 8001d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	2203      	movs	r2, #3
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f003 0203 	and.w	r2, r3, #3
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80be 	beq.w	8001f1a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9e:	4b66      	ldr	r3, [pc, #408]	@ (8001f38 <HAL_GPIO_Init+0x324>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	4a65      	ldr	r2, [pc, #404]	@ (8001f38 <HAL_GPIO_Init+0x324>)
 8001da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001daa:	4b63      	ldr	r3, [pc, #396]	@ (8001f38 <HAL_GPIO_Init+0x324>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001db6:	4a61      	ldr	r2, [pc, #388]	@ (8001f3c <HAL_GPIO_Init+0x328>)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	220f      	movs	r2, #15
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a58      	ldr	r2, [pc, #352]	@ (8001f40 <HAL_GPIO_Init+0x32c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d037      	beq.n	8001e52 <HAL_GPIO_Init+0x23e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a57      	ldr	r2, [pc, #348]	@ (8001f44 <HAL_GPIO_Init+0x330>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d031      	beq.n	8001e4e <HAL_GPIO_Init+0x23a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a56      	ldr	r2, [pc, #344]	@ (8001f48 <HAL_GPIO_Init+0x334>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d02b      	beq.n	8001e4a <HAL_GPIO_Init+0x236>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a55      	ldr	r2, [pc, #340]	@ (8001f4c <HAL_GPIO_Init+0x338>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d025      	beq.n	8001e46 <HAL_GPIO_Init+0x232>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a54      	ldr	r2, [pc, #336]	@ (8001f50 <HAL_GPIO_Init+0x33c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01f      	beq.n	8001e42 <HAL_GPIO_Init+0x22e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a53      	ldr	r2, [pc, #332]	@ (8001f54 <HAL_GPIO_Init+0x340>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d019      	beq.n	8001e3e <HAL_GPIO_Init+0x22a>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a52      	ldr	r2, [pc, #328]	@ (8001f58 <HAL_GPIO_Init+0x344>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0x226>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a51      	ldr	r2, [pc, #324]	@ (8001f5c <HAL_GPIO_Init+0x348>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00d      	beq.n	8001e36 <HAL_GPIO_Init+0x222>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a50      	ldr	r2, [pc, #320]	@ (8001f60 <HAL_GPIO_Init+0x34c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <HAL_GPIO_Init+0x21e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a4f      	ldr	r2, [pc, #316]	@ (8001f64 <HAL_GPIO_Init+0x350>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_GPIO_Init+0x21a>
 8001e2a:	2309      	movs	r3, #9
 8001e2c:	e012      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e2e:	230a      	movs	r3, #10
 8001e30:	e010      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e32:	2308      	movs	r3, #8
 8001e34:	e00e      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e36:	2307      	movs	r3, #7
 8001e38:	e00c      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e3a:	2306      	movs	r3, #6
 8001e3c:	e00a      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e3e:	2305      	movs	r3, #5
 8001e40:	e008      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e42:	2304      	movs	r3, #4
 8001e44:	e006      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e46:	2303      	movs	r3, #3
 8001e48:	e004      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e002      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x240>
 8001e52:	2300      	movs	r3, #0
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	f002 0203 	and.w	r2, r2, #3
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	4093      	lsls	r3, r2
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e64:	4935      	ldr	r1, [pc, #212]	@ (8001f3c <HAL_GPIO_Init+0x328>)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e72:	4b3d      	ldr	r3, [pc, #244]	@ (8001f68 <HAL_GPIO_Init+0x354>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e96:	4a34      	ldr	r2, [pc, #208]	@ (8001f68 <HAL_GPIO_Init+0x354>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e9c:	4b32      	ldr	r3, [pc, #200]	@ (8001f68 <HAL_GPIO_Init+0x354>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec0:	4a29      	ldr	r2, [pc, #164]	@ (8001f68 <HAL_GPIO_Init+0x354>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ec6:	4b28      	ldr	r3, [pc, #160]	@ (8001f68 <HAL_GPIO_Init+0x354>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eea:	4a1f      	ldr	r2, [pc, #124]	@ (8001f68 <HAL_GPIO_Init+0x354>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <HAL_GPIO_Init+0x354>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f14:	4a14      	ldr	r2, [pc, #80]	@ (8001f68 <HAL_GPIO_Init+0x354>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	f67f ae86 	bls.w	8001c34 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3724      	adds	r7, #36	@ 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40013800 	.word	0x40013800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40020400 	.word	0x40020400
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	40020c00 	.word	0x40020c00
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40021400 	.word	0x40021400
 8001f58:	40021800 	.word	0x40021800
 8001f5c:	40021c00 	.word	0x40021c00
 8001f60:	40022000 	.word	0x40022000
 8001f64:	40022400 	.word	0x40022400
 8001f68:	40013c00 	.word	0x40013c00

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f88:	e003      	b.n	8001f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	041a      	lsls	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	619a      	str	r2, [r3, #24]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a04      	ldr	r2, [pc, #16]	@ (8001fbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001faa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40007000 	.word	0x40007000

08001fc0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e291      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f000 8087 	beq.w	80020f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe4:	4b96      	ldr	r3, [pc, #600]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d00c      	beq.n	800200a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff0:	4b93      	ldr	r3, [pc, #588]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d112      	bne.n	8002022 <HAL_RCC_OscConfig+0x62>
 8001ffc:	4b90      	ldr	r3, [pc, #576]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002004:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002008:	d10b      	bne.n	8002022 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200a:	4b8d      	ldr	r3, [pc, #564]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d06c      	beq.n	80020f0 <HAL_RCC_OscConfig+0x130>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d168      	bne.n	80020f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e26b      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800202a:	d106      	bne.n	800203a <HAL_RCC_OscConfig+0x7a>
 800202c:	4b84      	ldr	r3, [pc, #528]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a83      	ldr	r2, [pc, #524]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002032:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002036:	6013      	str	r3, [r2, #0]
 8002038:	e02e      	b.n	8002098 <HAL_RCC_OscConfig+0xd8>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d10c      	bne.n	800205c <HAL_RCC_OscConfig+0x9c>
 8002042:	4b7f      	ldr	r3, [pc, #508]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a7e      	ldr	r2, [pc, #504]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002048:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b7c      	ldr	r3, [pc, #496]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a7b      	ldr	r2, [pc, #492]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002054:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e01d      	b.n	8002098 <HAL_RCC_OscConfig+0xd8>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002064:	d10c      	bne.n	8002080 <HAL_RCC_OscConfig+0xc0>
 8002066:	4b76      	ldr	r3, [pc, #472]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a75      	ldr	r2, [pc, #468]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 800206c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b73      	ldr	r3, [pc, #460]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a72      	ldr	r2, [pc, #456]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002078:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800207c:	6013      	str	r3, [r2, #0]
 800207e:	e00b      	b.n	8002098 <HAL_RCC_OscConfig+0xd8>
 8002080:	4b6f      	ldr	r3, [pc, #444]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a6e      	ldr	r2, [pc, #440]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002086:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800208a:	6013      	str	r3, [r2, #0]
 800208c:	4b6c      	ldr	r3, [pc, #432]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a6b      	ldr	r2, [pc, #428]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002092:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d013      	beq.n	80020c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a0:	f7ff f88e 	bl	80011c0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a8:	f7ff f88a 	bl	80011c0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b64      	cmp	r3, #100	@ 0x64
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e21f      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	4b61      	ldr	r3, [pc, #388]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0xe8>
 80020c6:	e014      	b.n	80020f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7ff f87a 	bl	80011c0 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d0:	f7ff f876 	bl	80011c0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b64      	cmp	r3, #100	@ 0x64
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e20b      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	4b57      	ldr	r3, [pc, #348]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x110>
 80020ee:	e000      	b.n	80020f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d069      	beq.n	80021d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020fe:	4b50      	ldr	r3, [pc, #320]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b00      	cmp	r3, #0
 8002108:	d00b      	beq.n	8002122 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800210a:	4b4d      	ldr	r3, [pc, #308]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f003 030c 	and.w	r3, r3, #12
 8002112:	2b08      	cmp	r3, #8
 8002114:	d11c      	bne.n	8002150 <HAL_RCC_OscConfig+0x190>
 8002116:	4b4a      	ldr	r3, [pc, #296]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d116      	bne.n	8002150 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	4b47      	ldr	r3, [pc, #284]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_RCC_OscConfig+0x17a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d001      	beq.n	800213a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e1df      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213a:	4b41      	ldr	r3, [pc, #260]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	493d      	ldr	r1, [pc, #244]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 800214a:	4313      	orrs	r3, r2
 800214c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	e040      	b.n	80021d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d023      	beq.n	80021a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002158:	4b39      	ldr	r3, [pc, #228]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a38      	ldr	r2, [pc, #224]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7ff f82c 	bl	80011c0 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216c:	f7ff f828 	bl	80011c0 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1bd      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217e:	4b30      	ldr	r3, [pc, #192]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	4b2d      	ldr	r3, [pc, #180]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4929      	ldr	r1, [pc, #164]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 800219a:	4313      	orrs	r3, r2
 800219c:	600b      	str	r3, [r1, #0]
 800219e:	e018      	b.n	80021d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a0:	4b27      	ldr	r3, [pc, #156]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a26      	ldr	r2, [pc, #152]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7ff f808 	bl	80011c0 <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b4:	f7ff f804 	bl	80011c0 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e199      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0308 	and.w	r3, r3, #8
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d038      	beq.n	8002250 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d019      	beq.n	800221a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e6:	4b16      	ldr	r3, [pc, #88]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 80021e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ea:	4a15      	ldr	r2, [pc, #84]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f2:	f7fe ffe5 	bl	80011c0 <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021fa:	f7fe ffe1 	bl	80011c0 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e176      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 800220e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x23a>
 8002218:	e01a      	b.n	8002250 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800221a:	4b09      	ldr	r3, [pc, #36]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 800221c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800221e:	4a08      	ldr	r2, [pc, #32]	@ (8002240 <HAL_RCC_OscConfig+0x280>)
 8002220:	f023 0301 	bic.w	r3, r3, #1
 8002224:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002226:	f7fe ffcb 	bl	80011c0 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222e:	f7fe ffc7 	bl	80011c0 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	2b02      	cmp	r3, #2
 800223a:	d903      	bls.n	8002244 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800223c:	2303      	movs	r3, #3
 800223e:	e15c      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
 8002240:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002244:	4b91      	ldr	r3, [pc, #580]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 8002246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1ee      	bne.n	800222e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80a4 	beq.w	80023a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225e:	4b8b      	ldr	r3, [pc, #556]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 8002260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10d      	bne.n	8002286 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4b88      	ldr	r3, [pc, #544]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 800226c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226e:	4a87      	ldr	r2, [pc, #540]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002274:	6413      	str	r3, [r2, #64]	@ 0x40
 8002276:	4b85      	ldr	r3, [pc, #532]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002282:	2301      	movs	r3, #1
 8002284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002286:	4b82      	ldr	r3, [pc, #520]	@ (8002490 <HAL_RCC_OscConfig+0x4d0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d118      	bne.n	80022c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002292:	4b7f      	ldr	r3, [pc, #508]	@ (8002490 <HAL_RCC_OscConfig+0x4d0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7e      	ldr	r2, [pc, #504]	@ (8002490 <HAL_RCC_OscConfig+0x4d0>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800229c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229e:	f7fe ff8f 	bl	80011c0 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a6:	f7fe ff8b 	bl	80011c0 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b64      	cmp	r3, #100	@ 0x64
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e120      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b8:	4b75      	ldr	r3, [pc, #468]	@ (8002490 <HAL_RCC_OscConfig+0x4d0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x31a>
 80022cc:	4b6f      	ldr	r3, [pc, #444]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 80022ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d0:	4a6e      	ldr	r2, [pc, #440]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d8:	e02d      	b.n	8002336 <HAL_RCC_OscConfig+0x376>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x33c>
 80022e2:	4b6a      	ldr	r3, [pc, #424]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 80022e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e6:	4a69      	ldr	r2, [pc, #420]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ee:	4b67      	ldr	r3, [pc, #412]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 80022f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f2:	4a66      	ldr	r2, [pc, #408]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fa:	e01c      	b.n	8002336 <HAL_RCC_OscConfig+0x376>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	2b05      	cmp	r3, #5
 8002302:	d10c      	bne.n	800231e <HAL_RCC_OscConfig+0x35e>
 8002304:	4b61      	ldr	r3, [pc, #388]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002308:	4a60      	ldr	r2, [pc, #384]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002310:	4b5e      	ldr	r3, [pc, #376]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 8002312:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002314:	4a5d      	ldr	r2, [pc, #372]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6713      	str	r3, [r2, #112]	@ 0x70
 800231c:	e00b      	b.n	8002336 <HAL_RCC_OscConfig+0x376>
 800231e:	4b5b      	ldr	r3, [pc, #364]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002322:	4a5a      	ldr	r2, [pc, #360]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	6713      	str	r3, [r2, #112]	@ 0x70
 800232a:	4b58      	ldr	r3, [pc, #352]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232e:	4a57      	ldr	r2, [pc, #348]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d015      	beq.n	800236a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233e:	f7fe ff3f 	bl	80011c0 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7fe ff3b 	bl	80011c0 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0ce      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	4b4b      	ldr	r3, [pc, #300]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0ee      	beq.n	8002346 <HAL_RCC_OscConfig+0x386>
 8002368:	e014      	b.n	8002394 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236a:	f7fe ff29 	bl	80011c0 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	e00a      	b.n	8002388 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7fe ff25 	bl	80011c0 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e0b8      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002388:	4b40      	ldr	r3, [pc, #256]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1ee      	bne.n	8002372 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b3c      	ldr	r3, [pc, #240]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 800239c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239e:	4a3b      	ldr	r2, [pc, #236]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 80023a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 80a4 	beq.w	80024f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b0:	4b36      	ldr	r3, [pc, #216]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d06b      	beq.n	8002494 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d149      	bne.n	8002458 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c4:	4b31      	ldr	r3, [pc, #196]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a30      	ldr	r2, [pc, #192]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 80023ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fef6 	bl	80011c0 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe fef2 	bl	80011c0 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e087      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ea:	4b28      	ldr	r3, [pc, #160]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69da      	ldr	r2, [r3, #28]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	019b      	lsls	r3, r3, #6
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	085b      	lsrs	r3, r3, #1
 800240e:	3b01      	subs	r3, #1
 8002410:	041b      	lsls	r3, r3, #16
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002418:	061b      	lsls	r3, r3, #24
 800241a:	4313      	orrs	r3, r2
 800241c:	4a1b      	ldr	r2, [pc, #108]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 800241e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002422:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b19      	ldr	r3, [pc, #100]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a18      	ldr	r2, [pc, #96]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 800242a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800242e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fec6 	bl	80011c0 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fec2 	bl	80011c0 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e057      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x478>
 8002456:	e04f      	b.n	80024f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0b      	ldr	r2, [pc, #44]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 800245e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe feac 	bl	80011c0 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fea8 	bl	80011c0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e03d      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b03      	ldr	r3, [pc, #12]	@ (800248c <HAL_RCC_OscConfig+0x4cc>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x4ac>
 800248a:	e035      	b.n	80024f8 <HAL_RCC_OscConfig+0x538>
 800248c:	40023800 	.word	0x40023800
 8002490:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002494:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <HAL_RCC_OscConfig+0x544>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d028      	beq.n	80024f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d121      	bne.n	80024f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d11a      	bne.n	80024f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d111      	bne.n	80024f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024da:	085b      	lsrs	r3, r3, #1
 80024dc:	3b01      	subs	r3, #1
 80024de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d107      	bne.n	80024f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d001      	beq.n	80024f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800

08002508 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002512:	2300      	movs	r3, #0
 8002514:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0d0      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002520:	4b6a      	ldr	r3, [pc, #424]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d910      	bls.n	8002550 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	4b67      	ldr	r3, [pc, #412]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 020f 	bic.w	r2, r3, #15
 8002536:	4965      	ldr	r1, [pc, #404]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	4313      	orrs	r3, r2
 800253c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	4b63      	ldr	r3, [pc, #396]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 030f 	and.w	r3, r3, #15
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	429a      	cmp	r2, r3
 800254a:	d001      	beq.n	8002550 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e0b8      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d020      	beq.n	800259e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b00      	cmp	r3, #0
 8002566:	d005      	beq.n	8002574 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002568:	4b59      	ldr	r3, [pc, #356]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	4a58      	ldr	r2, [pc, #352]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 800256e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002572:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d005      	beq.n	800258c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002580:	4b53      	ldr	r3, [pc, #332]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	4a52      	ldr	r2, [pc, #328]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002586:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800258a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800258c:	4b50      	ldr	r3, [pc, #320]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	494d      	ldr	r1, [pc, #308]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d040      	beq.n	800262c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d107      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b47      	ldr	r3, [pc, #284]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d115      	bne.n	80025ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e07f      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d107      	bne.n	80025da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ca:	4b41      	ldr	r3, [pc, #260]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d109      	bne.n	80025ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e073      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025da:	4b3d      	ldr	r3, [pc, #244]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e06b      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ea:	4b39      	ldr	r3, [pc, #228]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f023 0203 	bic.w	r2, r3, #3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	4936      	ldr	r1, [pc, #216]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fc:	f7fe fde0 	bl	80011c0 <HAL_GetTick>
 8002600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002602:	e00a      	b.n	800261a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002604:	f7fe fddc 	bl	80011c0 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002612:	4293      	cmp	r3, r2
 8002614:	d901      	bls.n	800261a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002616:	2303      	movs	r3, #3
 8002618:	e053      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800261a:	4b2d      	ldr	r3, [pc, #180]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 020c 	and.w	r2, r3, #12
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	429a      	cmp	r2, r3
 800262a:	d1eb      	bne.n	8002604 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800262c:	4b27      	ldr	r3, [pc, #156]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d210      	bcs.n	800265c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b24      	ldr	r3, [pc, #144]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 020f 	bic.w	r2, r3, #15
 8002642:	4922      	ldr	r1, [pc, #136]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b20      	ldr	r3, [pc, #128]	@ (80026cc <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e032      	b.n	80026c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002668:	4b19      	ldr	r3, [pc, #100]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	4916      	ldr	r1, [pc, #88]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0308 	and.w	r3, r3, #8
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002686:	4b12      	ldr	r3, [pc, #72]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	490e      	ldr	r1, [pc, #56]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 8002696:	4313      	orrs	r3, r2
 8002698:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800269a:	f000 f821 	bl	80026e0 <HAL_RCC_GetSysClockFreq>
 800269e:	4602      	mov	r2, r0
 80026a0:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	490a      	ldr	r1, [pc, #40]	@ (80026d4 <HAL_RCC_ClockConfig+0x1cc>)
 80026ac:	5ccb      	ldrb	r3, [r1, r3]
 80026ae:	fa22 f303 	lsr.w	r3, r2, r3
 80026b2:	4a09      	ldr	r2, [pc, #36]	@ (80026d8 <HAL_RCC_ClockConfig+0x1d0>)
 80026b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026b6:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <HAL_RCC_ClockConfig+0x1d4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fd3c 	bl	8001138 <HAL_InitTick>

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40023c00 	.word	0x40023c00
 80026d0:	40023800 	.word	0x40023800
 80026d4:	080044c4 	.word	0x080044c4
 80026d8:	2000000c 	.word	0x2000000c
 80026dc:	20000010 	.word	0x20000010

080026e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e4:	b094      	sub	sp, #80	@ 0x50
 80026e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80026ec:	2300      	movs	r3, #0
 80026ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026f0:	2300      	movs	r3, #0
 80026f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80026f4:	2300      	movs	r3, #0
 80026f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f8:	4b79      	ldr	r3, [pc, #484]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 030c 	and.w	r3, r3, #12
 8002700:	2b08      	cmp	r3, #8
 8002702:	d00d      	beq.n	8002720 <HAL_RCC_GetSysClockFreq+0x40>
 8002704:	2b08      	cmp	r3, #8
 8002706:	f200 80e1 	bhi.w	80028cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x34>
 800270e:	2b04      	cmp	r3, #4
 8002710:	d003      	beq.n	800271a <HAL_RCC_GetSysClockFreq+0x3a>
 8002712:	e0db      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002714:	4b73      	ldr	r3, [pc, #460]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002716:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002718:	e0db      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800271a:	4b73      	ldr	r3, [pc, #460]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800271c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800271e:	e0d8      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002720:	4b6f      	ldr	r3, [pc, #444]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002728:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800272a:	4b6d      	ldr	r3, [pc, #436]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d063      	beq.n	80027fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002736:	4b6a      	ldr	r3, [pc, #424]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	099b      	lsrs	r3, r3, #6
 800273c:	2200      	movs	r2, #0
 800273e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002740:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002748:	633b      	str	r3, [r7, #48]	@ 0x30
 800274a:	2300      	movs	r3, #0
 800274c:	637b      	str	r3, [r7, #52]	@ 0x34
 800274e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002752:	4622      	mov	r2, r4
 8002754:	462b      	mov	r3, r5
 8002756:	f04f 0000 	mov.w	r0, #0
 800275a:	f04f 0100 	mov.w	r1, #0
 800275e:	0159      	lsls	r1, r3, #5
 8002760:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002764:	0150      	lsls	r0, r2, #5
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	4621      	mov	r1, r4
 800276c:	1a51      	subs	r1, r2, r1
 800276e:	6139      	str	r1, [r7, #16]
 8002770:	4629      	mov	r1, r5
 8002772:	eb63 0301 	sbc.w	r3, r3, r1
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	f04f 0300 	mov.w	r3, #0
 8002780:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002784:	4659      	mov	r1, fp
 8002786:	018b      	lsls	r3, r1, #6
 8002788:	4651      	mov	r1, sl
 800278a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800278e:	4651      	mov	r1, sl
 8002790:	018a      	lsls	r2, r1, #6
 8002792:	4651      	mov	r1, sl
 8002794:	ebb2 0801 	subs.w	r8, r2, r1
 8002798:	4659      	mov	r1, fp
 800279a:	eb63 0901 	sbc.w	r9, r3, r1
 800279e:	f04f 0200 	mov.w	r2, #0
 80027a2:	f04f 0300 	mov.w	r3, #0
 80027a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027b2:	4690      	mov	r8, r2
 80027b4:	4699      	mov	r9, r3
 80027b6:	4623      	mov	r3, r4
 80027b8:	eb18 0303 	adds.w	r3, r8, r3
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	462b      	mov	r3, r5
 80027c0:	eb49 0303 	adc.w	r3, r9, r3
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027d2:	4629      	mov	r1, r5
 80027d4:	024b      	lsls	r3, r1, #9
 80027d6:	4621      	mov	r1, r4
 80027d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027dc:	4621      	mov	r1, r4
 80027de:	024a      	lsls	r2, r1, #9
 80027e0:	4610      	mov	r0, r2
 80027e2:	4619      	mov	r1, r3
 80027e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027e6:	2200      	movs	r2, #0
 80027e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80027f0:	f7fd fd5e 	bl	80002b0 <__aeabi_uldivmod>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4613      	mov	r3, r2
 80027fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027fc:	e058      	b.n	80028b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027fe:	4b38      	ldr	r3, [pc, #224]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	099b      	lsrs	r3, r3, #6
 8002804:	2200      	movs	r2, #0
 8002806:	4618      	mov	r0, r3
 8002808:	4611      	mov	r1, r2
 800280a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800280e:	623b      	str	r3, [r7, #32]
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
 8002814:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002818:	4642      	mov	r2, r8
 800281a:	464b      	mov	r3, r9
 800281c:	f04f 0000 	mov.w	r0, #0
 8002820:	f04f 0100 	mov.w	r1, #0
 8002824:	0159      	lsls	r1, r3, #5
 8002826:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800282a:	0150      	lsls	r0, r2, #5
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	4641      	mov	r1, r8
 8002832:	ebb2 0a01 	subs.w	sl, r2, r1
 8002836:	4649      	mov	r1, r9
 8002838:	eb63 0b01 	sbc.w	fp, r3, r1
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	f04f 0300 	mov.w	r3, #0
 8002844:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002848:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800284c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002850:	ebb2 040a 	subs.w	r4, r2, sl
 8002854:	eb63 050b 	sbc.w	r5, r3, fp
 8002858:	f04f 0200 	mov.w	r2, #0
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	00eb      	lsls	r3, r5, #3
 8002862:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002866:	00e2      	lsls	r2, r4, #3
 8002868:	4614      	mov	r4, r2
 800286a:	461d      	mov	r5, r3
 800286c:	4643      	mov	r3, r8
 800286e:	18e3      	adds	r3, r4, r3
 8002870:	603b      	str	r3, [r7, #0]
 8002872:	464b      	mov	r3, r9
 8002874:	eb45 0303 	adc.w	r3, r5, r3
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002886:	4629      	mov	r1, r5
 8002888:	028b      	lsls	r3, r1, #10
 800288a:	4621      	mov	r1, r4
 800288c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002890:	4621      	mov	r1, r4
 8002892:	028a      	lsls	r2, r1, #10
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800289a:	2200      	movs	r2, #0
 800289c:	61bb      	str	r3, [r7, #24]
 800289e:	61fa      	str	r2, [r7, #28]
 80028a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028a4:	f7fd fd04 	bl	80002b0 <__aeabi_uldivmod>
 80028a8:	4602      	mov	r2, r0
 80028aa:	460b      	mov	r3, r1
 80028ac:	4613      	mov	r3, r2
 80028ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028b0:	4b0b      	ldr	r3, [pc, #44]	@ (80028e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	0c1b      	lsrs	r3, r3, #16
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	3301      	adds	r3, #1
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ca:	e002      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028cc:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3750      	adds	r7, #80	@ 0x50
 80028d8:	46bd      	mov	sp, r7
 80028da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	00f42400 	.word	0x00f42400
 80028e8:	007a1200 	.word	0x007a1200

080028ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d101      	bne.n	80028fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e09d      	b.n	8002a3a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	2b00      	cmp	r3, #0
 8002904:	d108      	bne.n	8002918 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800290e:	d009      	beq.n	8002924 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	61da      	str	r2, [r3, #28]
 8002916:	e005      	b.n	8002924 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fac2 	bl	8000ec8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2202      	movs	r2, #2
 8002948:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800295a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002964:	d902      	bls.n	800296c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	e002      	b.n	8002972 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800296c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002970:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800297a:	d007      	beq.n	800298c <HAL_SPI_Init+0xa0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002984:	d002      	beq.n	800298c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	f003 0302 	and.w	r3, r3, #2
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	695b      	ldr	r3, [r3, #20]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ce:	ea42 0103 	orr.w	r1, r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	0c1b      	lsrs	r3, r3, #16
 80029e8:	f003 0204 	and.w	r2, r3, #4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	431a      	orrs	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002a08:	ea42 0103 	orr.w	r1, r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69da      	ldr	r2, [r3, #28]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b088      	sub	sp, #32
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	603b      	str	r3, [r7, #0]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d101      	bne.n	8002a64 <HAL_SPI_Transmit+0x22>
 8002a60:	2302      	movs	r3, #2
 8002a62:	e15f      	b.n	8002d24 <HAL_SPI_Transmit+0x2e2>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a6c:	f7fe fba8 	bl	80011c0 <HAL_GetTick>
 8002a70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d002      	beq.n	8002a88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
 8002a84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a86:	e148      	b.n	8002d1a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_SPI_Transmit+0x52>
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a98:	e13f      	b.n	8002d1a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	88fa      	ldrh	r2, [r7, #6]
 8002ab2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	88fa      	ldrh	r2, [r7, #6]
 8002ab8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ae4:	d10f      	bne.n	8002b06 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002af4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b10:	2b40      	cmp	r3, #64	@ 0x40
 8002b12:	d007      	beq.n	8002b24 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002b2c:	d94f      	bls.n	8002bce <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_SPI_Transmit+0xfa>
 8002b36:	8afb      	ldrh	r3, [r7, #22]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d142      	bne.n	8002bc2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b40:	881a      	ldrh	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4c:	1c9a      	adds	r2, r3, #2
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b60:	e02f      	b.n	8002bc2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d112      	bne.n	8002b96 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b74:	881a      	ldrh	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b80:	1c9a      	adds	r2, r3, #2
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002b94:	e015      	b.n	8002bc2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b96:	f7fe fb13 	bl	80011c0 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d803      	bhi.n	8002bae <HAL_SPI_Transmit+0x16c>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bac:	d102      	bne.n	8002bb4 <HAL_SPI_Transmit+0x172>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d106      	bne.n	8002bc2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002bc0:	e0ab      	b.n	8002d1a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ca      	bne.n	8002b62 <HAL_SPI_Transmit+0x120>
 8002bcc:	e080      	b.n	8002cd0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_SPI_Transmit+0x19a>
 8002bd6:	8afb      	ldrh	r3, [r7, #22]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d174      	bne.n	8002cc6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d912      	bls.n	8002c0c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bea:	881a      	ldrh	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf6:	1c9a      	adds	r2, r3, #2
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b02      	subs	r3, #2
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c0a:	e05c      	b.n	8002cc6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	7812      	ldrb	r2, [r2, #0]
 8002c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c32:	e048      	b.n	8002cc6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d12b      	bne.n	8002c9a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d912      	bls.n	8002c72 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c50:	881a      	ldrh	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5c:	1c9a      	adds	r2, r3, #2
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	3b02      	subs	r3, #2
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c70:	e029      	b.n	8002cc6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	330c      	adds	r3, #12
 8002c7c:	7812      	ldrb	r2, [r2, #0]
 8002c7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002c98:	e015      	b.n	8002cc6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c9a:	f7fe fa91 	bl	80011c0 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d803      	bhi.n	8002cb2 <HAL_SPI_Transmit+0x270>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d102      	bne.n	8002cb8 <HAL_SPI_Transmit+0x276>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d106      	bne.n	8002cc6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8002cc4:	e029      	b.n	8002d1a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1b1      	bne.n	8002c34 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	6839      	ldr	r1, [r7, #0]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 fb0d 	bl	80032f4 <SPI_EndRxTxTransaction>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	77fb      	strb	r3, [r7, #31]
 8002d10:	e003      	b.n	8002d1a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002d22:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3720      	adds	r7, #32
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_SPI_Transmit_DMA+0x20>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e0d4      	b.n	8002ef6 <HAL_SPI_Transmit_DMA+0x1ca>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d002      	beq.n	8002d66 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8002d60:	2302      	movs	r3, #2
 8002d62:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d64:	e0c2      	b.n	8002eec <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <HAL_SPI_Transmit_DMA+0x46>
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d102      	bne.n	8002d78 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d76:	e0b9      	b.n	8002eec <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2203      	movs	r2, #3
 8002d7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	88fa      	ldrh	r2, [r7, #6]
 8002d90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	88fa      	ldrh	r2, [r7, #6]
 8002d96:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->RxXferSize  = 0U;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dc2:	d10f      	bne.n	8002de4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dd2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002de2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002de8:	4a45      	ldr	r2, [pc, #276]	@ (8002f00 <HAL_SPI_Transmit_DMA+0x1d4>)
 8002dea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df0:	4a44      	ldr	r2, [pc, #272]	@ (8002f04 <HAL_SPI_Transmit_DMA+0x1d8>)
 8002df2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df8:	4a43      	ldr	r2, [pc, #268]	@ (8002f08 <HAL_SPI_Transmit_DMA+0x1dc>)
 8002dfa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e00:	2200      	movs	r2, #0
 8002e02:	651a      	str	r2, [r3, #80]	@ 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e12:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e1c:	d82d      	bhi.n	8002e7a <HAL_SPI_Transmit_DMA+0x14e>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e28:	d127      	bne.n	8002e7a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10f      	bne.n	8002e58 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002e46:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	085b      	lsrs	r3, r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e56:	e010      	b.n	8002e7a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e66:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	085b      	lsrs	r3, r3, #1
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3301      	adds	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e82:	4619      	mov	r1, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	330c      	adds	r3, #12
 8002e8a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e90:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8002e92:	f7fe fb85 	bl	80015a0 <HAL_DMA_Start_IT>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea0:	f043 0210 	orr.w	r2, r3, #16
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	661a      	str	r2, [r3, #96]	@ 0x60
    errorcode = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	75fb      	strb	r3, [r7, #23]

    goto error;
 8002eac:	e01e      	b.n	8002eec <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eb8:	2b40      	cmp	r3, #64	@ 0x40
 8002eba:	d007      	beq.n	8002ecc <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002eca:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0220 	orr.w	r2, r2, #32
 8002eda:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0202 	orr.w	r2, r2, #2
 8002eea:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8002ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3718      	adds	r7, #24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	0800305b 	.word	0x0800305b
 8002f04:	08002fb3 	.word	0x08002fb3
 8002f08:	08003077 	.word	0x08003077

08002f0c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00f      	beq.n	8002f40 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe fb9b 	bl	8001660 <HAL_DMA_Abort>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d007      	beq.n	8002f40 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00f      	beq.n	8002f68 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fe fb87 	bl	8001660 <HAL_DMA_Abort>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d007      	beq.n	8002f68 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f5c:	f043 0210 	orr.w	r2, r3, #16
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	661a      	str	r2, [r3, #96]	@ 0x60
      errorcode = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0203 	bic.w	r2, r2, #3
 8002f76:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  return errorcode;
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3710      	adds	r7, #16
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002fa6:	bf00      	nop
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b086      	sub	sp, #24
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fbe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002fc0:	f7fe f8fe 	bl	80011c0 <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd4:	d03b      	beq.n	800304e <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0220 	bic.w	r2, r2, #32
 8002fe4:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0202 	bic.w	r2, r2, #2
 8002ff4:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	2164      	movs	r1, #100	@ 0x64
 8002ffa:	6978      	ldr	r0, [r7, #20]
 8002ffc:	f000 f97a 	bl	80032f4 <SPI_EndRxTxTransaction>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800301a:	2300      	movs	r3, #0
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	60fb      	str	r3, [r7, #12]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2200      	movs	r2, #0
 8003034:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	2201      	movs	r2, #1
 800303a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003046:	6978      	ldr	r0, [r7, #20]
 8003048:	f7ff ffa9 	bl	8002f9e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800304c:	e002      	b.n	8003054 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800304e:	6978      	ldr	r0, [r7, #20]
 8003050:	f7fd fef0 	bl	8000e34 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b084      	sub	sp, #16
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003066:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f7ff ff8e 	bl	8002f8a <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800306e:	bf00      	nop
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003082:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0203 	bic.w	r2, r2, #3
 8003092:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003098:	f043 0210 	orr.w	r2, r3, #16
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f7ff ff78 	bl	8002f9e <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80030ae:	bf00      	nop
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b088      	sub	sp, #32
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	603b      	str	r3, [r7, #0]
 80030c4:	4613      	mov	r3, r2
 80030c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030c8:	f7fe f87a 	bl	80011c0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	4413      	add	r3, r2
 80030d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030d8:	f7fe f872 	bl	80011c0 <HAL_GetTick>
 80030dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030de:	4b39      	ldr	r3, [pc, #228]	@ (80031c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	015b      	lsls	r3, r3, #5
 80030e4:	0d1b      	lsrs	r3, r3, #20
 80030e6:	69fa      	ldr	r2, [r7, #28]
 80030e8:	fb02 f303 	mul.w	r3, r2, r3
 80030ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ee:	e054      	b.n	800319a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f6:	d050      	beq.n	800319a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030f8:	f7fe f862 	bl	80011c0 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	69fa      	ldr	r2, [r7, #28]
 8003104:	429a      	cmp	r2, r3
 8003106:	d902      	bls.n	800310e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d13d      	bne.n	800318a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800311c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003126:	d111      	bne.n	800314c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003130:	d004      	beq.n	800313c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800313a:	d107      	bne.n	800314c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800314a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003150:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003154:	d10f      	bne.n	8003176 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003174:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e017      	b.n	80031ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003190:	2300      	movs	r3, #0
 8003192:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3b01      	subs	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	4013      	ands	r3, r2
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	bf0c      	ite	eq
 80031aa:	2301      	moveq	r3, #1
 80031ac:	2300      	movne	r3, #0
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d19b      	bne.n	80030f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	2000000c 	.word	0x2000000c

080031c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b08a      	sub	sp, #40	@ 0x28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031da:	f7fd fff1 	bl	80011c0 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	4413      	add	r3, r2
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80031ea:	f7fd ffe9 	bl	80011c0 <HAL_GetTick>
 80031ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	330c      	adds	r3, #12
 80031f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80031f8:	4b3d      	ldr	r3, [pc, #244]	@ (80032f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	00da      	lsls	r2, r3, #3
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	0d1b      	lsrs	r3, r3, #20
 8003208:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320a:	fb02 f303 	mul.w	r3, r2, r3
 800320e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003210:	e060      	b.n	80032d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003218:	d107      	bne.n	800322a <SPI_WaitFifoStateUntilTimeout+0x62>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d104      	bne.n	800322a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003228:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d050      	beq.n	80032d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003232:	f7fd ffc5 	bl	80011c0 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800323e:	429a      	cmp	r2, r3
 8003240:	d902      	bls.n	8003248 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003244:	2b00      	cmp	r3, #0
 8003246:	d13d      	bne.n	80032c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003256:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003260:	d111      	bne.n	8003286 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800326a:	d004      	beq.n	8003276 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003274:	d107      	bne.n	8003286 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003284:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800328a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800328e:	d10f      	bne.n	80032b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80032ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e010      	b.n	80032e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	4013      	ands	r3, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d196      	bne.n	8003212 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3728      	adds	r7, #40	@ 0x28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	2000000c 	.word	0x2000000c

080032f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af02      	add	r7, sp, #8
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2200      	movs	r2, #0
 8003308:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff ff5b 	bl	80031c8 <SPI_WaitFifoStateUntilTimeout>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800331c:	f043 0220 	orr.w	r2, r3, #32
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e046      	b.n	80033b6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003328:	4b25      	ldr	r3, [pc, #148]	@ (80033c0 <SPI_EndRxTxTransaction+0xcc>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a25      	ldr	r2, [pc, #148]	@ (80033c4 <SPI_EndRxTxTransaction+0xd0>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	0d5b      	lsrs	r3, r3, #21
 8003334:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003346:	d112      	bne.n	800336e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2200      	movs	r2, #0
 8003350:	2180      	movs	r1, #128	@ 0x80
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f7ff feb0 	bl	80030b8 <SPI_WaitFlagStateUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d016      	beq.n	800338c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003362:	f043 0220 	orr.w	r2, r3, #32
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e023      	b.n	80033b6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00a      	beq.n	800338a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3b01      	subs	r3, #1
 8003378:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003384:	2b80      	cmp	r3, #128	@ 0x80
 8003386:	d0f2      	beq.n	800336e <SPI_EndRxTxTransaction+0x7a>
 8003388:	e000      	b.n	800338c <SPI_EndRxTxTransaction+0x98>
        break;
 800338a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	2200      	movs	r2, #0
 8003394:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f7ff ff15 	bl	80031c8 <SPI_WaitFifoStateUntilTimeout>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033a8:	f043 0220 	orr.w	r2, r3, #32
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e000      	b.n	80033b6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
 80033be:	bf00      	nop
 80033c0:	2000000c 	.word	0x2000000c
 80033c4:	165e9f81 	.word	0x165e9f81

080033c8 <_vsniprintf_r>:
 80033c8:	b530      	push	{r4, r5, lr}
 80033ca:	4614      	mov	r4, r2
 80033cc:	2c00      	cmp	r4, #0
 80033ce:	b09b      	sub	sp, #108	@ 0x6c
 80033d0:	4605      	mov	r5, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	da05      	bge.n	80033e2 <_vsniprintf_r+0x1a>
 80033d6:	238b      	movs	r3, #139	@ 0x8b
 80033d8:	6003      	str	r3, [r0, #0]
 80033da:	f04f 30ff 	mov.w	r0, #4294967295
 80033de:	b01b      	add	sp, #108	@ 0x6c
 80033e0:	bd30      	pop	{r4, r5, pc}
 80033e2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80033e6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80033ea:	bf14      	ite	ne
 80033ec:	f104 33ff 	addne.w	r3, r4, #4294967295
 80033f0:	4623      	moveq	r3, r4
 80033f2:	9302      	str	r3, [sp, #8]
 80033f4:	9305      	str	r3, [sp, #20]
 80033f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80033fa:	9100      	str	r1, [sp, #0]
 80033fc:	9104      	str	r1, [sp, #16]
 80033fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003402:	4669      	mov	r1, sp
 8003404:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8003406:	f000 f9a1 	bl	800374c <_svfiprintf_r>
 800340a:	1c43      	adds	r3, r0, #1
 800340c:	bfbc      	itt	lt
 800340e:	238b      	movlt	r3, #139	@ 0x8b
 8003410:	602b      	strlt	r3, [r5, #0]
 8003412:	2c00      	cmp	r4, #0
 8003414:	d0e3      	beq.n	80033de <_vsniprintf_r+0x16>
 8003416:	9b00      	ldr	r3, [sp, #0]
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	e7df      	b.n	80033de <_vsniprintf_r+0x16>
	...

08003420 <vsniprintf>:
 8003420:	b507      	push	{r0, r1, r2, lr}
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	460a      	mov	r2, r1
 8003428:	4601      	mov	r1, r0
 800342a:	4803      	ldr	r0, [pc, #12]	@ (8003438 <vsniprintf+0x18>)
 800342c:	6800      	ldr	r0, [r0, #0]
 800342e:	f7ff ffcb 	bl	80033c8 <_vsniprintf_r>
 8003432:	b003      	add	sp, #12
 8003434:	f85d fb04 	ldr.w	pc, [sp], #4
 8003438:	20000018 	.word	0x20000018

0800343c <memset>:
 800343c:	4402      	add	r2, r0
 800343e:	4603      	mov	r3, r0
 8003440:	4293      	cmp	r3, r2
 8003442:	d100      	bne.n	8003446 <memset+0xa>
 8003444:	4770      	bx	lr
 8003446:	f803 1b01 	strb.w	r1, [r3], #1
 800344a:	e7f9      	b.n	8003440 <memset+0x4>

0800344c <__errno>:
 800344c:	4b01      	ldr	r3, [pc, #4]	@ (8003454 <__errno+0x8>)
 800344e:	6818      	ldr	r0, [r3, #0]
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	20000018 	.word	0x20000018

08003458 <__libc_init_array>:
 8003458:	b570      	push	{r4, r5, r6, lr}
 800345a:	4d0d      	ldr	r5, [pc, #52]	@ (8003490 <__libc_init_array+0x38>)
 800345c:	4c0d      	ldr	r4, [pc, #52]	@ (8003494 <__libc_init_array+0x3c>)
 800345e:	1b64      	subs	r4, r4, r5
 8003460:	10a4      	asrs	r4, r4, #2
 8003462:	2600      	movs	r6, #0
 8003464:	42a6      	cmp	r6, r4
 8003466:	d109      	bne.n	800347c <__libc_init_array+0x24>
 8003468:	4d0b      	ldr	r5, [pc, #44]	@ (8003498 <__libc_init_array+0x40>)
 800346a:	4c0c      	ldr	r4, [pc, #48]	@ (800349c <__libc_init_array+0x44>)
 800346c:	f000 fc66 	bl	8003d3c <_init>
 8003470:	1b64      	subs	r4, r4, r5
 8003472:	10a4      	asrs	r4, r4, #2
 8003474:	2600      	movs	r6, #0
 8003476:	42a6      	cmp	r6, r4
 8003478:	d105      	bne.n	8003486 <__libc_init_array+0x2e>
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003480:	4798      	blx	r3
 8003482:	3601      	adds	r6, #1
 8003484:	e7ee      	b.n	8003464 <__libc_init_array+0xc>
 8003486:	f855 3b04 	ldr.w	r3, [r5], #4
 800348a:	4798      	blx	r3
 800348c:	3601      	adds	r6, #1
 800348e:	e7f2      	b.n	8003476 <__libc_init_array+0x1e>
 8003490:	08004518 	.word	0x08004518
 8003494:	08004518 	.word	0x08004518
 8003498:	08004518 	.word	0x08004518
 800349c:	0800451c 	.word	0x0800451c

080034a0 <__retarget_lock_acquire_recursive>:
 80034a0:	4770      	bx	lr

080034a2 <__retarget_lock_release_recursive>:
 80034a2:	4770      	bx	lr

080034a4 <_free_r>:
 80034a4:	b538      	push	{r3, r4, r5, lr}
 80034a6:	4605      	mov	r5, r0
 80034a8:	2900      	cmp	r1, #0
 80034aa:	d041      	beq.n	8003530 <_free_r+0x8c>
 80034ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034b0:	1f0c      	subs	r4, r1, #4
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	bfb8      	it	lt
 80034b6:	18e4      	addlt	r4, r4, r3
 80034b8:	f000 f8e0 	bl	800367c <__malloc_lock>
 80034bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003534 <_free_r+0x90>)
 80034be:	6813      	ldr	r3, [r2, #0]
 80034c0:	b933      	cbnz	r3, 80034d0 <_free_r+0x2c>
 80034c2:	6063      	str	r3, [r4, #4]
 80034c4:	6014      	str	r4, [r2, #0]
 80034c6:	4628      	mov	r0, r5
 80034c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034cc:	f000 b8dc 	b.w	8003688 <__malloc_unlock>
 80034d0:	42a3      	cmp	r3, r4
 80034d2:	d908      	bls.n	80034e6 <_free_r+0x42>
 80034d4:	6820      	ldr	r0, [r4, #0]
 80034d6:	1821      	adds	r1, r4, r0
 80034d8:	428b      	cmp	r3, r1
 80034da:	bf01      	itttt	eq
 80034dc:	6819      	ldreq	r1, [r3, #0]
 80034de:	685b      	ldreq	r3, [r3, #4]
 80034e0:	1809      	addeq	r1, r1, r0
 80034e2:	6021      	streq	r1, [r4, #0]
 80034e4:	e7ed      	b.n	80034c2 <_free_r+0x1e>
 80034e6:	461a      	mov	r2, r3
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	b10b      	cbz	r3, 80034f0 <_free_r+0x4c>
 80034ec:	42a3      	cmp	r3, r4
 80034ee:	d9fa      	bls.n	80034e6 <_free_r+0x42>
 80034f0:	6811      	ldr	r1, [r2, #0]
 80034f2:	1850      	adds	r0, r2, r1
 80034f4:	42a0      	cmp	r0, r4
 80034f6:	d10b      	bne.n	8003510 <_free_r+0x6c>
 80034f8:	6820      	ldr	r0, [r4, #0]
 80034fa:	4401      	add	r1, r0
 80034fc:	1850      	adds	r0, r2, r1
 80034fe:	4283      	cmp	r3, r0
 8003500:	6011      	str	r1, [r2, #0]
 8003502:	d1e0      	bne.n	80034c6 <_free_r+0x22>
 8003504:	6818      	ldr	r0, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	6053      	str	r3, [r2, #4]
 800350a:	4408      	add	r0, r1
 800350c:	6010      	str	r0, [r2, #0]
 800350e:	e7da      	b.n	80034c6 <_free_r+0x22>
 8003510:	d902      	bls.n	8003518 <_free_r+0x74>
 8003512:	230c      	movs	r3, #12
 8003514:	602b      	str	r3, [r5, #0]
 8003516:	e7d6      	b.n	80034c6 <_free_r+0x22>
 8003518:	6820      	ldr	r0, [r4, #0]
 800351a:	1821      	adds	r1, r4, r0
 800351c:	428b      	cmp	r3, r1
 800351e:	bf04      	itt	eq
 8003520:	6819      	ldreq	r1, [r3, #0]
 8003522:	685b      	ldreq	r3, [r3, #4]
 8003524:	6063      	str	r3, [r4, #4]
 8003526:	bf04      	itt	eq
 8003528:	1809      	addeq	r1, r1, r0
 800352a:	6021      	streq	r1, [r4, #0]
 800352c:	6054      	str	r4, [r2, #4]
 800352e:	e7ca      	b.n	80034c6 <_free_r+0x22>
 8003530:	bd38      	pop	{r3, r4, r5, pc}
 8003532:	bf00      	nop
 8003534:	2000a298 	.word	0x2000a298

08003538 <sbrk_aligned>:
 8003538:	b570      	push	{r4, r5, r6, lr}
 800353a:	4e0f      	ldr	r6, [pc, #60]	@ (8003578 <sbrk_aligned+0x40>)
 800353c:	460c      	mov	r4, r1
 800353e:	6831      	ldr	r1, [r6, #0]
 8003540:	4605      	mov	r5, r0
 8003542:	b911      	cbnz	r1, 800354a <sbrk_aligned+0x12>
 8003544:	f000 fba6 	bl	8003c94 <_sbrk_r>
 8003548:	6030      	str	r0, [r6, #0]
 800354a:	4621      	mov	r1, r4
 800354c:	4628      	mov	r0, r5
 800354e:	f000 fba1 	bl	8003c94 <_sbrk_r>
 8003552:	1c43      	adds	r3, r0, #1
 8003554:	d103      	bne.n	800355e <sbrk_aligned+0x26>
 8003556:	f04f 34ff 	mov.w	r4, #4294967295
 800355a:	4620      	mov	r0, r4
 800355c:	bd70      	pop	{r4, r5, r6, pc}
 800355e:	1cc4      	adds	r4, r0, #3
 8003560:	f024 0403 	bic.w	r4, r4, #3
 8003564:	42a0      	cmp	r0, r4
 8003566:	d0f8      	beq.n	800355a <sbrk_aligned+0x22>
 8003568:	1a21      	subs	r1, r4, r0
 800356a:	4628      	mov	r0, r5
 800356c:	f000 fb92 	bl	8003c94 <_sbrk_r>
 8003570:	3001      	adds	r0, #1
 8003572:	d1f2      	bne.n	800355a <sbrk_aligned+0x22>
 8003574:	e7ef      	b.n	8003556 <sbrk_aligned+0x1e>
 8003576:	bf00      	nop
 8003578:	2000a294 	.word	0x2000a294

0800357c <_malloc_r>:
 800357c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003580:	1ccd      	adds	r5, r1, #3
 8003582:	f025 0503 	bic.w	r5, r5, #3
 8003586:	3508      	adds	r5, #8
 8003588:	2d0c      	cmp	r5, #12
 800358a:	bf38      	it	cc
 800358c:	250c      	movcc	r5, #12
 800358e:	2d00      	cmp	r5, #0
 8003590:	4606      	mov	r6, r0
 8003592:	db01      	blt.n	8003598 <_malloc_r+0x1c>
 8003594:	42a9      	cmp	r1, r5
 8003596:	d904      	bls.n	80035a2 <_malloc_r+0x26>
 8003598:	230c      	movs	r3, #12
 800359a:	6033      	str	r3, [r6, #0]
 800359c:	2000      	movs	r0, #0
 800359e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003678 <_malloc_r+0xfc>
 80035a6:	f000 f869 	bl	800367c <__malloc_lock>
 80035aa:	f8d8 3000 	ldr.w	r3, [r8]
 80035ae:	461c      	mov	r4, r3
 80035b0:	bb44      	cbnz	r4, 8003604 <_malloc_r+0x88>
 80035b2:	4629      	mov	r1, r5
 80035b4:	4630      	mov	r0, r6
 80035b6:	f7ff ffbf 	bl	8003538 <sbrk_aligned>
 80035ba:	1c43      	adds	r3, r0, #1
 80035bc:	4604      	mov	r4, r0
 80035be:	d158      	bne.n	8003672 <_malloc_r+0xf6>
 80035c0:	f8d8 4000 	ldr.w	r4, [r8]
 80035c4:	4627      	mov	r7, r4
 80035c6:	2f00      	cmp	r7, #0
 80035c8:	d143      	bne.n	8003652 <_malloc_r+0xd6>
 80035ca:	2c00      	cmp	r4, #0
 80035cc:	d04b      	beq.n	8003666 <_malloc_r+0xea>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	4639      	mov	r1, r7
 80035d2:	4630      	mov	r0, r6
 80035d4:	eb04 0903 	add.w	r9, r4, r3
 80035d8:	f000 fb5c 	bl	8003c94 <_sbrk_r>
 80035dc:	4581      	cmp	r9, r0
 80035de:	d142      	bne.n	8003666 <_malloc_r+0xea>
 80035e0:	6821      	ldr	r1, [r4, #0]
 80035e2:	1a6d      	subs	r5, r5, r1
 80035e4:	4629      	mov	r1, r5
 80035e6:	4630      	mov	r0, r6
 80035e8:	f7ff ffa6 	bl	8003538 <sbrk_aligned>
 80035ec:	3001      	adds	r0, #1
 80035ee:	d03a      	beq.n	8003666 <_malloc_r+0xea>
 80035f0:	6823      	ldr	r3, [r4, #0]
 80035f2:	442b      	add	r3, r5
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	f8d8 3000 	ldr.w	r3, [r8]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	bb62      	cbnz	r2, 8003658 <_malloc_r+0xdc>
 80035fe:	f8c8 7000 	str.w	r7, [r8]
 8003602:	e00f      	b.n	8003624 <_malloc_r+0xa8>
 8003604:	6822      	ldr	r2, [r4, #0]
 8003606:	1b52      	subs	r2, r2, r5
 8003608:	d420      	bmi.n	800364c <_malloc_r+0xd0>
 800360a:	2a0b      	cmp	r2, #11
 800360c:	d917      	bls.n	800363e <_malloc_r+0xc2>
 800360e:	1961      	adds	r1, r4, r5
 8003610:	42a3      	cmp	r3, r4
 8003612:	6025      	str	r5, [r4, #0]
 8003614:	bf18      	it	ne
 8003616:	6059      	strne	r1, [r3, #4]
 8003618:	6863      	ldr	r3, [r4, #4]
 800361a:	bf08      	it	eq
 800361c:	f8c8 1000 	streq.w	r1, [r8]
 8003620:	5162      	str	r2, [r4, r5]
 8003622:	604b      	str	r3, [r1, #4]
 8003624:	4630      	mov	r0, r6
 8003626:	f000 f82f 	bl	8003688 <__malloc_unlock>
 800362a:	f104 000b 	add.w	r0, r4, #11
 800362e:	1d23      	adds	r3, r4, #4
 8003630:	f020 0007 	bic.w	r0, r0, #7
 8003634:	1ac2      	subs	r2, r0, r3
 8003636:	bf1c      	itt	ne
 8003638:	1a1b      	subne	r3, r3, r0
 800363a:	50a3      	strne	r3, [r4, r2]
 800363c:	e7af      	b.n	800359e <_malloc_r+0x22>
 800363e:	6862      	ldr	r2, [r4, #4]
 8003640:	42a3      	cmp	r3, r4
 8003642:	bf0c      	ite	eq
 8003644:	f8c8 2000 	streq.w	r2, [r8]
 8003648:	605a      	strne	r2, [r3, #4]
 800364a:	e7eb      	b.n	8003624 <_malloc_r+0xa8>
 800364c:	4623      	mov	r3, r4
 800364e:	6864      	ldr	r4, [r4, #4]
 8003650:	e7ae      	b.n	80035b0 <_malloc_r+0x34>
 8003652:	463c      	mov	r4, r7
 8003654:	687f      	ldr	r7, [r7, #4]
 8003656:	e7b6      	b.n	80035c6 <_malloc_r+0x4a>
 8003658:	461a      	mov	r2, r3
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	42a3      	cmp	r3, r4
 800365e:	d1fb      	bne.n	8003658 <_malloc_r+0xdc>
 8003660:	2300      	movs	r3, #0
 8003662:	6053      	str	r3, [r2, #4]
 8003664:	e7de      	b.n	8003624 <_malloc_r+0xa8>
 8003666:	230c      	movs	r3, #12
 8003668:	6033      	str	r3, [r6, #0]
 800366a:	4630      	mov	r0, r6
 800366c:	f000 f80c 	bl	8003688 <__malloc_unlock>
 8003670:	e794      	b.n	800359c <_malloc_r+0x20>
 8003672:	6005      	str	r5, [r0, #0]
 8003674:	e7d6      	b.n	8003624 <_malloc_r+0xa8>
 8003676:	bf00      	nop
 8003678:	2000a298 	.word	0x2000a298

0800367c <__malloc_lock>:
 800367c:	4801      	ldr	r0, [pc, #4]	@ (8003684 <__malloc_lock+0x8>)
 800367e:	f7ff bf0f 	b.w	80034a0 <__retarget_lock_acquire_recursive>
 8003682:	bf00      	nop
 8003684:	2000a290 	.word	0x2000a290

08003688 <__malloc_unlock>:
 8003688:	4801      	ldr	r0, [pc, #4]	@ (8003690 <__malloc_unlock+0x8>)
 800368a:	f7ff bf0a 	b.w	80034a2 <__retarget_lock_release_recursive>
 800368e:	bf00      	nop
 8003690:	2000a290 	.word	0x2000a290

08003694 <__ssputs_r>:
 8003694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003698:	688e      	ldr	r6, [r1, #8]
 800369a:	461f      	mov	r7, r3
 800369c:	42be      	cmp	r6, r7
 800369e:	680b      	ldr	r3, [r1, #0]
 80036a0:	4682      	mov	sl, r0
 80036a2:	460c      	mov	r4, r1
 80036a4:	4690      	mov	r8, r2
 80036a6:	d82d      	bhi.n	8003704 <__ssputs_r+0x70>
 80036a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80036ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80036b0:	d026      	beq.n	8003700 <__ssputs_r+0x6c>
 80036b2:	6965      	ldr	r5, [r4, #20]
 80036b4:	6909      	ldr	r1, [r1, #16]
 80036b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036ba:	eba3 0901 	sub.w	r9, r3, r1
 80036be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80036c2:	1c7b      	adds	r3, r7, #1
 80036c4:	444b      	add	r3, r9
 80036c6:	106d      	asrs	r5, r5, #1
 80036c8:	429d      	cmp	r5, r3
 80036ca:	bf38      	it	cc
 80036cc:	461d      	movcc	r5, r3
 80036ce:	0553      	lsls	r3, r2, #21
 80036d0:	d527      	bpl.n	8003722 <__ssputs_r+0x8e>
 80036d2:	4629      	mov	r1, r5
 80036d4:	f7ff ff52 	bl	800357c <_malloc_r>
 80036d8:	4606      	mov	r6, r0
 80036da:	b360      	cbz	r0, 8003736 <__ssputs_r+0xa2>
 80036dc:	6921      	ldr	r1, [r4, #16]
 80036de:	464a      	mov	r2, r9
 80036e0:	f000 fae8 	bl	8003cb4 <memcpy>
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80036ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80036ee:	81a3      	strh	r3, [r4, #12]
 80036f0:	6126      	str	r6, [r4, #16]
 80036f2:	6165      	str	r5, [r4, #20]
 80036f4:	444e      	add	r6, r9
 80036f6:	eba5 0509 	sub.w	r5, r5, r9
 80036fa:	6026      	str	r6, [r4, #0]
 80036fc:	60a5      	str	r5, [r4, #8]
 80036fe:	463e      	mov	r6, r7
 8003700:	42be      	cmp	r6, r7
 8003702:	d900      	bls.n	8003706 <__ssputs_r+0x72>
 8003704:	463e      	mov	r6, r7
 8003706:	6820      	ldr	r0, [r4, #0]
 8003708:	4632      	mov	r2, r6
 800370a:	4641      	mov	r1, r8
 800370c:	f000 faa8 	bl	8003c60 <memmove>
 8003710:	68a3      	ldr	r3, [r4, #8]
 8003712:	1b9b      	subs	r3, r3, r6
 8003714:	60a3      	str	r3, [r4, #8]
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	4433      	add	r3, r6
 800371a:	6023      	str	r3, [r4, #0]
 800371c:	2000      	movs	r0, #0
 800371e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003722:	462a      	mov	r2, r5
 8003724:	f000 fad4 	bl	8003cd0 <_realloc_r>
 8003728:	4606      	mov	r6, r0
 800372a:	2800      	cmp	r0, #0
 800372c:	d1e0      	bne.n	80036f0 <__ssputs_r+0x5c>
 800372e:	6921      	ldr	r1, [r4, #16]
 8003730:	4650      	mov	r0, sl
 8003732:	f7ff feb7 	bl	80034a4 <_free_r>
 8003736:	230c      	movs	r3, #12
 8003738:	f8ca 3000 	str.w	r3, [sl]
 800373c:	89a3      	ldrh	r3, [r4, #12]
 800373e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003742:	81a3      	strh	r3, [r4, #12]
 8003744:	f04f 30ff 	mov.w	r0, #4294967295
 8003748:	e7e9      	b.n	800371e <__ssputs_r+0x8a>
	...

0800374c <_svfiprintf_r>:
 800374c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003750:	4698      	mov	r8, r3
 8003752:	898b      	ldrh	r3, [r1, #12]
 8003754:	061b      	lsls	r3, r3, #24
 8003756:	b09d      	sub	sp, #116	@ 0x74
 8003758:	4607      	mov	r7, r0
 800375a:	460d      	mov	r5, r1
 800375c:	4614      	mov	r4, r2
 800375e:	d510      	bpl.n	8003782 <_svfiprintf_r+0x36>
 8003760:	690b      	ldr	r3, [r1, #16]
 8003762:	b973      	cbnz	r3, 8003782 <_svfiprintf_r+0x36>
 8003764:	2140      	movs	r1, #64	@ 0x40
 8003766:	f7ff ff09 	bl	800357c <_malloc_r>
 800376a:	6028      	str	r0, [r5, #0]
 800376c:	6128      	str	r0, [r5, #16]
 800376e:	b930      	cbnz	r0, 800377e <_svfiprintf_r+0x32>
 8003770:	230c      	movs	r3, #12
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	f04f 30ff 	mov.w	r0, #4294967295
 8003778:	b01d      	add	sp, #116	@ 0x74
 800377a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800377e:	2340      	movs	r3, #64	@ 0x40
 8003780:	616b      	str	r3, [r5, #20]
 8003782:	2300      	movs	r3, #0
 8003784:	9309      	str	r3, [sp, #36]	@ 0x24
 8003786:	2320      	movs	r3, #32
 8003788:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800378c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003790:	2330      	movs	r3, #48	@ 0x30
 8003792:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003930 <_svfiprintf_r+0x1e4>
 8003796:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800379a:	f04f 0901 	mov.w	r9, #1
 800379e:	4623      	mov	r3, r4
 80037a0:	469a      	mov	sl, r3
 80037a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037a6:	b10a      	cbz	r2, 80037ac <_svfiprintf_r+0x60>
 80037a8:	2a25      	cmp	r2, #37	@ 0x25
 80037aa:	d1f9      	bne.n	80037a0 <_svfiprintf_r+0x54>
 80037ac:	ebba 0b04 	subs.w	fp, sl, r4
 80037b0:	d00b      	beq.n	80037ca <_svfiprintf_r+0x7e>
 80037b2:	465b      	mov	r3, fp
 80037b4:	4622      	mov	r2, r4
 80037b6:	4629      	mov	r1, r5
 80037b8:	4638      	mov	r0, r7
 80037ba:	f7ff ff6b 	bl	8003694 <__ssputs_r>
 80037be:	3001      	adds	r0, #1
 80037c0:	f000 80a7 	beq.w	8003912 <_svfiprintf_r+0x1c6>
 80037c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80037c6:	445a      	add	r2, fp
 80037c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80037ca:	f89a 3000 	ldrb.w	r3, [sl]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 809f 	beq.w	8003912 <_svfiprintf_r+0x1c6>
 80037d4:	2300      	movs	r3, #0
 80037d6:	f04f 32ff 	mov.w	r2, #4294967295
 80037da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037de:	f10a 0a01 	add.w	sl, sl, #1
 80037e2:	9304      	str	r3, [sp, #16]
 80037e4:	9307      	str	r3, [sp, #28]
 80037e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80037ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80037ec:	4654      	mov	r4, sl
 80037ee:	2205      	movs	r2, #5
 80037f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037f4:	484e      	ldr	r0, [pc, #312]	@ (8003930 <_svfiprintf_r+0x1e4>)
 80037f6:	f7fc fd0b 	bl	8000210 <memchr>
 80037fa:	9a04      	ldr	r2, [sp, #16]
 80037fc:	b9d8      	cbnz	r0, 8003836 <_svfiprintf_r+0xea>
 80037fe:	06d0      	lsls	r0, r2, #27
 8003800:	bf44      	itt	mi
 8003802:	2320      	movmi	r3, #32
 8003804:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003808:	0711      	lsls	r1, r2, #28
 800380a:	bf44      	itt	mi
 800380c:	232b      	movmi	r3, #43	@ 0x2b
 800380e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003812:	f89a 3000 	ldrb.w	r3, [sl]
 8003816:	2b2a      	cmp	r3, #42	@ 0x2a
 8003818:	d015      	beq.n	8003846 <_svfiprintf_r+0xfa>
 800381a:	9a07      	ldr	r2, [sp, #28]
 800381c:	4654      	mov	r4, sl
 800381e:	2000      	movs	r0, #0
 8003820:	f04f 0c0a 	mov.w	ip, #10
 8003824:	4621      	mov	r1, r4
 8003826:	f811 3b01 	ldrb.w	r3, [r1], #1
 800382a:	3b30      	subs	r3, #48	@ 0x30
 800382c:	2b09      	cmp	r3, #9
 800382e:	d94b      	bls.n	80038c8 <_svfiprintf_r+0x17c>
 8003830:	b1b0      	cbz	r0, 8003860 <_svfiprintf_r+0x114>
 8003832:	9207      	str	r2, [sp, #28]
 8003834:	e014      	b.n	8003860 <_svfiprintf_r+0x114>
 8003836:	eba0 0308 	sub.w	r3, r0, r8
 800383a:	fa09 f303 	lsl.w	r3, r9, r3
 800383e:	4313      	orrs	r3, r2
 8003840:	9304      	str	r3, [sp, #16]
 8003842:	46a2      	mov	sl, r4
 8003844:	e7d2      	b.n	80037ec <_svfiprintf_r+0xa0>
 8003846:	9b03      	ldr	r3, [sp, #12]
 8003848:	1d19      	adds	r1, r3, #4
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	9103      	str	r1, [sp, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	bfbb      	ittet	lt
 8003852:	425b      	neglt	r3, r3
 8003854:	f042 0202 	orrlt.w	r2, r2, #2
 8003858:	9307      	strge	r3, [sp, #28]
 800385a:	9307      	strlt	r3, [sp, #28]
 800385c:	bfb8      	it	lt
 800385e:	9204      	strlt	r2, [sp, #16]
 8003860:	7823      	ldrb	r3, [r4, #0]
 8003862:	2b2e      	cmp	r3, #46	@ 0x2e
 8003864:	d10a      	bne.n	800387c <_svfiprintf_r+0x130>
 8003866:	7863      	ldrb	r3, [r4, #1]
 8003868:	2b2a      	cmp	r3, #42	@ 0x2a
 800386a:	d132      	bne.n	80038d2 <_svfiprintf_r+0x186>
 800386c:	9b03      	ldr	r3, [sp, #12]
 800386e:	1d1a      	adds	r2, r3, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	9203      	str	r2, [sp, #12]
 8003874:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003878:	3402      	adds	r4, #2
 800387a:	9305      	str	r3, [sp, #20]
 800387c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003940 <_svfiprintf_r+0x1f4>
 8003880:	7821      	ldrb	r1, [r4, #0]
 8003882:	2203      	movs	r2, #3
 8003884:	4650      	mov	r0, sl
 8003886:	f7fc fcc3 	bl	8000210 <memchr>
 800388a:	b138      	cbz	r0, 800389c <_svfiprintf_r+0x150>
 800388c:	9b04      	ldr	r3, [sp, #16]
 800388e:	eba0 000a 	sub.w	r0, r0, sl
 8003892:	2240      	movs	r2, #64	@ 0x40
 8003894:	4082      	lsls	r2, r0
 8003896:	4313      	orrs	r3, r2
 8003898:	3401      	adds	r4, #1
 800389a:	9304      	str	r3, [sp, #16]
 800389c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038a0:	4824      	ldr	r0, [pc, #144]	@ (8003934 <_svfiprintf_r+0x1e8>)
 80038a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80038a6:	2206      	movs	r2, #6
 80038a8:	f7fc fcb2 	bl	8000210 <memchr>
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d036      	beq.n	800391e <_svfiprintf_r+0x1d2>
 80038b0:	4b21      	ldr	r3, [pc, #132]	@ (8003938 <_svfiprintf_r+0x1ec>)
 80038b2:	bb1b      	cbnz	r3, 80038fc <_svfiprintf_r+0x1b0>
 80038b4:	9b03      	ldr	r3, [sp, #12]
 80038b6:	3307      	adds	r3, #7
 80038b8:	f023 0307 	bic.w	r3, r3, #7
 80038bc:	3308      	adds	r3, #8
 80038be:	9303      	str	r3, [sp, #12]
 80038c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80038c2:	4433      	add	r3, r6
 80038c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80038c6:	e76a      	b.n	800379e <_svfiprintf_r+0x52>
 80038c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80038cc:	460c      	mov	r4, r1
 80038ce:	2001      	movs	r0, #1
 80038d0:	e7a8      	b.n	8003824 <_svfiprintf_r+0xd8>
 80038d2:	2300      	movs	r3, #0
 80038d4:	3401      	adds	r4, #1
 80038d6:	9305      	str	r3, [sp, #20]
 80038d8:	4619      	mov	r1, r3
 80038da:	f04f 0c0a 	mov.w	ip, #10
 80038de:	4620      	mov	r0, r4
 80038e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038e4:	3a30      	subs	r2, #48	@ 0x30
 80038e6:	2a09      	cmp	r2, #9
 80038e8:	d903      	bls.n	80038f2 <_svfiprintf_r+0x1a6>
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0c6      	beq.n	800387c <_svfiprintf_r+0x130>
 80038ee:	9105      	str	r1, [sp, #20]
 80038f0:	e7c4      	b.n	800387c <_svfiprintf_r+0x130>
 80038f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80038f6:	4604      	mov	r4, r0
 80038f8:	2301      	movs	r3, #1
 80038fa:	e7f0      	b.n	80038de <_svfiprintf_r+0x192>
 80038fc:	ab03      	add	r3, sp, #12
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	462a      	mov	r2, r5
 8003902:	4b0e      	ldr	r3, [pc, #56]	@ (800393c <_svfiprintf_r+0x1f0>)
 8003904:	a904      	add	r1, sp, #16
 8003906:	4638      	mov	r0, r7
 8003908:	f3af 8000 	nop.w
 800390c:	1c42      	adds	r2, r0, #1
 800390e:	4606      	mov	r6, r0
 8003910:	d1d6      	bne.n	80038c0 <_svfiprintf_r+0x174>
 8003912:	89ab      	ldrh	r3, [r5, #12]
 8003914:	065b      	lsls	r3, r3, #25
 8003916:	f53f af2d 	bmi.w	8003774 <_svfiprintf_r+0x28>
 800391a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800391c:	e72c      	b.n	8003778 <_svfiprintf_r+0x2c>
 800391e:	ab03      	add	r3, sp, #12
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	462a      	mov	r2, r5
 8003924:	4b05      	ldr	r3, [pc, #20]	@ (800393c <_svfiprintf_r+0x1f0>)
 8003926:	a904      	add	r1, sp, #16
 8003928:	4638      	mov	r0, r7
 800392a:	f000 f879 	bl	8003a20 <_printf_i>
 800392e:	e7ed      	b.n	800390c <_svfiprintf_r+0x1c0>
 8003930:	080044dc 	.word	0x080044dc
 8003934:	080044e6 	.word	0x080044e6
 8003938:	00000000 	.word	0x00000000
 800393c:	08003695 	.word	0x08003695
 8003940:	080044e2 	.word	0x080044e2

08003944 <_printf_common>:
 8003944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003948:	4616      	mov	r6, r2
 800394a:	4698      	mov	r8, r3
 800394c:	688a      	ldr	r2, [r1, #8]
 800394e:	690b      	ldr	r3, [r1, #16]
 8003950:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003954:	4293      	cmp	r3, r2
 8003956:	bfb8      	it	lt
 8003958:	4613      	movlt	r3, r2
 800395a:	6033      	str	r3, [r6, #0]
 800395c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003960:	4607      	mov	r7, r0
 8003962:	460c      	mov	r4, r1
 8003964:	b10a      	cbz	r2, 800396a <_printf_common+0x26>
 8003966:	3301      	adds	r3, #1
 8003968:	6033      	str	r3, [r6, #0]
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	0699      	lsls	r1, r3, #26
 800396e:	bf42      	ittt	mi
 8003970:	6833      	ldrmi	r3, [r6, #0]
 8003972:	3302      	addmi	r3, #2
 8003974:	6033      	strmi	r3, [r6, #0]
 8003976:	6825      	ldr	r5, [r4, #0]
 8003978:	f015 0506 	ands.w	r5, r5, #6
 800397c:	d106      	bne.n	800398c <_printf_common+0x48>
 800397e:	f104 0a19 	add.w	sl, r4, #25
 8003982:	68e3      	ldr	r3, [r4, #12]
 8003984:	6832      	ldr	r2, [r6, #0]
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	42ab      	cmp	r3, r5
 800398a:	dc26      	bgt.n	80039da <_printf_common+0x96>
 800398c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003990:	6822      	ldr	r2, [r4, #0]
 8003992:	3b00      	subs	r3, #0
 8003994:	bf18      	it	ne
 8003996:	2301      	movne	r3, #1
 8003998:	0692      	lsls	r2, r2, #26
 800399a:	d42b      	bmi.n	80039f4 <_printf_common+0xb0>
 800399c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80039a0:	4641      	mov	r1, r8
 80039a2:	4638      	mov	r0, r7
 80039a4:	47c8      	blx	r9
 80039a6:	3001      	adds	r0, #1
 80039a8:	d01e      	beq.n	80039e8 <_printf_common+0xa4>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	6922      	ldr	r2, [r4, #16]
 80039ae:	f003 0306 	and.w	r3, r3, #6
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	bf02      	ittt	eq
 80039b6:	68e5      	ldreq	r5, [r4, #12]
 80039b8:	6833      	ldreq	r3, [r6, #0]
 80039ba:	1aed      	subeq	r5, r5, r3
 80039bc:	68a3      	ldr	r3, [r4, #8]
 80039be:	bf0c      	ite	eq
 80039c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039c4:	2500      	movne	r5, #0
 80039c6:	4293      	cmp	r3, r2
 80039c8:	bfc4      	itt	gt
 80039ca:	1a9b      	subgt	r3, r3, r2
 80039cc:	18ed      	addgt	r5, r5, r3
 80039ce:	2600      	movs	r6, #0
 80039d0:	341a      	adds	r4, #26
 80039d2:	42b5      	cmp	r5, r6
 80039d4:	d11a      	bne.n	8003a0c <_printf_common+0xc8>
 80039d6:	2000      	movs	r0, #0
 80039d8:	e008      	b.n	80039ec <_printf_common+0xa8>
 80039da:	2301      	movs	r3, #1
 80039dc:	4652      	mov	r2, sl
 80039de:	4641      	mov	r1, r8
 80039e0:	4638      	mov	r0, r7
 80039e2:	47c8      	blx	r9
 80039e4:	3001      	adds	r0, #1
 80039e6:	d103      	bne.n	80039f0 <_printf_common+0xac>
 80039e8:	f04f 30ff 	mov.w	r0, #4294967295
 80039ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039f0:	3501      	adds	r5, #1
 80039f2:	e7c6      	b.n	8003982 <_printf_common+0x3e>
 80039f4:	18e1      	adds	r1, r4, r3
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	2030      	movs	r0, #48	@ 0x30
 80039fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80039fe:	4422      	add	r2, r4
 8003a00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003a04:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003a08:	3302      	adds	r3, #2
 8003a0a:	e7c7      	b.n	800399c <_printf_common+0x58>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	4622      	mov	r2, r4
 8003a10:	4641      	mov	r1, r8
 8003a12:	4638      	mov	r0, r7
 8003a14:	47c8      	blx	r9
 8003a16:	3001      	adds	r0, #1
 8003a18:	d0e6      	beq.n	80039e8 <_printf_common+0xa4>
 8003a1a:	3601      	adds	r6, #1
 8003a1c:	e7d9      	b.n	80039d2 <_printf_common+0x8e>
	...

08003a20 <_printf_i>:
 8003a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a24:	7e0f      	ldrb	r7, [r1, #24]
 8003a26:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003a28:	2f78      	cmp	r7, #120	@ 0x78
 8003a2a:	4691      	mov	r9, r2
 8003a2c:	4680      	mov	r8, r0
 8003a2e:	460c      	mov	r4, r1
 8003a30:	469a      	mov	sl, r3
 8003a32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003a36:	d807      	bhi.n	8003a48 <_printf_i+0x28>
 8003a38:	2f62      	cmp	r7, #98	@ 0x62
 8003a3a:	d80a      	bhi.n	8003a52 <_printf_i+0x32>
 8003a3c:	2f00      	cmp	r7, #0
 8003a3e:	f000 80d2 	beq.w	8003be6 <_printf_i+0x1c6>
 8003a42:	2f58      	cmp	r7, #88	@ 0x58
 8003a44:	f000 80b9 	beq.w	8003bba <_printf_i+0x19a>
 8003a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003a50:	e03a      	b.n	8003ac8 <_printf_i+0xa8>
 8003a52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003a56:	2b15      	cmp	r3, #21
 8003a58:	d8f6      	bhi.n	8003a48 <_printf_i+0x28>
 8003a5a:	a101      	add	r1, pc, #4	@ (adr r1, 8003a60 <_printf_i+0x40>)
 8003a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a60:	08003ab9 	.word	0x08003ab9
 8003a64:	08003acd 	.word	0x08003acd
 8003a68:	08003a49 	.word	0x08003a49
 8003a6c:	08003a49 	.word	0x08003a49
 8003a70:	08003a49 	.word	0x08003a49
 8003a74:	08003a49 	.word	0x08003a49
 8003a78:	08003acd 	.word	0x08003acd
 8003a7c:	08003a49 	.word	0x08003a49
 8003a80:	08003a49 	.word	0x08003a49
 8003a84:	08003a49 	.word	0x08003a49
 8003a88:	08003a49 	.word	0x08003a49
 8003a8c:	08003bcd 	.word	0x08003bcd
 8003a90:	08003af7 	.word	0x08003af7
 8003a94:	08003b87 	.word	0x08003b87
 8003a98:	08003a49 	.word	0x08003a49
 8003a9c:	08003a49 	.word	0x08003a49
 8003aa0:	08003bef 	.word	0x08003bef
 8003aa4:	08003a49 	.word	0x08003a49
 8003aa8:	08003af7 	.word	0x08003af7
 8003aac:	08003a49 	.word	0x08003a49
 8003ab0:	08003a49 	.word	0x08003a49
 8003ab4:	08003b8f 	.word	0x08003b8f
 8003ab8:	6833      	ldr	r3, [r6, #0]
 8003aba:	1d1a      	adds	r2, r3, #4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6032      	str	r2, [r6, #0]
 8003ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ac4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e09d      	b.n	8003c08 <_printf_i+0x1e8>
 8003acc:	6833      	ldr	r3, [r6, #0]
 8003ace:	6820      	ldr	r0, [r4, #0]
 8003ad0:	1d19      	adds	r1, r3, #4
 8003ad2:	6031      	str	r1, [r6, #0]
 8003ad4:	0606      	lsls	r6, r0, #24
 8003ad6:	d501      	bpl.n	8003adc <_printf_i+0xbc>
 8003ad8:	681d      	ldr	r5, [r3, #0]
 8003ada:	e003      	b.n	8003ae4 <_printf_i+0xc4>
 8003adc:	0645      	lsls	r5, r0, #25
 8003ade:	d5fb      	bpl.n	8003ad8 <_printf_i+0xb8>
 8003ae0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ae4:	2d00      	cmp	r5, #0
 8003ae6:	da03      	bge.n	8003af0 <_printf_i+0xd0>
 8003ae8:	232d      	movs	r3, #45	@ 0x2d
 8003aea:	426d      	negs	r5, r5
 8003aec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003af0:	4859      	ldr	r0, [pc, #356]	@ (8003c58 <_printf_i+0x238>)
 8003af2:	230a      	movs	r3, #10
 8003af4:	e011      	b.n	8003b1a <_printf_i+0xfa>
 8003af6:	6821      	ldr	r1, [r4, #0]
 8003af8:	6833      	ldr	r3, [r6, #0]
 8003afa:	0608      	lsls	r0, r1, #24
 8003afc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003b00:	d402      	bmi.n	8003b08 <_printf_i+0xe8>
 8003b02:	0649      	lsls	r1, r1, #25
 8003b04:	bf48      	it	mi
 8003b06:	b2ad      	uxthmi	r5, r5
 8003b08:	2f6f      	cmp	r7, #111	@ 0x6f
 8003b0a:	4853      	ldr	r0, [pc, #332]	@ (8003c58 <_printf_i+0x238>)
 8003b0c:	6033      	str	r3, [r6, #0]
 8003b0e:	bf14      	ite	ne
 8003b10:	230a      	movne	r3, #10
 8003b12:	2308      	moveq	r3, #8
 8003b14:	2100      	movs	r1, #0
 8003b16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003b1a:	6866      	ldr	r6, [r4, #4]
 8003b1c:	60a6      	str	r6, [r4, #8]
 8003b1e:	2e00      	cmp	r6, #0
 8003b20:	bfa2      	ittt	ge
 8003b22:	6821      	ldrge	r1, [r4, #0]
 8003b24:	f021 0104 	bicge.w	r1, r1, #4
 8003b28:	6021      	strge	r1, [r4, #0]
 8003b2a:	b90d      	cbnz	r5, 8003b30 <_printf_i+0x110>
 8003b2c:	2e00      	cmp	r6, #0
 8003b2e:	d04b      	beq.n	8003bc8 <_printf_i+0x1a8>
 8003b30:	4616      	mov	r6, r2
 8003b32:	fbb5 f1f3 	udiv	r1, r5, r3
 8003b36:	fb03 5711 	mls	r7, r3, r1, r5
 8003b3a:	5dc7      	ldrb	r7, [r0, r7]
 8003b3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003b40:	462f      	mov	r7, r5
 8003b42:	42bb      	cmp	r3, r7
 8003b44:	460d      	mov	r5, r1
 8003b46:	d9f4      	bls.n	8003b32 <_printf_i+0x112>
 8003b48:	2b08      	cmp	r3, #8
 8003b4a:	d10b      	bne.n	8003b64 <_printf_i+0x144>
 8003b4c:	6823      	ldr	r3, [r4, #0]
 8003b4e:	07df      	lsls	r7, r3, #31
 8003b50:	d508      	bpl.n	8003b64 <_printf_i+0x144>
 8003b52:	6923      	ldr	r3, [r4, #16]
 8003b54:	6861      	ldr	r1, [r4, #4]
 8003b56:	4299      	cmp	r1, r3
 8003b58:	bfde      	ittt	le
 8003b5a:	2330      	movle	r3, #48	@ 0x30
 8003b5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003b60:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003b64:	1b92      	subs	r2, r2, r6
 8003b66:	6122      	str	r2, [r4, #16]
 8003b68:	f8cd a000 	str.w	sl, [sp]
 8003b6c:	464b      	mov	r3, r9
 8003b6e:	aa03      	add	r2, sp, #12
 8003b70:	4621      	mov	r1, r4
 8003b72:	4640      	mov	r0, r8
 8003b74:	f7ff fee6 	bl	8003944 <_printf_common>
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d14a      	bne.n	8003c12 <_printf_i+0x1f2>
 8003b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b80:	b004      	add	sp, #16
 8003b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	f043 0320 	orr.w	r3, r3, #32
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	4833      	ldr	r0, [pc, #204]	@ (8003c5c <_printf_i+0x23c>)
 8003b90:	2778      	movs	r7, #120	@ 0x78
 8003b92:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	6831      	ldr	r1, [r6, #0]
 8003b9a:	061f      	lsls	r7, r3, #24
 8003b9c:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ba0:	d402      	bmi.n	8003ba8 <_printf_i+0x188>
 8003ba2:	065f      	lsls	r7, r3, #25
 8003ba4:	bf48      	it	mi
 8003ba6:	b2ad      	uxthmi	r5, r5
 8003ba8:	6031      	str	r1, [r6, #0]
 8003baa:	07d9      	lsls	r1, r3, #31
 8003bac:	bf44      	itt	mi
 8003bae:	f043 0320 	orrmi.w	r3, r3, #32
 8003bb2:	6023      	strmi	r3, [r4, #0]
 8003bb4:	b11d      	cbz	r5, 8003bbe <_printf_i+0x19e>
 8003bb6:	2310      	movs	r3, #16
 8003bb8:	e7ac      	b.n	8003b14 <_printf_i+0xf4>
 8003bba:	4827      	ldr	r0, [pc, #156]	@ (8003c58 <_printf_i+0x238>)
 8003bbc:	e7e9      	b.n	8003b92 <_printf_i+0x172>
 8003bbe:	6823      	ldr	r3, [r4, #0]
 8003bc0:	f023 0320 	bic.w	r3, r3, #32
 8003bc4:	6023      	str	r3, [r4, #0]
 8003bc6:	e7f6      	b.n	8003bb6 <_printf_i+0x196>
 8003bc8:	4616      	mov	r6, r2
 8003bca:	e7bd      	b.n	8003b48 <_printf_i+0x128>
 8003bcc:	6833      	ldr	r3, [r6, #0]
 8003bce:	6825      	ldr	r5, [r4, #0]
 8003bd0:	6961      	ldr	r1, [r4, #20]
 8003bd2:	1d18      	adds	r0, r3, #4
 8003bd4:	6030      	str	r0, [r6, #0]
 8003bd6:	062e      	lsls	r6, r5, #24
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	d501      	bpl.n	8003be0 <_printf_i+0x1c0>
 8003bdc:	6019      	str	r1, [r3, #0]
 8003bde:	e002      	b.n	8003be6 <_printf_i+0x1c6>
 8003be0:	0668      	lsls	r0, r5, #25
 8003be2:	d5fb      	bpl.n	8003bdc <_printf_i+0x1bc>
 8003be4:	8019      	strh	r1, [r3, #0]
 8003be6:	2300      	movs	r3, #0
 8003be8:	6123      	str	r3, [r4, #16]
 8003bea:	4616      	mov	r6, r2
 8003bec:	e7bc      	b.n	8003b68 <_printf_i+0x148>
 8003bee:	6833      	ldr	r3, [r6, #0]
 8003bf0:	1d1a      	adds	r2, r3, #4
 8003bf2:	6032      	str	r2, [r6, #0]
 8003bf4:	681e      	ldr	r6, [r3, #0]
 8003bf6:	6862      	ldr	r2, [r4, #4]
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4630      	mov	r0, r6
 8003bfc:	f7fc fb08 	bl	8000210 <memchr>
 8003c00:	b108      	cbz	r0, 8003c06 <_printf_i+0x1e6>
 8003c02:	1b80      	subs	r0, r0, r6
 8003c04:	6060      	str	r0, [r4, #4]
 8003c06:	6863      	ldr	r3, [r4, #4]
 8003c08:	6123      	str	r3, [r4, #16]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c10:	e7aa      	b.n	8003b68 <_printf_i+0x148>
 8003c12:	6923      	ldr	r3, [r4, #16]
 8003c14:	4632      	mov	r2, r6
 8003c16:	4649      	mov	r1, r9
 8003c18:	4640      	mov	r0, r8
 8003c1a:	47d0      	blx	sl
 8003c1c:	3001      	adds	r0, #1
 8003c1e:	d0ad      	beq.n	8003b7c <_printf_i+0x15c>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	079b      	lsls	r3, r3, #30
 8003c24:	d413      	bmi.n	8003c4e <_printf_i+0x22e>
 8003c26:	68e0      	ldr	r0, [r4, #12]
 8003c28:	9b03      	ldr	r3, [sp, #12]
 8003c2a:	4298      	cmp	r0, r3
 8003c2c:	bfb8      	it	lt
 8003c2e:	4618      	movlt	r0, r3
 8003c30:	e7a6      	b.n	8003b80 <_printf_i+0x160>
 8003c32:	2301      	movs	r3, #1
 8003c34:	4632      	mov	r2, r6
 8003c36:	4649      	mov	r1, r9
 8003c38:	4640      	mov	r0, r8
 8003c3a:	47d0      	blx	sl
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	d09d      	beq.n	8003b7c <_printf_i+0x15c>
 8003c40:	3501      	adds	r5, #1
 8003c42:	68e3      	ldr	r3, [r4, #12]
 8003c44:	9903      	ldr	r1, [sp, #12]
 8003c46:	1a5b      	subs	r3, r3, r1
 8003c48:	42ab      	cmp	r3, r5
 8003c4a:	dcf2      	bgt.n	8003c32 <_printf_i+0x212>
 8003c4c:	e7eb      	b.n	8003c26 <_printf_i+0x206>
 8003c4e:	2500      	movs	r5, #0
 8003c50:	f104 0619 	add.w	r6, r4, #25
 8003c54:	e7f5      	b.n	8003c42 <_printf_i+0x222>
 8003c56:	bf00      	nop
 8003c58:	080044ed 	.word	0x080044ed
 8003c5c:	080044fe 	.word	0x080044fe

08003c60 <memmove>:
 8003c60:	4288      	cmp	r0, r1
 8003c62:	b510      	push	{r4, lr}
 8003c64:	eb01 0402 	add.w	r4, r1, r2
 8003c68:	d902      	bls.n	8003c70 <memmove+0x10>
 8003c6a:	4284      	cmp	r4, r0
 8003c6c:	4623      	mov	r3, r4
 8003c6e:	d807      	bhi.n	8003c80 <memmove+0x20>
 8003c70:	1e43      	subs	r3, r0, #1
 8003c72:	42a1      	cmp	r1, r4
 8003c74:	d008      	beq.n	8003c88 <memmove+0x28>
 8003c76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c7e:	e7f8      	b.n	8003c72 <memmove+0x12>
 8003c80:	4402      	add	r2, r0
 8003c82:	4601      	mov	r1, r0
 8003c84:	428a      	cmp	r2, r1
 8003c86:	d100      	bne.n	8003c8a <memmove+0x2a>
 8003c88:	bd10      	pop	{r4, pc}
 8003c8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c92:	e7f7      	b.n	8003c84 <memmove+0x24>

08003c94 <_sbrk_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	4d06      	ldr	r5, [pc, #24]	@ (8003cb0 <_sbrk_r+0x1c>)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	602b      	str	r3, [r5, #0]
 8003ca0:	f7fd f9cc 	bl	800103c <_sbrk>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d102      	bne.n	8003cae <_sbrk_r+0x1a>
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	b103      	cbz	r3, 8003cae <_sbrk_r+0x1a>
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	2000a28c 	.word	0x2000a28c

08003cb4 <memcpy>:
 8003cb4:	440a      	add	r2, r1
 8003cb6:	4291      	cmp	r1, r2
 8003cb8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cbc:	d100      	bne.n	8003cc0 <memcpy+0xc>
 8003cbe:	4770      	bx	lr
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cca:	4291      	cmp	r1, r2
 8003ccc:	d1f9      	bne.n	8003cc2 <memcpy+0xe>
 8003cce:	bd10      	pop	{r4, pc}

08003cd0 <_realloc_r>:
 8003cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cd4:	4680      	mov	r8, r0
 8003cd6:	4615      	mov	r5, r2
 8003cd8:	460c      	mov	r4, r1
 8003cda:	b921      	cbnz	r1, 8003ce6 <_realloc_r+0x16>
 8003cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	f7ff bc4b 	b.w	800357c <_malloc_r>
 8003ce6:	b92a      	cbnz	r2, 8003cf4 <_realloc_r+0x24>
 8003ce8:	f7ff fbdc 	bl	80034a4 <_free_r>
 8003cec:	2400      	movs	r4, #0
 8003cee:	4620      	mov	r0, r4
 8003cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cf4:	f000 f81a 	bl	8003d2c <_malloc_usable_size_r>
 8003cf8:	4285      	cmp	r5, r0
 8003cfa:	4606      	mov	r6, r0
 8003cfc:	d802      	bhi.n	8003d04 <_realloc_r+0x34>
 8003cfe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003d02:	d8f4      	bhi.n	8003cee <_realloc_r+0x1e>
 8003d04:	4629      	mov	r1, r5
 8003d06:	4640      	mov	r0, r8
 8003d08:	f7ff fc38 	bl	800357c <_malloc_r>
 8003d0c:	4607      	mov	r7, r0
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d0ec      	beq.n	8003cec <_realloc_r+0x1c>
 8003d12:	42b5      	cmp	r5, r6
 8003d14:	462a      	mov	r2, r5
 8003d16:	4621      	mov	r1, r4
 8003d18:	bf28      	it	cs
 8003d1a:	4632      	movcs	r2, r6
 8003d1c:	f7ff ffca 	bl	8003cb4 <memcpy>
 8003d20:	4621      	mov	r1, r4
 8003d22:	4640      	mov	r0, r8
 8003d24:	f7ff fbbe 	bl	80034a4 <_free_r>
 8003d28:	463c      	mov	r4, r7
 8003d2a:	e7e0      	b.n	8003cee <_realloc_r+0x1e>

08003d2c <_malloc_usable_size_r>:
 8003d2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d30:	1f18      	subs	r0, r3, #4
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	bfbc      	itt	lt
 8003d36:	580b      	ldrlt	r3, [r1, r0]
 8003d38:	18c0      	addlt	r0, r0, r3
 8003d3a:	4770      	bx	lr

08003d3c <_init>:
 8003d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3e:	bf00      	nop
 8003d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d42:	bc08      	pop	{r3}
 8003d44:	469e      	mov	lr, r3
 8003d46:	4770      	bx	lr

08003d48 <_fini>:
 8003d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4a:	bf00      	nop
 8003d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d4e:	bc08      	pop	{r3}
 8003d50:	469e      	mov	lr, r3
 8003d52:	4770      	bx	lr
